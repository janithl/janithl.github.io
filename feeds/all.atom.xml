<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Janith's Blog</title><link href="https://janithl.github.io/" rel="alternate"></link><link href="https://janithl.github.io/feeds/all.atom.xml" rel="self"></link><id>https://janithl.github.io/</id><updated>2020-10-23T21:38:00+05:30</updated><entry><title>Links: What I've Been Watching</title><link href="https://janithl.github.io/2020/10/links-what-ive-been-watching/" rel="alternate"></link><published>2020-10-23T21:38:00+05:30</published><updated>2020-10-23T21:38:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-10-23:/2020/10/links-what-ive-been-watching/</id><summary type="html">&lt;p&gt;Here's a small recap of what I've been watching on the ol' YouTube.&lt;/p&gt;
&lt;h3&gt;Practical Engineering&lt;/h3&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/aspPJ2Wcaig"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/PracticalEngineeringChannel"&gt;Grady Hillhouse&lt;/a&gt; just has the most calming presence on screen, and he
explains complex engineering concepts with simple practical setups. His series’
on &lt;a href="https://www.youtube.com/watch?v=UOHURuAf5iY&amp;amp;list=PLTZM4MrZKfW90PdaBFt70BLTbz1bTF6Mn"&gt;concrete&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=7tjf8HWiR3Y&amp;amp;list=PLTZM4MrZKfW_XJht-K7a9_egIsFqze0nQ"&gt;hydraulics&lt;/a&gt;, and &lt;a href="https://www.youtube.com/watch?v=v1BMWczn7JM&amp;amp;list=PLTZM4MrZKfW-ftqKGSbO-DwDiOGqNmq53"&gt;the power grid&lt;/a&gt; are not only
information-packed but witty …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a small recap of what I've been watching on the ol' YouTube.&lt;/p&gt;
&lt;h3&gt;Practical Engineering&lt;/h3&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/aspPJ2Wcaig"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/PracticalEngineeringChannel"&gt;Grady Hillhouse&lt;/a&gt; just has the most calming presence on screen, and he
explains complex engineering concepts with simple practical setups. His series’
on &lt;a href="https://www.youtube.com/watch?v=UOHURuAf5iY&amp;amp;list=PLTZM4MrZKfW90PdaBFt70BLTbz1bTF6Mn"&gt;concrete&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=7tjf8HWiR3Y&amp;amp;list=PLTZM4MrZKfW_XJht-K7a9_egIsFqze0nQ"&gt;hydraulics&lt;/a&gt;, and &lt;a href="https://www.youtube.com/watch?v=v1BMWczn7JM&amp;amp;list=PLTZM4MrZKfW-ftqKGSbO-DwDiOGqNmq53"&gt;the power grid&lt;/a&gt; are not only
information-packed but witty as well.&lt;/p&gt;
&lt;h4&gt;See Also:&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/c/TechnologyConnections"&gt;&lt;strong&gt;Technology Connections&lt;/strong&gt;&lt;/a&gt;: The old faithful when you want to learn way
too much about anything from &lt;a href="https://www.youtube.com/watch?v=zeOw5MZWq24"&gt;Christmas lights&lt;/a&gt; to &lt;a href="https://www.youtube.com/watch?v=KfuARMCyTvg"&gt;VHS tapes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/c/CityBeautiful"&gt;&lt;strong&gt;City Beautiful&lt;/strong&gt;&lt;/a&gt;: The channel that city-design-obsessed teenage me would’ve
love to have had growing up. He covers everything from &lt;a href="https://www.youtube.com/watch?v=JGVBv7svKLo"&gt;Soviet city design&lt;/a&gt;,
to &lt;a href="https://www.youtube.com/watch?v=P8dmVUrNt38"&gt;Vancouverism&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Scott Manly&lt;/h3&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/aa4ATJGRqA0"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/szyzyg"&gt;This man&lt;/a&gt; has single-handedly reignited (like an Agena upper stage) my long-lost
passion for rocketry and space exploration. He covers everything from the history
of &lt;a href="https://www.youtube.com/watch?v=KzGsWw47sMY"&gt;the Soyuz&lt;/a&gt; to the &lt;a href="https://www.youtube.com/watch?v=XxDZYuAZxSc"&gt;latest SpaceX breakthroughs&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;See Also:&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/c/CphSuborbitals"&gt;&lt;strong&gt;Copenhagen Suborbitals&lt;/strong&gt;&lt;/a&gt;: If DIY rockets are your thing, check out this private
European setup attempting to send a human into orbit!&lt;/p&gt;
&lt;h3&gt;Johnny Harris&lt;/h3&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/OwqVtZn5df8"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=wILAAYhKQnY"&gt;Vox’s Borders might be cancelled&lt;/a&gt;, but that won’t stop Johnny from talking about a
border dispute &lt;a href="https://www.youtube.com/watch?v=ROIK9_zh5Ts"&gt;between the US and Canada&lt;/a&gt;. Or &lt;a href="https://www.youtube.com/watch?v=YeAxxMZf1O4"&gt;Switzerland’s explosive neutrality&lt;/a&gt;.
Or just &lt;a href="https://www.youtube.com/watch?v=XVvFRE6yNPk"&gt;&lt;em&gt;the&lt;/em&gt; most amazing international breakfasts&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;See Also:&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/c/IzHarris"&gt;&lt;strong&gt;His lovely wife Iz&lt;/strong&gt;&lt;/a&gt;: She makes videos for Eater, and &lt;a href="https://www.youtube.com/watch?v=TtJM83Fe8ro&amp;amp;list=PLUeEVLHfB5-TN5emEqMdsZbI5qqSj0nYS"&gt;her series on Taiwan&lt;/a&gt;
was just breathtakingly good.&lt;/p&gt;
&lt;h3&gt;Rick Beato&lt;/h3&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/XZYDDX1DHDU"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/RickBeato"&gt;The OG music producer YouTuber&lt;/a&gt;. Today, he has &lt;a href="https://www.youtube.com/watch?v=jqAqvIYxEuA"&gt;an amazing interview up with Steve Jordan&lt;/a&gt;.
His &lt;a href="https://www.youtube.com/watch?v=ScRG40_7zb0&amp;amp;list=PLW0NGgv1qnfzb1klL6Vw9B0aiM7ryfXV_"&gt;&lt;em&gt;What Makes This Song Great&lt;/em&gt; series&lt;/a&gt; has got me in trouble in the past because I
paid more attention to it than the other people in my life.&lt;/p&gt;
&lt;h4&gt;See Also:&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/c/AdamNeely"&gt;&lt;strong&gt;Adam Neely&lt;/strong&gt;&lt;/a&gt;: His &lt;a href="https://www.youtube.com/watch?v=OFWCbGzxofU"&gt;video on &lt;em&gt;The Girl From Impanema&lt;/em&gt;&lt;/a&gt; is just an instant classic.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/c/12tonevideos"&gt;&lt;strong&gt;12Tone&lt;/strong&gt;&lt;/a&gt;: One of my longest subs. I wake up every Saturday awaiting a breakdown of
&lt;a href="https://www.youtube.com/watch?v=GPHpKS04NJI"&gt;what makes Uptown Funk so catchy&lt;/a&gt;, or why the &lt;a href="https://www.youtube.com/watch?v=L5eN83w0ssc"&gt;Yamaha E-Piano tone&lt;/a&gt; stand out so much.&lt;/p&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/qhxtrC-b-FI"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/KeenOnKeys"&gt;&lt;strong&gt;Keen on Keys&lt;/strong&gt;&lt;/a&gt;: This is such a great channel that deserves a whole post of its own.
Check out the amazing &lt;a href="https://www.youtube.com/watch?v=yUWMkJyEBQQ"&gt;PortaSound PS-3 video&lt;/a&gt;, or the &lt;a href="https://www.youtube.com/watch?v=LsYdsmaTFZs"&gt;one on the HS-200/HS-500&lt;/a&gt;, or
the &lt;a href="https://www.youtube.com/watch?v=4zpjGXH4umQ"&gt;Casio MT-40/MT-41 video&lt;/a&gt;. Such an &lt;a href="https://soundcloud.com/user-229361059"&gt;amazing musician&lt;/a&gt;, and videos with
professional-level production quality.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;And so, those are my favourite subscriptions at the moment. I find myself watching YouTube
more now that I work from home and I upgraded my data plan. This has (predictably) led to
less time for longer-form video content, which honestly I am okay with.&lt;/p&gt;</content><category term="education"></category><category term="geopolitics"></category><category term="music"></category><category term="travel"></category></entry><entry><title>Clearing The Slate</title><link href="https://janithl.github.io/2020/10/clearing-the-slate/" rel="alternate"></link><published>2020-10-09T08:40:00+05:30</published><updated>2020-10-09T08:40:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-10-09:/2020/10/clearing-the-slate/</id><summary type="html">&lt;p&gt;I like blank slates, and I like closure.&lt;/p&gt;
&lt;p&gt;My JIRA board at work has a bunch of stubborn tickets that won't go
away. This seems to mirror life in general, in that the peace that I
seek, of finally finishing what I've been working on, seems to be
drifting further …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I like blank slates, and I like closure.&lt;/p&gt;
&lt;p&gt;My JIRA board at work has a bunch of stubborn tickets that won't go
away. This seems to mirror life in general, in that the peace that I
seek, of finally finishing what I've been working on, seems to be
drifting further away the more I run towards it.&lt;/p&gt;
&lt;p&gt;It's been a crazy year, and this is the fourth draft of a post that I've
been writing since the middle of August. Just like the music and paintings
I've been working on, I kept hitting a wall where what I wanted to say, and
what I was capable of saying diverged. I'm just tired at this point. I've
tried to be proactive in a year in which that sort of thing just wasn't
meant to be. Talk about a bad &lt;em&gt;nekatha&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It's time to take a deep breath, lie down, and take a well-deserved rest.&lt;/p&gt;</content><category term="biology"></category><category term="people"></category></entry><entry><title>Falling in Love</title><link href="https://janithl.github.io/2020/07/falling-in-love/" rel="alternate"></link><published>2020-07-25T08:40:00+05:30</published><updated>2020-07-25T08:40:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-07-25:/2020/07/falling-in-love/</id><summary type="html">&lt;p&gt;you fall in love&lt;/p&gt;
&lt;p&gt;over a phone call&lt;/p&gt;
&lt;p&gt;in the backseat of the cinema&lt;/p&gt;
&lt;p&gt;reading whatsapps at 1 am&lt;/p&gt;
&lt;p&gt;at a candle lit dinner&lt;/p&gt;
&lt;p&gt;or when you're the first to hear about their day&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;you fall in love&lt;/p&gt;
&lt;p&gt;every time you work out&lt;/p&gt;
&lt;p&gt;or take a good shower&lt;/p&gt;
&lt;p&gt;sit down …&lt;/p&gt;</summary><content type="html">&lt;p&gt;you fall in love&lt;/p&gt;
&lt;p&gt;over a phone call&lt;/p&gt;
&lt;p&gt;in the backseat of the cinema&lt;/p&gt;
&lt;p&gt;reading whatsapps at 1 am&lt;/p&gt;
&lt;p&gt;at a candle lit dinner&lt;/p&gt;
&lt;p&gt;or when you're the first to hear about their day&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;you fall in love&lt;/p&gt;
&lt;p&gt;every time you work out&lt;/p&gt;
&lt;p&gt;or take a good shower&lt;/p&gt;
&lt;p&gt;sit down to write a new song&lt;/p&gt;
&lt;p&gt;or learn something new&lt;/p&gt;
&lt;p&gt;and not because someone asked you to&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;is one really any better than the other?&lt;/p&gt;
&lt;p&gt;can the first even exist in a void?&lt;/p&gt;</content><category term="biology"></category><category term="people"></category></entry><entry><title>Tagged Template Literals are Awesome!</title><link href="https://janithl.github.io/2020/07/js-template-literals/" rel="alternate"></link><published>2020-07-05T07:20:00+05:30</published><updated>2020-07-05T07:20:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-07-05:/2020/07/js-template-literals/</id><summary type="html">&lt;p&gt;You will often need to implement text that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Highlighted Text" src="https://janithl.github.io/images/highlighted-text.png"&gt;&lt;/p&gt;
&lt;p&gt;Now, it's fairly simple enough to do in HTML, but when you do it in React Native
it looks a bit gnarly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;Text style={styles.text}&amp;gt;
  You’re going to &amp;lt;Text style={styles.highlighted}&amp;gt;send a message&amp;lt;/Text&amp;gt; to …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;You will often need to implement text that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Highlighted Text" src="https://janithl.github.io/images/highlighted-text.png"&gt;&lt;/p&gt;
&lt;p&gt;Now, it's fairly simple enough to do in HTML, but when you do it in React Native
it looks a bit gnarly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;Text style={styles.text}&amp;gt;
  You’re going to &amp;lt;Text style={styles.highlighted}&amp;gt;send a message&amp;lt;/Text&amp;gt; to{&amp;quot; &amp;quot;}
  &amp;lt;Text style={styles.highlighted}&amp;gt;Pingpong&amp;lt;/Text&amp;gt;. Please confirm?
&amp;lt;/Text&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, I prefer to keep strings like this in a separate file in React Native, to make
the frequent requests for text changes contained to a single file. But a complex
template string like this was impossible to store that way, until...&lt;/p&gt;
&lt;h3&gt;Enter Tagged Template Literals&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.taniarascia.com/understanding-template-literals/"&gt;This post by Tania Rascia&lt;/a&gt; opened my eyes to the power of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;Tagged Template Literals&lt;/a&gt;
in JS. Seeing this example blew my mind:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;expressions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;finalString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Loop through all expressions&lt;/span&gt;
  &lt;span class="nx"&gt;expressions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;finalString&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;&amp;lt;/strong&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// Add the last string literal&lt;/span&gt;
  &lt;span class="nx"&gt;finalString&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;finalString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="sb"&gt;`This is a string with &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; and &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; and &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; interpolated inside.`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, with a quick few tweaks we can definitely apply this to React Native, right?&lt;/p&gt;
&lt;h3&gt;Highlighting Text in React Native&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const highlightText = (baseStyle, highlightStyle) =&amp;gt; (strings, ...values) =&amp;gt; (
  &amp;lt;Text style={baseStyle}&amp;gt;
    {strings.map((string, index) =&amp;gt; (
      &amp;lt;&amp;gt;
        {string}
        &amp;lt;Text style={highlightStyle}&amp;gt;
          {values[index]}
        &amp;lt;/Text&amp;gt;
      &amp;lt;/&amp;gt;
    ))}
  &amp;lt;/Text&amp;gt;
);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note I am using a higher order function so that I can pass in custom styles. We can also
pass in other stuff like entire components, if that is the requirement.&lt;/p&gt;
&lt;p&gt;Now, we could store the Tagged Template Literal and use it wherever in our JSX.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const action = &amp;quot;send a message&amp;quot;;
const user = &amp;quot;Pingpong&amp;quot;;
const description = highlightText(
  styles.text,
  styles.highlight
)`You’re going to ${action} to ${user}. Please confirm?`;

// in the render method
&amp;lt;Text&amp;gt;{description}&amp;lt;/Text&amp;gt;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aaand, we're done! 🎉&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Many of you will rightly wonder if &lt;code&gt;action&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt;, and &lt;code&gt;styles&lt;/code&gt; will need
to be defined in the same file as the Template Literal. No, we can simply make it a
function and pass these values direct from the component, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const description = (user, action, styles) =&amp;gt; highlightText(
  styles.text,
  styles.highlight
)`You’re going to ${action} to ${user}. Please confirm?`;

// in the render method
&amp;lt;Text&amp;gt;{description(&amp;#39;Pingpong&amp;#39;, &amp;#39;Send a message&amp;#39;, styles)}&amp;lt;/Text&amp;gt;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty cool, right?&lt;/p&gt;</content><category term="code"></category><category term="design"></category><category term="js and ts"></category><category term="react"></category></entry><entry><title>Building Flagitect</title><link href="https://janithl.github.io/2020/06/building-flagitect/" rel="alternate"></link><published>2020-06-28T09:55:00+05:30</published><updated>2020-06-28T09:55:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-06-28:/2020/06/building-flagitect/</id><summary type="html">&lt;p&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.flagitect"&gt;Flagitect just hit version 1.2.0&lt;/a&gt;, and so this is a brief introduction
into the technical aspects of how the app is structured.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Flagitect v1.2.0" src="https://janithl.github.io/images/flagitect-1.2.0.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Stack&lt;/h3&gt;
&lt;p&gt;The app is written in React Native (currently version 0.62). There is no navigation
library in use, as the app only needs some modals …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.flagitect"&gt;Flagitect just hit version 1.2.0&lt;/a&gt;, and so this is a brief introduction
into the technical aspects of how the app is structured.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Flagitect v1.2.0" src="https://janithl.github.io/images/flagitect-1.2.0.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Stack&lt;/h3&gt;
&lt;p&gt;The app is written in React Native (currently version 0.62). There is no navigation
library in use, as the app only needs some modals in the UI at the moment. The editor
uses &lt;a href="https://github.com/react-native-community/react-native-svg"&gt;react-native-svg&lt;/a&gt; to render the flags. &lt;a href="https://github.com/joltup/rn-fetch-blob"&gt;rn-fetch-blob&lt;/a&gt; is used to save
the various output files (as a PNG raster or SVG vector inside an HTML) to device storage.&lt;/p&gt;
&lt;h3&gt;State Management&lt;/h3&gt;
&lt;p&gt;State is managed using a &lt;a href="https://reactjs.org/docs/hooks-reference.html#usereducer"&gt;single &lt;code&gt;useReducer&lt;/code&gt; hook&lt;/a&gt; near the root of the component
tree. The store is currently divided into 3 parts with their own reducer functions:
flag, ui, and charges. I found this approach had most of the advantages of Redux (since
the component tree was shallow and I didn't need to use the Context API) when it came to
composing the state and reducers. I use two &lt;code&gt;useEffect&lt;/code&gt; hooks to store the state in
device storage&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; whenever it changes, and load it from storage at app start.&lt;/p&gt;
&lt;h3&gt;Components&lt;/h3&gt;
&lt;p&gt;There is your standard &lt;code&gt;Header&lt;/code&gt;, &lt;code&gt;Footer&lt;/code&gt;, &lt;code&gt;Menu&lt;/code&gt; etc. components, and a bunch
of &lt;code&gt;renderSomething&lt;/code&gt; components that render either charges or divisions. Most of the
action happens inside the &lt;code&gt;Editor&lt;/code&gt; component, and we're using SVG—a fantastic language
that really should get more love—for the design and layout of shapes and designs. I
used a bunch of SVG features such as &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Patterns"&gt;patterns&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform"&gt;transform&lt;/a&gt; to enable various
rendering needs.&lt;/p&gt;
&lt;h3&gt;Finally&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/Flagitect"&gt;Flagitect is completely free and open source (MIT licensed)&lt;/a&gt;, and I'd love for
people using it to submit issues and PRs, or even fork it and make things better. I
found that Google Play was lacking when it came to flag design apps, and so I created
Flagitect in the hope that amateur vexillologists like myself would find it useful. ☺️&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;For this, I'm using &lt;a href="https://github.com/react-native-community/async-storage"&gt;React Native Async Storage&lt;/a&gt; as this functionality has been spun off from the React Native core.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="design"></category><category term="js and ts"></category><category term="react"></category></entry><entry><title>Late Night: A Timeline</title><link href="https://janithl.github.io/2020/05/late-night-a-timeline/" rel="alternate"></link><published>2020-05-29T21:50:00+05:30</published><updated>2020-05-29T21:50:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-05-29:/2020/05/late-night-a-timeline/</id><summary type="html">&lt;p&gt;I created this little timeline graphic as a crutch for my non-American self trying
to navigate the complex history, culture, and inter-network rivalries of American
Late Night TV shows.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Late Night Timeline" src="https://janithl.github.io/images/late-night-timeline.png"&gt;&lt;/p&gt;
&lt;p&gt;There are some shows that should be mentioned but aren’t, because they weren’t on
the big three:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Late_Show_(1986_talk_show)"&gt;The Late …&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;I created this little timeline graphic as a crutch for my non-American self trying
to navigate the complex history, culture, and inter-network rivalries of American
Late Night TV shows.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Late Night Timeline" src="https://janithl.github.io/images/late-night-timeline.png"&gt;&lt;/p&gt;
&lt;p&gt;There are some shows that should be mentioned but aren’t, because they weren’t on
the big three:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Late_Show_(1986_talk_show)"&gt;The Late Show&lt;/a&gt;/&lt;a href="https://en.wikipedia.org/wiki/The_Joan_Rivers_Show"&gt;The Joan Rivers Show&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Arsenio_Hall_Show"&gt;The Arsenio Hall Show&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Jon_Stewart_Show"&gt;The Jon Stewart Show&lt;/a&gt; on MTV&lt;/li&gt;
&lt;li&gt;The various syndicated versions of &lt;a href="https://en.wikipedia.org/wiki/The_Dick_Cavett_Show"&gt;The Dick Cavett Show&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Daily_Show"&gt;The Daily Show&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/The_Colbert_Report"&gt;The Colbert Report&lt;/a&gt; on Comedy Central (Stewart says
   Letterman called them the “cable twins”)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Conan_(talk_show)"&gt;Conan&lt;/a&gt; on TBS (my current favourite)&lt;/li&gt;
&lt;/ol&gt;</content><category term="data"></category><category term="design"></category></entry><entry><title>To Exist</title><link href="https://janithl.github.io/2020/03/to-exist/" rel="alternate"></link><published>2020-03-03T20:45:00+05:30</published><updated>2020-03-03T20:45:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-03-03:/2020/03/to-exist/</id><summary type="html">&lt;p&gt;Am I doomed&lt;/p&gt;
&lt;p&gt;To an existence&lt;/p&gt;
&lt;p&gt;Where you&lt;/p&gt;
&lt;p&gt;You, you, &lt;em&gt;and you&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(Yes, I know you're all the same—&lt;/p&gt;
&lt;p&gt;though it took me a while to catch on)&lt;/p&gt;
&lt;p&gt;Will be near enough to see&lt;/p&gt;
&lt;p&gt;But never to hold?&lt;/p&gt;
&lt;p&gt;Always tantalisingly close&lt;/p&gt;
&lt;p&gt;But no cigar?&lt;/p&gt;
&lt;p&gt;To check up on&lt;/p&gt;
&lt;p&gt;After a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Am I doomed&lt;/p&gt;
&lt;p&gt;To an existence&lt;/p&gt;
&lt;p&gt;Where you&lt;/p&gt;
&lt;p&gt;You, you, &lt;em&gt;and you&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(Yes, I know you're all the same—&lt;/p&gt;
&lt;p&gt;though it took me a while to catch on)&lt;/p&gt;
&lt;p&gt;Will be near enough to see&lt;/p&gt;
&lt;p&gt;But never to hold?&lt;/p&gt;
&lt;p&gt;Always tantalisingly close&lt;/p&gt;
&lt;p&gt;But no cigar?&lt;/p&gt;
&lt;p&gt;To check up on&lt;/p&gt;
&lt;p&gt;After a hard day&lt;/p&gt;
&lt;p&gt;To celebrate your wins&lt;/p&gt;
&lt;p&gt;(Not that you'll never know)&lt;/p&gt;
&lt;p&gt;Applaud, be proud of,&lt;/p&gt;
&lt;p&gt;Have imaginary conversations with&lt;/p&gt;
&lt;p&gt;Late into the night&lt;/p&gt;
&lt;p&gt;Am I doomed&lt;/p&gt;
&lt;p&gt;To &lt;em&gt;exist&lt;/em&gt;?&lt;/p&gt;</content><category term="biology"></category><category term="people"></category></entry><entry><title>The Rooftop</title><link href="https://janithl.github.io/2020/02/the-rooftop/" rel="alternate"></link><published>2020-02-21T01:55:00+05:30</published><updated>2020-02-21T01:55:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-02-21:/2020/02/the-rooftop/</id><summary type="html">&lt;p&gt;It was pretty good weather for an otherwise sweltering January, as they lay
perched on the rooftop balcony overlooking the suburbs.&lt;/p&gt;
&lt;p&gt;"You smoke?", she asked pointing the pack at him. Toying momentarily with the
idea of changing his entire personality to fit in (as he often does), he
finally resigned …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It was pretty good weather for an otherwise sweltering January, as they lay
perched on the rooftop balcony overlooking the suburbs.&lt;/p&gt;
&lt;p&gt;"You smoke?", she asked pointing the pack at him. Toying momentarily with the
idea of changing his entire personality to fit in (as he often does), he
finally resigned to a quiet "no, thanks". He hoped it didn't come out as some
sort of value judgement, but she had moved on to flicking the Bic lighter and
trying to keep the flame alive, paying no attention to the drama in his head.
She took two drags as the embers matched the colour of the setting sun.&lt;/p&gt;
&lt;p&gt;"Don't you feel like we've fallen short?", she asked as the street below
slowly filled up with the occupants of their office building leaving for
their homes.&lt;/p&gt;
&lt;p&gt;"I guess we have. I guess this isn't what our parents had in mind."&lt;/p&gt;
&lt;p&gt;She took a look at her toes as she took another drag, and silence descended
on them. He didn't really mind silences, but he also didn't have a rapport
with her yet.&lt;/p&gt;
&lt;p&gt;"No plans to hop on a boat?"&lt;/p&gt;
&lt;p&gt;"Not at least until I'm done with college, no. And even then, I quite like it
here."&lt;/p&gt;
&lt;p&gt;"Ah yes, the comfortable prison of the familiar and the known", he thought—and
wisely kept to himself.&lt;/p&gt;
&lt;p&gt;"And you? Big shot computer man? Can't you earn way more over there?"&lt;/p&gt;
&lt;p&gt;He could, he said. Maybe next year. It's the lie he told all his relatives,
being as much a prisoner as she was.&lt;/p&gt;
&lt;p&gt;For a chance meeting that happened because of a dare, this evening was going
pretty well, he thought.&lt;/p&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;p&gt;"Machang you always give talk but you &lt;em&gt;never. follow. through.&lt;/em&gt; Always close.
Always no cigar."&lt;/p&gt;
&lt;p&gt;"Don't harass him, he's clearly still not over you know who."&lt;/p&gt;
&lt;p&gt;"What nonsense men, I'm perfectly over her"&lt;/p&gt;
&lt;p&gt;"Prove it"&lt;/p&gt;
&lt;p&gt;"Come on, I'm not 15 any more no?"&lt;/p&gt;
&lt;p&gt;"If you ask her out I will quit ciggies for a month."&lt;/p&gt;
&lt;p&gt;"What?"&lt;/p&gt;
&lt;p&gt;"Pinky promise. See? I'm not hung up about how adult I am."&lt;/p&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;p&gt;It was honestly the weirdest couple of minutes of his life. A diehard introvert
who was just short of wearing "INFP" in bold lettering on his t-shirt every day
(and that too for fear of attracting too much attention—much preferring
monochromatic clothes), he barged into her office and asked if it was the meeting
room, knowing fully well from his 2 years working in this building that it wasn't.
She said that it wasn't, and in her usual cheery and helpful manner assisted him
to find his 'intended' destination on the other side of the floor. He thanked her
and they exchanged names. Three days later, and a couple of 'totally unexpected'
moments bumping into each other on elevators and stairwells, they were on this
rooftop sharing tobacco smoke.&lt;/p&gt;
&lt;p&gt;"They should have Google Calendars for the meeting rooms."&lt;/p&gt;
&lt;p&gt;"Oh yeah, that would sort a lot of the messes out", he replied, and he knew what
the next line was going to be.&lt;/p&gt;
&lt;p&gt;"You guys would block out most of it anyway".&lt;/p&gt;
&lt;p&gt;He looked apologetic, and then they both laughed.&lt;/p&gt;
&lt;p&gt;"They should also maybe add floor maps so people don't get lost...". Her lips were
curling into a mischievous smile, and her deep brown eyes glistened.&lt;/p&gt;
&lt;p&gt;"Ye... yeah they should."&lt;/p&gt;
&lt;p&gt;"I mean, three days ago I saw a man I've seen use the second floor meeting room at
least half a dozen times suddenly lose his bearings and walk into an office on the
other side of the building." She was pointedly avoiding your gaze.&lt;/p&gt;
&lt;p&gt;"I..."&lt;/p&gt;
&lt;p&gt;She took another drag, and smoke escaped her smiling teeth as she looked over the
coconut tree tops turning orange red with the sun.&lt;/p&gt;
&lt;p&gt;"You really sure you don't want a smoke?"&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I just finished reading &lt;a href="https://penguin.co.in/book/uncategorized/chats-with-the-dead/"&gt;'Chats with the Dead'&lt;/a&gt; and it was incredible and I
need a Jaki in my life. 😭&lt;/p&gt;</content><category term="conversations"></category></entry><entry><title>Links: January Tunes</title><link href="https://janithl.github.io/2020/02/links-january-tunes/" rel="alternate"></link><published>2020-02-07T21:50:00+05:30</published><updated>2020-02-07T21:50:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-02-07:/2020/02/links-january-tunes/</id><summary type="html">&lt;p&gt;2020 has been an interesting year musically, so here are some of my
favourite music this year.&lt;/p&gt;
&lt;h3&gt;Theo Katzman&lt;/h3&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/4xsfOuLM2J8"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Vulf wunderkind Theo's album, "Modern Johnny Sings: Songs in the Age
of Vibe", has been the talk of the town.&lt;/p&gt;
&lt;h3&gt;Cory Wong&lt;/h3&gt;
&lt;p&gt;Speaking of Vulf alum, Cory's album "Elevator Music for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;2020 has been an interesting year musically, so here are some of my
favourite music this year.&lt;/p&gt;
&lt;h3&gt;Theo Katzman&lt;/h3&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/4xsfOuLM2J8"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Vulf wunderkind Theo's album, "Modern Johnny Sings: Songs in the Age
of Vibe", has been the talk of the town.&lt;/p&gt;
&lt;h3&gt;Cory Wong&lt;/h3&gt;
&lt;p&gt;Speaking of Vulf alum, Cory's album "Elevator Music for an Elevated Mood"
is also the talk of the town, with bangers such as &lt;a href="https://www.youtube.com/watch?v=jJXy21fphYo"&gt;"Team Sports"&lt;/a&gt;.
There's also this crazy collab with Dave Koz&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/_mCJBzcyHEk"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Cory comments on the video:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Dave, can u sit in a directors chair for this one?"&lt;/p&gt;
&lt;p&gt;"What?"&lt;/p&gt;
&lt;p&gt;"Yea they've got a directors chair...can u sit in it"&lt;/p&gt;
&lt;p&gt;"Wait, what song?"&lt;/p&gt;
&lt;p&gt;"Read this chart, you'll know exactly what to do...i'll take the solo"&lt;/p&gt;
&lt;p&gt;"Why aren't you wearing shoes"&lt;/p&gt;
&lt;p&gt;"Alright we got the 2200 grit sandpaper out, Koz is in the building..."&lt;/p&gt;
&lt;p&gt;TAKE 1 RELEASED ON ALBUM&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It blows my mind how good these session regulars/legends are.&lt;/p&gt;
&lt;h3&gt;Ryan Lerman/Scary Pockets/Stories/Pomplamoose&lt;/h3&gt;
&lt;p&gt;Ryan has been putting out a ton of music both from the Scary Pockets
channel as well as the new Stories series. There's this amazing Bieber
cover featuring Antwaun Stanley:&lt;/p&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/dATGquiB05g"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;A cool as fuck 'Kill Bill' inspired collaboration with Larry Goldings
(featuring Sam Wilkes on the Fender Whistle):&lt;/p&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/4yg_XjYju_s"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Plenty of cool featured artists on Stories including
&lt;a href="https://www.youtube.com/watch?v=Idrdp_3LctM"&gt;Arlissa covering John Mayer&lt;/a&gt;, and &lt;a href="https://www.youtube.com/watch?v=D5Hbcf_2Rac"&gt;Nataly Dawn covering MGMT&lt;/a&gt;. Nataly
has also been recording an album of French language covers, including the
following iconic tune:&lt;/p&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/7B4CLQGxHmI"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;Reina Del Cid/Josh Turner&lt;/h3&gt;
&lt;p&gt;Reina did an amazing collab with British singer-songwriter Mary Spender:&lt;/p&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/sj2gSmZqjSU"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Josh collaborated with his SO Kelly Oden, for the cutest video of the new year:&lt;/p&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/UC0wv3p05Wc"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Just aww! :')&lt;/p&gt;
&lt;h3&gt;And, finally&lt;/h3&gt;
&lt;p&gt;This doesn't count as a 'tune', but it would be criminal to leave this off
the list—Paul Davids and Samurai "Sammy G" Guitarist collab to blow our minds:&lt;/p&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/Uvjf0uUGsVg"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;A lot of Sri Lankans would know him from "Dave Koz Radio Show" fame.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="music"></category></entry><entry><title>My 2020 guide to rewriting a piece-of-shit codebase</title><link href="https://janithl.github.io/2020/01/refactor-blues/" rel="alternate"></link><published>2020-01-31T15:32:00+05:30</published><updated>2020-01-31T15:32:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-01-31:/2020/01/refactor-blues/</id><summary type="html">&lt;p&gt;&lt;img alt="Soptair Enjiniya" src="https://janithl.github.io/images/engineering-meme.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Meme by
&lt;a href="https://www.facebook.com/JusticeForTharindu/photos/a.594439464358595/806533719815834/?type=3&amp;theater"&gt;Justice For Tharindu&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First, you need to make up your mind.&lt;/strong&gt; If you take this project on you &lt;em&gt;must&lt;/em&gt;
proactively try to make things better. How to do this will depend on a number of
factors and the support of the stakeholders, but you must &lt;em&gt;actively try&lt;/em&gt; to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Soptair Enjiniya" src="https://janithl.github.io/images/engineering-meme.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Meme by
&lt;a href="https://www.facebook.com/JusticeForTharindu/photos/a.594439464358595/806533719815834/?type=3&amp;theater"&gt;Justice For Tharindu&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First, you need to make up your mind.&lt;/strong&gt; If you take this project on you &lt;em&gt;must&lt;/em&gt;
proactively try to make things better. How to do this will depend on a number of
factors and the support of the stakeholders, but you must &lt;em&gt;actively try&lt;/em&gt; to make
the codebase a &lt;em&gt;better place&lt;/em&gt;, or you'd come to the end of your 2 or whatever
years looking after this garbage dump and not have anything good to show for it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Understand the system.&lt;/strong&gt; Learning the codebase might take time, but try to
figure out what the overarching concepts, the business logic, and what users
actually want to achieve. What users &lt;em&gt;want&lt;/em&gt; to do with the system and what the
system &lt;em&gt;currently does&lt;/em&gt; might be misaligned, so porting the thing with warts
and all into a shiny new shell might not make sense. Use that misalignment, make
it a chance to drive a wedge between the client and his software, and...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Try to get the stakeholders onboard.&lt;/strong&gt; Try to make a point about how the
shittiness of the current system is costing them customers and money. Businesses
usually care about reputation and the bottom line, so you have to make your case
in lingo they understand. Show them the numbers, show them how it could all be
better.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Break down the system into parts.&lt;/strong&gt; Moving everything wholesale into the new
system is not going to be practical in most cases. See where you can start
porting right now, and get to work. Things that could be services&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; on their
own, like reporting, exports, and external integrations, are good places to
start.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write tests.&lt;/strong&gt; If I could go back in time and teach my older self anything,
it's the value of writing tests first before getting down to implementations.
This one thing will make your code more reliable and add value. In the case of
a rewrite, this is even more straightforward: the user journeys are already
concrete and you can easily write test cases for them to guide the new
implementation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Get your team excited.&lt;/strong&gt; This has gone on long enough and I know you guys are
fatigued, but we can work together and make life less shit for ourselves and
our users. Try to understand their concerns and misgivings, but also don't
compromise in your quest to &lt;em&gt;make the world a better place&lt;/em&gt;. They'll thank you
later.&lt;/p&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;p&gt;I always learn these lessons too late, when the chance for me to &lt;em&gt;act&lt;/em&gt; on
them has already passed. But hey, maybe it'll come in handy someday.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I don't really mean &lt;em&gt;microservices&lt;/em&gt; here, though you could go for it if that makes sense for you.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="work"></category></entry><entry><title>Some 2019 Stats</title><link href="https://janithl.github.io/2020/01/some-2019-stats/" rel="alternate"></link><published>2020-01-01T22:15:00+05:30</published><updated>2020-01-01T22:15:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-01-01:/2020/01/some-2019-stats/</id><summary type="html">&lt;h3&gt;The Blog&lt;/h3&gt;
&lt;p&gt;I've written 18 blog posts in 2019, which is below the target I set at the start
of the year (two blog posts a month, for a total of 24), but it's progress.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Posts per month" src="https://janithl.github.io/images/posts-per-month.png"&gt;&lt;/p&gt;
&lt;p&gt;In comparison, &lt;a href="https://janithl.github.io/2018/06/some-things-i-wish-i-knew-as-a-young-startup-dev/"&gt;I wrote only 1 post in 2018&lt;/a&gt;. 🙈&lt;/p&gt;
&lt;p&gt;&lt;img alt="Posts per year, 2009 - 2019" src="https://janithl.github.io/images/blogposts-2009-2019.png"&gt;&lt;/p&gt;
&lt;h3&gt;Transport&lt;/h3&gt;
&lt;p&gt;I've taken 265 bus rides …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;The Blog&lt;/h3&gt;
&lt;p&gt;I've written 18 blog posts in 2019, which is below the target I set at the start
of the year (two blog posts a month, for a total of 24), but it's progress.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Posts per month" src="https://janithl.github.io/images/posts-per-month.png"&gt;&lt;/p&gt;
&lt;p&gt;In comparison, &lt;a href="https://janithl.github.io/2018/06/some-things-i-wish-i-knew-as-a-young-startup-dev/"&gt;I wrote only 1 post in 2018&lt;/a&gt;. 🙈&lt;/p&gt;
&lt;p&gt;&lt;img alt="Posts per year, 2009 - 2019" src="https://janithl.github.io/images/blogposts-2009-2019.png"&gt;&lt;/p&gt;
&lt;h3&gt;Transport&lt;/h3&gt;
&lt;p&gt;I've taken 265 bus rides in 2019, down from 556 in 2018. There is a dramatic
reduction in bus rides after the Easter Attacks in April.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bus journeys by month" src="https://janithl.github.io/images/bus-journeys-by-month.png"&gt;&lt;/p&gt;
&lt;p&gt;After April, I switched to tuks as my primary mode of commuting to work in the
morning, only taking the bus in the evening during my commute home.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bus journeys by time of day" src="https://janithl.github.io/images/bus-journeys-by-time-of-day.png"&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Month&lt;/th&gt;
&lt;th align="right"&gt;Morning&lt;/th&gt;
&lt;th align="right"&gt;Afternoon&lt;/th&gt;
&lt;th align="right"&gt;Evening&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;January&lt;/td&gt;
&lt;td align="right"&gt;27&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;February&lt;/td&gt;
&lt;td align="right"&gt;36&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;March&lt;/td&gt;
&lt;td align="right"&gt;28&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;April&lt;/td&gt;
&lt;td align="right"&gt;6&lt;/td&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="right"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;May&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;June&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;July&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;August&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;September&lt;/td&gt;
&lt;td align="right"&gt;9&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;October&lt;/td&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;November&lt;/td&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;December&lt;/td&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="right"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;strong&gt;113&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;strong&gt;144&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Tuks have picked up the slack, with 245 PickMe rides&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, 29 rides on YOGO and
normal metered tuks, and 5 rides on shared Ubers&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; throughout the year.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Taxi journeys by time of day" src="https://janithl.github.io/images/taxi-journeys-by-time-of-day.png"&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Month&lt;/th&gt;
&lt;th align="right"&gt;Morning&lt;/th&gt;
&lt;th align="right"&gt;Afternoon&lt;/th&gt;
&lt;th align="right"&gt;Evening&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;January&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;td align="right"&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;February&lt;/td&gt;
&lt;td align="right"&gt;4&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;March&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;td align="right"&gt;4&lt;/td&gt;
&lt;td align="right"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;April&lt;/td&gt;
&lt;td align="right"&gt;8&lt;/td&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;May&lt;/td&gt;
&lt;td align="right"&gt;8&lt;/td&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;td align="right"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;June&lt;/td&gt;
&lt;td align="right"&gt;18&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;July&lt;/td&gt;
&lt;td align="right"&gt;23&lt;/td&gt;
&lt;td align="right"&gt;5&lt;/td&gt;
&lt;td align="right"&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;August&lt;/td&gt;
&lt;td align="right"&gt;21&lt;/td&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="right"&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;September&lt;/td&gt;
&lt;td align="right"&gt;12&lt;/td&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="right"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;October&lt;/td&gt;
&lt;td align="right"&gt;20&lt;/td&gt;
&lt;td align="right"&gt;5&lt;/td&gt;
&lt;td align="right"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;November&lt;/td&gt;
&lt;td align="right"&gt;17&lt;/td&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;td align="right"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;December&lt;/td&gt;
&lt;td align="right"&gt;18&lt;/td&gt;
&lt;td align="right"&gt;5&lt;/td&gt;
&lt;td align="right"&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;strong&gt;163&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;strong&gt;33&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;strong&gt;83&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;While initially driven by post-Easter attack paranoia, environmental factors have
also been a concern especially with the increase in average temperatures. Although
still a firm believer in public transport, I no longer wanted to turn up at work a
sweaty mess. Let's hope A/C buses start rolling out on the 138 route soon&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;. 🙏🏽&lt;/p&gt;
&lt;p&gt;These are the ride counts and average fares for 2019 in comparison to 2018:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th align="right"&gt;Count (2018)&lt;/th&gt;
&lt;th align="right"&gt;Avg (2018)&lt;/th&gt;
&lt;th align="right"&gt;Count (2019)&lt;/th&gt;
&lt;th align="right"&gt;Avg (2019)&lt;/th&gt;
&lt;th align="right"&gt;Count Diff&lt;/th&gt;
&lt;th align="right"&gt;Avg Diff&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Bus&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;556&lt;/td&gt;
&lt;td align="right"&gt;19.84&lt;/td&gt;
&lt;td align="right"&gt;265&lt;/td&gt;
&lt;td align="right"&gt;21.91&lt;/td&gt;
&lt;td align="right"&gt;-291&lt;/td&gt;
&lt;td align="right"&gt;+2.07&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;PickMe&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;153&lt;/td&gt;
&lt;td align="right"&gt;424.08&lt;/td&gt;
&lt;td align="right"&gt;245&lt;/td&gt;
&lt;td align="right"&gt;394.35&lt;/td&gt;
&lt;td align="right"&gt;+92&lt;/td&gt;
&lt;td align="right"&gt;-29.73&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Tuk&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;12&lt;/td&gt;
&lt;td align="right"&gt;142.08&lt;/td&gt;
&lt;td align="right"&gt;29&lt;/td&gt;
&lt;td align="right"&gt;356.21&lt;/td&gt;
&lt;td align="right"&gt;+17&lt;/td&gt;
&lt;td align="right"&gt;+214.12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Uber&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;3&lt;/td&gt;
&lt;td align="right"&gt;233.33&lt;/td&gt;
&lt;td align="right"&gt;5&lt;/td&gt;
&lt;td align="right"&gt;500.00&lt;/td&gt;
&lt;td align="right"&gt;+2&lt;/td&gt;
&lt;td align="right"&gt;+266.67&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;strong&gt;724&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;strong&gt;544&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;strong&gt;-180&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Huh, never realised I'd taken 180 less journeys in total this year. Must be all the
sleeping in on weekends. 🙈&lt;/p&gt;
&lt;h3&gt;Other Expenses&lt;/h3&gt;
&lt;p&gt;I've bought food 247 times in 2019, up from 200 times in 2018. The average order
value has gone up slightly, from 572 LKR to 600 LKR. I've bought clothing 4 times,
up from just 2 times in 2018.&lt;/p&gt;
&lt;p&gt;I've made 16 purchases on AliExpress this year, up from 5 purchases last year. The
average order value has stayed roughly the same.&lt;/p&gt;
&lt;h3&gt;Social Media&lt;/h3&gt;
&lt;p&gt;I've been on a bit of a hiatus from Twitter and Instagram, with only 6
images posted on my IG this year (and none since June). But I did start
&lt;a href="https://www.instagram.com/chithrapotha/"&gt;an Instagram purely for my illustrations&lt;/a&gt; and I've managed to post about 29
posts in the space of a month.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chithrapotha" src="https://janithl.github.io/images/chithrapotha.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Drawing more and putting it out there is a goal that I want to work towards
in 2020. I've also uploaded 18 song snippets to my SoundCloud, and plan to upload
longer and more developed pieces in 2020 (fingers crossed!)&lt;/p&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;p&gt;And so, those are some of my stats for the year. How has 2019 been for you
and how do you plan to spend your 2020?&lt;/p&gt;
&lt;script&gt;
window.onload = function() {
   $('table').addClass('table table-bordered table-condensed'); 
}
&lt;/script&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Up from 153 in 2018.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;I still don't have an Uber account, and don't plan on getting one.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;And eventually we can all take the Kelani Valley railway, which is &lt;a href="https://twitter.com/nuuuwan/status/1203260223378604033"&gt;currently incredibly under-utilised&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="data"></category></entry><entry><title>On Liberalism in the 2010s</title><link href="https://janithl.github.io/2019/12/on-liberalism-in-the-2010s/" rel="alternate"></link><published>2019-12-31T08:35:00+05:30</published><updated>2019-12-31T08:35:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-12-31:/2019/12/on-liberalism-in-the-2010s/</id><summary type="html">&lt;p&gt;&lt;a href="https://www.reddit.com/r/PropagandaPosters/comments/e9lwve/labour_clears_the_way_uk_labour_party_poster_1910/"&gt;&lt;img alt="Labour Poster" src="https://janithl.github.io/images/labour-poster.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Yes, but can Liberals batter down doors anymore?&lt;/p&gt;

&lt;p&gt;Last night, dealing with a bought of insomnia, &lt;a href="https://www.theguardian.com/commentisfree/2019/dec/29/lesson-in-boris-johnson-jolliness-liberal-miserabilsm-is-a-turn-off"&gt;I read this important take on BoJo&lt;/a&gt;
(not to be confused with BoJack) and the conservative wave sweeping across not just the
UK but most of the world. While there might be a few …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.reddit.com/r/PropagandaPosters/comments/e9lwve/labour_clears_the_way_uk_labour_party_poster_1910/"&gt;&lt;img alt="Labour Poster" src="https://janithl.github.io/images/labour-poster.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Yes, but can Liberals batter down doors anymore?&lt;/p&gt;

&lt;p&gt;Last night, dealing with a bought of insomnia, &lt;a href="https://www.theguardian.com/commentisfree/2019/dec/29/lesson-in-boris-johnson-jolliness-liberal-miserabilsm-is-a-turn-off"&gt;I read this important take on BoJo&lt;/a&gt;
(not to be confused with BoJack) and the conservative wave sweeping across not just the
UK but most of the world. While there might be a few points of contention, I think
overall it was a good state of the union on liberalism and what I like to think is a
bit of a disease among educated liberals: the refusal and lack of confidence in pushing
our agenda.&lt;/p&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;p&gt;Born at the tail end of the Berlin Wall and the Soviet Union, my generation was very
liberal and expected the generations that followed us to be even more so. The online
communities where we came of age were incredibly inclusive, liberal, and &lt;em&gt;"woke"&lt;/em&gt;. And
yet, woke culture itself overextended and exposed the flanks, leading to the almost
&lt;em&gt;unthinkable&lt;/em&gt; scenario of an incredibly right-leaning younger generation, and the liberal
and free thinking communities of our youth turned to the right as a reaction to the
seeming &lt;em&gt;authoritarianism of the new left&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;yoofs&lt;/em&gt; were also very much multiculturally aware, having grown up with access to
different &lt;em&gt;lived experiences&lt;/em&gt; via the internet, and very much sensitive to what it saw as
liberal intolerances of differing opinions, as well as seeming mollycoddling of the more
bigoted minorities within minorities. To the kids growing up on Gangam Style, it was no
longer western values at stake but an overarching global value structure&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; which was
threatened not by the traditional scapegoat of crusty and rich old conservatives&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;, but
by increasingly intolerant, tone deaf, preachy ivory tower PC liberals.  &lt;/p&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;p&gt;Long story short: Even though there is a lot of hope left in the world and its youth (in
the form of e.g. Greta Thunberg, CAA protestors in Indian universities, and the younger
remain voters at the Brexit polls), it is still disheartening to see some in such an educated
and informed generation turn towards reactionism over progressivism.&lt;/p&gt;
&lt;p&gt;For the libs, it is time to regroup and look inward. We must reflect on the past decade, the
victories (MARRIAGE EQUALITY!) and the bitter defeats, and consider what we value the most,
what our core inviolable principles are. Lines might have to be drawn where our usual support
for personal preferences and freedoms infringe on the rights of the other and the collective&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;.
It is time to raise those voices in battle cries, as the rich keep becoming richer, and use
their money and influence to sow division among the working man to further their own ends. We
don't have much time—the greed of our race has set the planet on fire. The rich will burrow
underneath and survive, but what of us poor proles? &lt;/p&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;p&gt;It is time to step away from books and back into society. It's time to make welfare great again,
fight for unionisation and the rights of the worker and the downtrodden. Come to the understanding
that humanity isn't perfect, but that we must struggle to make this planet and our society better,
more equitable and more inclusive.&lt;/p&gt;
&lt;p&gt;It's time to bring back civil discourse, please, and thank you. No one likes being talked down to,
or being called racist because they were simply well-meaning but ignorant. Bring back the humanity,
bring back the fight, bring back Travellers on the Discovery Channel. Shout from the rooftops
&lt;em&gt;how awesome science is&lt;/em&gt;, and how excited we are about exploring outer space, reforesting our
planet, or curing disease. Stand against bigotry, while also acknowledging that bigotry is bigotry
regardless of the source. &lt;a href="https://www.youtube.com/watch?v=V3U6rRK9ul0"&gt;As the great Imtiaz Bakeer Markar once said&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Think not in terms of &lt;em&gt;who&lt;/em&gt; is right and who is wrong, but &lt;em&gt;what&lt;/em&gt; is right and what is wrong.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I would argue this dates back to enlightenment thinking and classical liberalism.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Still very much the actual villain—see Prince Andrew.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;I personally do not believe it is a zero sum game. Living in a republic is based on a
social contract, and some individualistic excesses might have to be forgone in the service of cohesion.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="politics"></category></entry><entry><title>Go යොදාගෙන සරළ version checker එක​ක්</title><link href="https://janithl.github.io/2019/12/a-simple-version-checker-in-go-si/" rel="alternate"></link><published>2019-12-16T21:08:00+05:30</published><updated>2019-12-16T21:08:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-12-16:/2019/12/a-simple-version-checker-in-go-si/</id><summary type="html">&lt;p&gt;&lt;img alt="Version Check එ​ක" src="https://janithl.github.io/images/version-output.png"&gt;&lt;/p&gt;
&lt;p&gt;දැනට මම ඉන්න වැඩපොලේ සයිට් 15ක විතර version ට්‍රැක් කරගෙන යාවත්කාලීන
කරන්න අවශ්‍යතාවයක් තියනව. අපි ඕක automate කරගන්න සරළ Go මෘදුකාංගයක්
ලියාගත්ත. ඒකෙ කතාව තමය …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Version Check එ​ක" src="https://janithl.github.io/images/version-output.png"&gt;&lt;/p&gt;
&lt;p&gt;දැනට මම ඉන්න වැඩපොලේ සයිට් 15ක විතර version ට්‍රැක් කරගෙන යාවත්කාලීන
කරන්න අවශ්‍යතාවයක් තියනව. අපි ඕක automate කරගන්න සරළ Go මෘදුකාංගයක්
ලියාගත්ත. ඒකෙ කතාව තමයි මේ...&lt;/p&gt;
&lt;p&gt;ලයිව් සයිට් එකේ පාවිච්චි කරන කෝඩ් එකට වඩා පොඩ්ඩක් මේක සරළ කරලයි
තියෙන්නෙ, ඒත් මූලික ක්‍රියාවලිය එකමයි. සයිට් වල තියෙන generator මෙටා ටැග්
කියවන එක තමයි මේකෙ​න් වෙන්නෙ&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. Go වල තියෙන Goroutines කියන සමාන්තරව
වැඩ ගොඩක් කරගන්න පුළුවන් විශේෂාංගය තමයි මේකට අපි පාවිච්චි කරේ.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;encoding/json&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;io/ioutil&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;regexp&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Site type holds information about sites&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Site&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TimeTaken&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sites&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;Site&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Site A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://a.web.site&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;N/A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Site B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://b.web.site&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;N/A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Site C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://c.web.site&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;N/A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Parser type holds information about the parsing&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Parser&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;setURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;
    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Site&lt;/code&gt; කියන්නෙ සයිට් එක එක ගැන දත්ත ටික තියාගන්න struct එකක්. මේකෙම පස්සෙ
පුරෝගන්න version එකයි දත්ත ටික් රික්වෙස්ට් කරල ලබාගන්න ගිය වෙලාවයි දාන්නත් ඉඩ
තියාගෙන තියෙනව.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;සයිට් ගොඩක් තිය​න slice එකක් අපි හදල ඒකෙ ත​තු ලබාගන්න ඕනෙ සයිට් ටිකේ URL ටික
දාගන්නව.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Parser&lt;/code&gt; එක තියෙන්නෙ දත්ත ලබාගන්නයි ලබාගත්ත දත්ත ඇතුළෙන් අපිට ඕනෙ version
නොම්බරේ ලබාගන්න එකයි කරන්න. හැම සයිට් එකකටම අලුත් parser එකක් අපි පාවිච්චි
කරනව. Parser එකේ තව මෙත​ඩ් දෙකකුත් තියෙනව: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;getMatches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regexString&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regexString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FindStringSubmatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;N/A&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;getVersion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Fetch Error&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;ioutil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Parse Error&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMatches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(&amp;lt;meta name=\&amp;quot;generator\&amp;quot; content=\&amp;quot;)([^\&amp;quot;]+)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;getVersion()&lt;/code&gt; එකෙන් වෙබ් පිටුවෙ අන්තර්ගතය ලබාගන්න එක තම​යි වෙන්නෙ. &lt;code&gt;getMatches()&lt;/code&gt;
එකෙන් තමයි regular expression (regex) එකක් පාවිච්චි කරල generator tag එක අල්ලගෙන
ඒකෙන් අපිට ඕනෙ version නොම්බරේ ලබාගන්නෙ.&lt;/p&gt;
&lt;p&gt;අනිතිමටම තියෙන​ව main function එක​යි &lt;code&gt;getSiteVersion()&lt;/code&gt; goroutine එක​යි:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;getSiteVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="kd"&gt;chan&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// to check the time taken&lt;/span&gt;

    &lt;span class="nx"&gt;site&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVersion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;TimeTaken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Since&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;String&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;sites&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="nx"&gt;getSiteVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;enc&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;getSiteVersion()&lt;/code&gt; එක ලූප් එකක් ඇතුළෙ කෝල් වෙනව. ඒකෙන් අලුත් Parser එකක් හැදිල,
පේජ් එකේ අන්තර්ගතය අරන්, version නොම්බරේ හොයාගෙන, ඔක්කොටම ගතවෙච්ච කාලෙත්
සටහන් කරගන්නව. මේකෙ &lt;a href="https://gobyexample.com/mutexes"&gt;mutex&lt;/a&gt; එකක් අපි පාවිච්චි කරන්නෙ නෑ මොකෝ &lt;code&gt;sites&lt;/code&gt; slice
එක පාවිච්චි කරද්දි හැම slice element එකම කියවන්නෙයි ලියන්නෙයි ඒකට අදාල Goroutine
එකෙන් විතරක් නිසා. එහෙම නොවුනනම් අනිවා mutex එකක් පාවිච්චි කරන්න වෙනව.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main()&lt;/code&gt; එකේ &lt;code&gt;done&lt;/code&gt; කියල channel එකක් අපි පාවිච්චි කරනව. ඒ program එක ඉවර කරන්න
කලිං ඔක්කොම Goroutines ටික වැඩ ඉවරයි නේද කියල චෙක් කරන්න. මේ වෙනුවට
&lt;a href="https://gobyexample.com/waitgroups"&gt;WaitGroup&lt;/a&gt; එකක් පාවිච්චි කරන්නත් පුලුවන්. අන්තිමට අපි &lt;code&gt;sites&lt;/code&gt; slice එක JSON එකක්
විදිහට එළියට දානව.&lt;/p&gt;
&lt;p&gt;රස්සාව &lt;s&gt;වෙලා​වෙ&lt;/s&gt; වෙනුවෙන් ලියපු එකම Go කෝඩ් කෑල්ල මේක තමයි. තව ලියන්න
තිබ්බ නං කියල හිතෙනව, එච්චරට language එක ලස්සනයි. මේ වගේ systems වැඩ කරන්න
එහෙම කියාපු language එක.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/janithl/a7c7369785c0b7b26c17f7a2673f8bea"&gt;&lt;strong&gt;මුලු කෝඩ් එකම Github එකේ තියෙනව.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;ඕපන් සෝස් සොෆ්ට්වෙයාර් වල එහෙමනම් මෙහෙම එලිපිට වර්ශන් එක දාන එක
අවුලක් වෙන්න පුළුවන්, මොකෝ known bugs පාවිච්චි කරල හැකර් අයියල සයිට් එකට
බහින්න ඉඩ තියෙන නිසා.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;සයිට් එකේ response times එහෙම අවුල්ද කියල බලාගන්න මේක උදව් වෙනව.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="golang"></category><category term="sinhala"></category></entry><entry><title>A Simple Version Checker In Go</title><link href="https://janithl.github.io/2019/12/a-simple-version-checker-in-go/" rel="alternate"></link><published>2019-12-14T09:15:00+05:30</published><updated>2019-12-14T09:15:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-12-14:/2019/12/a-simple-version-checker-in-go/</id><summary type="html">&lt;p&gt;&lt;img alt="Version Check Output" src="https://janithl.github.io/images/version-output.png"&gt;&lt;/p&gt;
&lt;p&gt;My current work requires keeping track of more than a dozen live websites and
making sure that their versions are kept up to date. We have employed a small Go
program to make this possible, which enable us to scrape the generator meta tags
on the websites and thereby get …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Version Check Output" src="https://janithl.github.io/images/version-output.png"&gt;&lt;/p&gt;
&lt;p&gt;My current work requires keeping track of more than a dozen live websites and
making sure that their versions are kept up to date. We have employed a small Go
program to make this possible, which enable us to scrape the generator meta tags
on the websites and thereby get the version number&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The code is simple and uses Goroutines to let us concurrently connect to the sites.
The code we use in prod is a bit more specialised, but I've reproduced a version
that captures the essentials below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;encoding/json&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;io/ioutil&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;regexp&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Site type holds information about sites&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Site&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TimeTaken&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sites&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;Site&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Site A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://a.web.site&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;N/A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Site B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://b.web.site&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;N/A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Site C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://c.web.site&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;N/A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Parser type holds information about the parsing&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Parser&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;setURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;
    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Site&lt;/code&gt; is simply a struct that holds info about the particular site, and fields
to capture the version and the time taken to do the scrape&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;We've initialised a slice of sites with the URLs we need to scrape.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Parser&lt;/code&gt; simply encapsulates parsing behaviour, and has two more methods,
reproduced below. For each scrape, we initialise a new parser.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;getMatches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regexString&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regexString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FindStringSubmatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;N/A&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;getVersion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Fetch Error&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;ioutil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Parse Error&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMatches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(&amp;lt;meta name=\&amp;quot;generator\&amp;quot; content=\&amp;quot;)([^\&amp;quot;]+)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;getVersion()&lt;/code&gt; simply gets and reads the page body, and &lt;code&gt;getMatches()&lt;/code&gt; is a method
to try and match the generator tag regex and return the value of the tag.&lt;/p&gt;
&lt;p&gt;Now, we get to the main function and the &lt;code&gt;getSiteVersion()&lt;/code&gt; goroutine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;getSiteVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="kd"&gt;chan&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// to check the time taken&lt;/span&gt;

    &lt;span class="nx"&gt;site&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVersion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;TimeTaken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Since&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;String&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;sites&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="nx"&gt;getSiteVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;enc&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;getSiteVersion()&lt;/code&gt; gets called in a loop, initialises the Parser, does the scrape,
and does simple time keeping of how long a scrape takes. We don't use a &lt;a href="https://gobyexample.com/mutexes"&gt;mutex&lt;/a&gt;
when accessing the &lt;code&gt;sites&lt;/code&gt; slice here because each element is only accessed by one
Goroutine, but if this was not the case a mutex would be essential here.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;main()&lt;/code&gt;, we're simply using a channel called &lt;code&gt;done&lt;/code&gt; to make sure all the
Goroutines are done executing before we quit the application, and as a final step
we output the &lt;code&gt;sites&lt;/code&gt; slice as JSON. As an alternative, a &lt;a href="https://gobyexample.com/waitgroups"&gt;WaitGroup&lt;/a&gt; can be used.&lt;/p&gt;
&lt;p&gt;This is sadly the only piece of Go code I have written &lt;s&gt;at&lt;/s&gt; for work, but it does
its job admirably, and I would highly recommend Go for tasks like these.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/janithl/a7c7369785c0b7b26c17f7a2673f8bea"&gt;&lt;strong&gt;The full code can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Might not be a good idea for software with a known CVE list where letting an
attacker know your specific version will open you up to attacks.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;This piece of info is interesting in a site speed/debugging context.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="golang"></category></entry><entry><title>Shouting Into The Void</title><link href="https://janithl.github.io/2019/12/shouting-into-the-void/" rel="alternate"></link><published>2019-12-09T08:30:00+05:30</published><updated>2019-12-09T08:30:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-12-09:/2019/12/shouting-into-the-void/</id><summary type="html">&lt;p&gt;&lt;img alt="Clouds" src="https://janithl.github.io/images/clouds.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Nobody reads this blog&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. RSS readers are dead, &lt;a href="http://my.statcounter.com/project/standard/stats.php?project_id=610934&amp;amp;guest=1"&gt;Kottu's stats page&lt;/a&gt;
makes me weep, and I don't dare post these things on social media.
So that leaves me at my most comfortable—a good old conversation
with myself.&lt;/p&gt;
&lt;p&gt;There is beauty in solitude. You only truly begin to appreciate …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Clouds" src="https://janithl.github.io/images/clouds.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Nobody reads this blog&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. RSS readers are dead, &lt;a href="http://my.statcounter.com/project/standard/stats.php?project_id=610934&amp;amp;guest=1"&gt;Kottu's stats page&lt;/a&gt;
makes me weep, and I don't dare post these things on social media.
So that leaves me at my most comfortable—a good old conversation
with myself.&lt;/p&gt;
&lt;p&gt;There is beauty in solitude. You only truly begin to appreciate it
as you get older. At long last you feel validated that the things
you felt growing up as a shy and introverted only-child have real
world applications!&lt;/p&gt;
&lt;p&gt;Society doesn't feel this way about solitude. It sees the uncoupled
male as some sort of threat that has to be neutralised at all cost.
The same relatives who threatened to box your ears if you so much
as looked in the direction of the opposite sex now expect you to bed
a complete stranger. South Asian families are whack.&lt;/p&gt;
&lt;p&gt;Anyway, it's just so very amazing to be on your own and really
appreciate it. Like how you appreciate your head ceasing to spin
after a really heavy night of drinking. You just sit there being
thankful for the ordinary, the sober. And that's beautiful, isn't it?&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;And that's a good thing!&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="biology"></category><category term="people"></category></entry><entry><title>Going Digital</title><link href="https://janithl.github.io/2019/11/going-digital/" rel="alternate"></link><published>2019-11-30T20:45:00+05:30</published><updated>2019-11-30T20:45:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-11-30:/2019/11/going-digital/</id><summary type="html">&lt;p&gt;I've been eyeing a graphics tablet for a while now, and on 11.11 there was this gorgeous
&lt;a href="https://www.youtube.com/watch?v=JKcSVBTD2a4"&gt;Gaomon S620&lt;/a&gt; for just $22 (!!!) on AliExpress, an offer I simply couldn't refuse.
Well, the tab arrived in the mail today, and I want to share some of my experiments on
my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been eyeing a graphics tablet for a while now, and on 11.11 there was this gorgeous
&lt;a href="https://www.youtube.com/watch?v=JKcSVBTD2a4"&gt;Gaomon S620&lt;/a&gt; for just $22 (!!!) on AliExpress, an offer I simply couldn't refuse.
Well, the tab arrived in the mail today, and I want to share some of my experiments on
my first day of digital art!&lt;/p&gt;
&lt;p&gt;&lt;img alt="First Drawing" src="https://janithl.github.io/images/sketches/digital-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Second Drawing" src="https://janithl.github.io/images/sketches/digital-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The first few attempts (above) were predictably terrible, but I began realising that my
usual &lt;a href="https://janithl.github.io/2019/11/ive-been-sketching/"&gt;sketching&lt;/a&gt; and watercolouring techniques weren't the best match for the medium,
because digital was something else entirely! As I told Dili, "it's like working with clay,
I can mould this shit all day". And that was my lightbulb moment, the fact that I can
mould the light and shadows to create shapes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Drawing" src="https://janithl.github.io/images/sketches/digital-3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Drawing" src="https://janithl.github.io/images/sketches/digital-4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It's been a lot of fun, and this next piece took only 45 minutes. Having an undo button,
an eraser, and all the brushes in the world&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; is definitely expanding the possibilities
for my limited artistic ability. It's like giving FL Studio to a kid who wants to write
music but can't play an instrument&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Drawing" src="https://janithl.github.io/images/sketches/digital-5.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; After a few more days (actually 3 days, because of travel) of playing with the
tablet, I'm happy to share two more #sadppls (as I used to call them). Say hello to
&lt;em&gt;Orange Guy&lt;/em&gt; and &lt;em&gt;Fail Girl&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Orange Guy" src="https://janithl.github.io/images/sketches/orange-guy.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fail Girl" src="https://janithl.github.io/images/sketches/fail-girl.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2:&lt;/strong&gt; And my proudest moment yet&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;, our TimTams:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Thimal" src="https://janithl.github.io/images/sketches/timtam.jpg"&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Shout-out to &lt;a href="https://firealpaca.com"&gt;FireAlpaca&lt;/a&gt;, the awesome free editor I've been using to draw these.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;AKA me when I was 14!&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Because he's so damn difficult to draw correctly, I swear!&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="design"></category><category term="people"></category></entry><entry><title>I've been sketching...</title><link href="https://janithl.github.io/2019/11/ive-been-sketching/" rel="alternate"></link><published>2019-11-27T08:15:00+05:30</published><updated>2019-11-27T08:15:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-11-27:/2019/11/ive-been-sketching/</id><summary type="html">&lt;h4&gt;I've been sketching at work...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-work.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;I've been sketching at home...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-home.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;I've sketched someone who looks like Jinora...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-jinora.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;And someone who looks like me...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-self.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Most are terrible...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-wtf2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-wtf1.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;But some, I'm quite proud of...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-g2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-g3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Especially this one 👇&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-g1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I got myself a set of cheap graphite sketching pencils from our lord and saviour …&lt;/p&gt;</summary><content type="html">&lt;h4&gt;I've been sketching at work...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-work.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;I've been sketching at home...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-home.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;I've sketched someone who looks like Jinora...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-jinora.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;And someone who looks like me...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-self.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Most are terrible...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-wtf2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-wtf1.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;But some, I'm quite proud of...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-g2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-g3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Especially this one 👇&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-g1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I got myself a set of cheap graphite sketching pencils from our lord and saviour
AliExpress. Since I don't Instagram anymore, this is just me showing off.&lt;/p&gt;</content><category term="design"></category><category term="people"></category></entry><entry><title>My take on doing 'Clean Architecture' in React (Part 2)</title><link href="https://janithl.github.io/2019/10/react-clean-architecture-part-2/" rel="alternate"></link><published>2019-10-14T08:28:00+05:30</published><updated>2019-10-14T08:28:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-10-14:/2019/10/react-clean-architecture-part-2/</id><summary type="html">&lt;p&gt;&lt;img alt="Core Folder Structure" src="https://janithl.github.io/images/clean-arch-folders.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://janithl.github.io/2019/10/react-clean-architecture-part-1/"&gt;In the last part&lt;/a&gt;, we broke the application core out, with layers for
entities, usecases, and infrastructure. The &lt;a href="https://github.com/janithl/react-clean-arch/tree/6224ee5f77b1398c41163ffedc78faf786962cc1"&gt;example code we used in the last
part (without breaking the core out) can be found on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now let's look at how we can implement the core. I will be using …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Core Folder Structure" src="https://janithl.github.io/images/clean-arch-folders.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://janithl.github.io/2019/10/react-clean-architecture-part-1/"&gt;In the last part&lt;/a&gt;, we broke the application core out, with layers for
entities, usecases, and infrastructure. The &lt;a href="https://github.com/janithl/react-clean-arch/tree/6224ee5f77b1398c41163ffedc78faf786962cc1"&gt;example code we used in the last
part (without breaking the core out) can be found on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now let's look at how we can implement the core. I will be using TypeScript
here because it has two things that we will make implementing Clean Architecture
much easier: types, and interfaces. &lt;a href="https://github.com/microsoft/TypeScript-React-Conversion-Guide"&gt;To add TypeScript to an existing React
project&lt;/a&gt;, we can simply run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn add -D typescript awesome-typescript-loader source-map-loader
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Entities&lt;/h3&gt;
&lt;p&gt;To separate out the core code from the rest of the app, so we'll first create a
subfolder called &lt;code&gt;core&lt;/code&gt;, with three subfolders for the Entity, Use Case, and
Infra layers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;src/core
├── entities
├── infrastructure
└── usecases
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inside the &lt;code&gt;entities&lt;/code&gt; subfolder, we'll first create the &lt;code&gt;Item&lt;/code&gt; class which holds
Item entities. This is a domain entity that will be used throughout the app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will also create an &lt;code&gt;ItemRepository&lt;/code&gt; interface that will enable us to abstract
out the API calls (and maybe local storage caching later on) which actually get
us the items.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./Item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ItemRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note how it is returning a Promise (with a list of Items), as it will be an async
operation.&lt;/p&gt;
&lt;h3&gt;Use Cases&lt;/h3&gt;
&lt;p&gt;Then, we implement the &lt;code&gt;UserService&lt;/code&gt;. We are implementing the service after defining
an interface because this will make writing tests etc. easier. There are arguments
against single implementation interfaces, but that is a debate for another time. The
service simply gets the items from the repository and returns them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../entities/Item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ItemRepository&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../entities/ItemRepository&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ItemService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ItemServiceImpl&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ItemService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;itemRepo&lt;/span&gt;: &lt;span class="kt"&gt;ItemRepository&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ir&lt;/span&gt;: &lt;span class="kt"&gt;ItemRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;itemRepo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ir&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;itemRepo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice how the constructor of the service takes an item repository. This is the runtime
injection of dependencies that makes this &lt;strong&gt;super exciting&lt;/strong&gt;. We can swap implementations
at runtime and the service has no hard dependencies on &lt;code&gt;infrastructure&lt;/code&gt; code, instead
relying on an interface defined at the &lt;code&gt;entity&lt;/code&gt; layer.&lt;/p&gt;
&lt;h3&gt;Infrastructure&lt;/h3&gt;
&lt;p&gt;Finally, we implement the &lt;code&gt;UserRepository&lt;/code&gt; we defined in the &lt;code&gt;entity&lt;/code&gt; layer. It will
just be a simple API call using &lt;code&gt;fetch()&lt;/code&gt;. We should add error handling here, but I've
left it out for now for the sake of simplicity.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../entities/Item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ItemRepository&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../entities/ItemRepository&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ItemDTO&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ItemRepositoryImpl&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ItemRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;jsonUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jsonUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;: &lt;span class="kt"&gt;ItemDTO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note how we are defining an &lt;code&gt;ItemDTO&lt;/code&gt; here. This is your contract with the API, and will
change with time. The following line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;: &lt;span class="kt"&gt;ItemDTO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is also very important. This is where the DTO is being mapped to a domain entity. We
can move this transformation to another file as our implementation grows in complexity,
as this code is on an architectural boundary and will change quite frequently.&lt;/p&gt;
&lt;h3&gt;All Together Now&lt;/h3&gt;
&lt;p&gt;We can now edit our Thunk to use the service instead of directly calling the API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;LIST_LOAD_REQUEST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;LIST_LOAD_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;LIST_LOAD_FAILURE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./Item.types&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ItemServiceImpl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../core/usecases/ItemService&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ItemRepositoryImpl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../core/infrastructure/ItemRepositoryImpl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refreshList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LIST_LOAD_REQUEST&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemRepo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ItemRepositoryImpl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ItemServiceImpl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itemRepo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;itemService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LIST_LOAD_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LIST_LOAD_FAILURE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first three lines within the try hold the essence of any dependency injection setup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemRepo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ItemRepositoryImpl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, we initalise the repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ItemServiceImpl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itemRepo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, we inject it into the service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;itemService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And finally, we access the methods offered by the service.&lt;/p&gt;
&lt;p&gt;It's good to keep these steps explicitly defined, so that the flow is clear and can
be changed in the future.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;And that's it! We've taken our core out and implemented it in a completely isolated
fashion that doesn't depend on infrastructure concerns. This makes things nice and
testable (I'll try to add some tests to the repo soon!), and makes you think about
the parts of your code that can (and definitely will) change—and how to make sure
that change is contained.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the reason we do not put SQL in JSPs. This is the reason we do not generate
HTML in the modules that compute results. This is the reason that business rules
should not know the database schema. This is the reason we separate concerns.&lt;/p&gt;
&lt;p&gt;Another wording for the Single Responsibility Principle is: "Gather together the
things that change for the same reasons. Separate those things that change for
different reasons."&lt;/p&gt;
&lt;p&gt;If you think about this you’ll realize that this is just another way to define
cohesion and coupling. We want to increase the cohesion between things that change
for the same reasons, and we want to decrease the coupling between those things
that change for different reasons.&lt;/p&gt;
&lt;p&gt;— Uncle Bob&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;This series of posts is dedicated to &lt;a href="https://www.linkedin.com/in/mahasenbandara/"&gt;Mr. Mahasen Bandara&lt;/a&gt;, architect extraordinaire,
from whom I had the priviledge of learning about Robert C. Martin and architectural
boundaries and a ton of other architectural and programming practicies.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/react-clean-arch"&gt;&lt;strong&gt;The full code for this part can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="code"></category><category term="design"></category><category term="js and ts"></category><category term="react"></category><category term="work"></category></entry><entry><title>My take on doing 'Clean Architecture' in React (Part 1)</title><link href="https://janithl.github.io/2019/10/react-clean-architecture-part-1/" rel="alternate"></link><published>2019-10-06T19:10:00+05:30</published><updated>2019-10-06T19:10:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-10-06:/2019/10/react-clean-architecture-part-1/</id><summary type="html">&lt;p&gt;&lt;img alt="Clean Architecture" src="https://janithl.github.io/images/clean-arch-diagram.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Clean Architecture, simplified.&lt;/p&gt;

&lt;p&gt;I'm a huge fan of Robert C. Martin's work in general, and &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;Clean Architecture&lt;/a&gt; in
particular. I'm frequently on the lookout for how to apply it to the different system
architectures and frameworks we work with.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Which modules should be decoupled? I think the rule is similar …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Clean Architecture" src="https://janithl.github.io/images/clean-arch-diagram.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Clean Architecture, simplified.&lt;/p&gt;

&lt;p&gt;I'm a huge fan of Robert C. Martin's work in general, and &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;Clean Architecture&lt;/a&gt; in
particular. I'm frequently on the lookout for how to apply it to the different system
architectures and frameworks we work with.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Which modules should be decoupled? I think the rule is similar to the previous
rule: &lt;em&gt;Any module that changes frequently should be decoupled from the rest of the
system.&lt;/em&gt; — Uncle Bob&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's a damn shame that most of the code we are told to write in guides and documentation
(often written by people who are heavily invested in the framework that the docs are
about) are very tightly coupled to the framework, libraries, and persistence implementation
(as well as the REST APIs that are called—how many of us have had to do system-wide
changes because the response object from the API changed?)&lt;/p&gt;
&lt;p&gt;Today, in part 1 of a 2 part series, I'll write a bit about what I think is a good way
to implement Clean Architecture in React JS and React Native apps&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;Why?&lt;/h3&gt;
&lt;p&gt;The advantages of switching to Clean Architecture are &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;listed out in detail on Uncle Bob's
blog&lt;/a&gt;, but I am going for three main objectives with regards to having this architecture
on our React app:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make the Core 100% testable:&lt;/strong&gt; All external dependencies (the UI, local storage,
   REST APIs etc) can be mocked out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Portability:&lt;/strong&gt; If we need to port the app to Vue JS tomorrow, the core can still
   be put there wholesale. We can also explore sharing the core between the frontend and
   backend (if your backend is written in Node or something).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prevent 'Change Propagation':&lt;/strong&gt; If the REST API's response object changes, or we
   change the caching mechanism, or any such change happens upstream of the final consumer
   (the UI), those changes should not cause changes downstream.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Keep in mind that one of the most important fundamentals of Clean Architecture is to
recognise where your architectural boundaries are, and to ensure that calls across those
boundaries are done using well defined interfaces and contracts. The response object
changing does not change the contract, since the core sets the contract and the code that
calls the API and parses its responses merely implements it. Your DTO is changing? It's
up to the API component to massage that into the existing domain entity, sorry.&lt;/p&gt;
&lt;h3&gt;Standard React async call architecture&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Standard React architecture" src="https://janithl.github.io/images/basic-react-arch.png"&gt;&lt;/p&gt;
&lt;p&gt;Okay, so this a very standard and common pattern when writing the most common kind of
interface, i.e. call an API, display some data in a component. You could be using Redux
for state, or React hooks, or component state, but this diagram barely changes because
in essence the user performs an action, which results in an API call, which updates the
state and hence the UI.&lt;/p&gt;
&lt;p&gt;Your component code would look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const ItemList = ({ items, refreshList }) =&amp;gt; (
  &amp;lt;div&amp;gt;
    &amp;lt;button onClick={refreshList}&amp;gt;Refresh&amp;lt;/button&amp;gt;
    &amp;lt;ul&amp;gt;
      {items.map(item =&amp;gt; (
        &amp;lt;li key={item.id}&amp;gt;{item.name}&amp;lt;/li&amp;gt;
      ))}
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It'll be hooked up to Redux using something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapStateToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;refreshList&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refreshList&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapStateToProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;ItemList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And I'd guess your Thunk (or Saga) would look a bit like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refreshList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;LIST_LOAD_REQUEST&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://your.api/listdata&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;LIST_LOAD_SUCCESS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;LIST_LOAD_FAILURE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty simple and familiar, right?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Let's break it&lt;/em&gt; 😈&lt;/p&gt;
&lt;h3&gt;Identifying boundaries&lt;/h3&gt;
&lt;p&gt;Now, I would like to start off by saying it would be unwise to try to break React
and whatever state management solution you use using Clean Architecture. Yes, it's
good to keep them isolated but I'd suggest using React patterns such as presentational
components and containers to do that—this is because Redux and the ilk are tightly
tied to React's Context API, and it would be a massive hassle to handle all that
complexity and coupling in our core. So let's keep it out.&lt;/p&gt;
&lt;p&gt;I'm thinking of having 3 major components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;UI:&lt;/strong&gt; This is in Infrastructure, and is basically React + Redux&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network and Persistence:&lt;/strong&gt; Also in Infrastructure. I am thinking of hiding the
   API complexity behind a repository interface, and to implement local storage for
   caching if necessary inside this repo implementation itself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application Core:&lt;/strong&gt; This is in the Use Case and Entity layers, and is where the
   magical business logic et al. happens.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The component diagram, in my head, looks a bit like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="React with Clean Architecture" src="https://janithl.github.io/images/clean-react-arch-1.png"&gt;&lt;/p&gt;
&lt;p&gt;But wait, where's are we calling the API and getting the data for items? We need to
include an &lt;code&gt;ItemRepository&lt;/code&gt; interface, and an implementation for it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="React with Clean Architecture, updated" src="https://janithl.github.io/images/clean-react-arch-2.png"&gt;&lt;/p&gt;
&lt;p&gt;This is one of the coolest things about &lt;a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle"&gt;Dependency Inversion&lt;/a&gt;, in that all the
arrows are flowing inwards. In this case, &lt;code&gt;ItemService&lt;/code&gt; depends on the interface
&lt;code&gt;ItemRepository&lt;/code&gt;—which is in the Entity layer—and not on its concrete implementation
which is on a lower layer and will only be injected during runtime. This has several
benefits, &lt;a href="https://janithl.github.io/2019/10/react-clean-architecture-part-2/"&gt;which we'll explore in the next part&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The overriding rule that makes this architecture work is The Dependency Rule. This
rule says that source code dependencies can only point inwards. Nothing in an inner
circle can know anything at all about something in an outer circle. In particular,
the name of something declared in an outer circle must not be mentioned by the code
in the an inner circle. That includes, functions, classes. variables, or any other
named software entity.&lt;/p&gt;
&lt;p&gt;By the same token, data formats used in an outer circle should not be used by an inner
circle, especially if those formats are generate by a framework in an outer circle. We
don’t want anything in an outer circle to impact the inner circles.&lt;/p&gt;
&lt;p&gt;— Uncle Bob&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/react-clean-arch/tree/6224ee5f77b1398c41163ffedc78faf786962cc1"&gt;&lt;strong&gt;The full code for this part can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;With or without Redux (or Redux-like) state management&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="design"></category><category term="js and ts"></category><category term="react"></category><category term="work"></category></entry><entry><title>On-Premise CloudWatch Metrics with AWS CLI</title><link href="https://janithl.github.io/2019/10/cloudwatch-metrics-aws-cli/" rel="alternate"></link><published>2019-10-02T21:16:00+05:30</published><updated>2019-10-02T21:16:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-10-02:/2019/10/cloudwatch-metrics-aws-cli/</id><summary type="html">&lt;p&gt;&lt;img alt="Have you tried AWS CLI?" src="https://janithl.github.io/images/aws-cli.jpg"&gt;&lt;/p&gt;
&lt;p&gt;CloudWatch is pretty cool, and looking at a metrics dashboard and setting up
alarms is pretty badass—especially when you're not a full-time DevOps and
don't have the time to worry about your &lt;em&gt;monitoring solution&lt;/em&gt; in addition to
the thing it's &lt;em&gt;supposed&lt;/em&gt; to look after.&lt;/p&gt;
&lt;p&gt;If you're running some of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Have you tried AWS CLI?" src="https://janithl.github.io/images/aws-cli.jpg"&gt;&lt;/p&gt;
&lt;p&gt;CloudWatch is pretty cool, and looking at a metrics dashboard and setting up
alarms is pretty badass—especially when you're not a full-time DevOps and
don't have the time to worry about your &lt;em&gt;monitoring solution&lt;/em&gt; in addition to
the thing it's &lt;em&gt;supposed&lt;/em&gt; to look after.&lt;/p&gt;
&lt;p&gt;If you're running some of your stuff outside AWS (cue gasps), &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-on-premise.html"&gt;CloudWatch agent&lt;/a&gt;
is supposed to have you covered, but after following the instructions to a
tee, I found that it wasn't doing what it said on the tin, and the agent was
refusing to start&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Anyhoo, I was running out of time and I absolutely had to get this very simple
metric into CloudWatch, and after 2 days of losing sleep and trying to make
the agent work, I gave up. Thankfully, the ever reliable &lt;a href="https://aws.amazon.com/cli/"&gt;AWS CLI&lt;/a&gt; was
there to pick me up.&lt;/p&gt;
&lt;p&gt;It turns out a simple &lt;code&gt;aws cloudwatch put-metric-data&lt;/code&gt; is all you need to push
metrics to CloudWatch. There's actually &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html"&gt;an entire doc on it&lt;/a&gt;, which I only
found while writing this post.&lt;/p&gt;
&lt;h3&gt;The Setup&lt;/h3&gt;
&lt;p&gt;You need to make sure you have a IAM role set up with the ability to push
metrics to CloudWatch, which is &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/create-iam-roles-for-cloudwatch-agent.html"&gt;covered in the CloudWatch agent docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For my setup, I just wanted to send the disk utilisation to CloudWatch, so I
created a shell script that looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;freeSpace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;df -m &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;NR==2{print $4}&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
/usr/local/bin/aws cloudwatch put-metric-data --metric-name my-server-FreeDisk &lt;span class="se"&gt;\&lt;/span&gt;
--value &lt;span class="nv"&gt;$freeSpace&lt;/span&gt; --unit Megabytes --namespace my-server --profile AmazonCloudWatchAgent
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, I am using the &lt;code&gt;--profile&lt;/code&gt; flag to select the correct IAM user, which has
been added to my AWS &lt;code&gt;credentials&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;The shell script was simply called every 5 minutes from a cron job, and I had the
whole setup up and running in no time. You can also do fancy stuff like sending in
entire JSON files, which will surely come in handy if you want to work with Docker
stats etc.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Some issue about the instance not having an EC2 identifier, which—&lt;em&gt;duh&lt;/em&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="work"></category></entry><entry><title>A basic terrain generator in Go (Part 4)</title><link href="https://janithl.github.io/2019/09/go-terrain-gen-part-4/" rel="alternate"></link><published>2019-09-21T17:21:00+05:30</published><updated>2019-09-21T17:21:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-09-21:/2019/09/go-terrain-gen-part-4/</id><summary type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-3/"&gt;In the last part&lt;/a&gt;, we added fancy output code, and our output looks like
this now:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output with colours" src="https://janithl.github.io/images/go-terrain-gen/p4-output-initial.png"&gt;&lt;/p&gt;
&lt;p&gt;...which, if you've ever seen a map, isn't what terrain actually looks like.
The terrain around peaks tend to be at a similar height, and there is rarely
the random patchwork of heights we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-3/"&gt;In the last part&lt;/a&gt;, we added fancy output code, and our output looks like
this now:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output with colours" src="https://janithl.github.io/images/go-terrain-gen/p4-output-initial.png"&gt;&lt;/p&gt;
&lt;p&gt;...which, if you've ever seen a map, isn't what terrain actually looks like.
The terrain around peaks tend to be at a similar height, and there is rarely
the random patchwork of heights we see here. So let's fix that!&lt;/p&gt;
&lt;p&gt;But first...&lt;/p&gt;
&lt;h3&gt;Visualise Steps&lt;/h3&gt;
&lt;p&gt;Wouldn't it be cool to see how the terrain gets generated layer by layer
from the highest elevation to the lowest? Let's change our &lt;code&gt;Generate()&lt;/code&gt;
method to allow us to view this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewSteps&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// rand needs to be seeded, so we set the current&lt;/span&gt;
    &lt;span class="c1"&gt;// nanosecond timestamp as the seed&lt;/span&gt;
    &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;// iterate down from max elevation, assigning vals&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if the element has already been assigned, skip it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// if the random value meets our criteria, it&amp;#39;s a peak&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// if viewSteps is true, we print every step of the generation process,&lt;/span&gt;
        &lt;span class="c1"&gt;// sleep for a second, and clear the screen for the next step&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;viewSteps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;clear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's also add it as a CLI flag in our &lt;code&gt;main.go&lt;/code&gt; so that the user can
turn it on when they want.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;height of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;width of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;levels of elevation on the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;peaks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;percentage probability a peak will randomly appear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;steps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;show the generation steps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;terrainMap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we can compile and run with the &lt;code&gt;--steps&lt;/code&gt; flag to view our little
generator in action:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output with steps" src="https://janithl.github.io/images/go-terrain-gen/p4-output-steps.gif"&gt;&lt;/p&gt;
&lt;p&gt;Groovy! 💃🏽&lt;/p&gt;
&lt;h3&gt;Neighbours&lt;/h3&gt;
&lt;p&gt;Like we discussed before, the map elements next to peaks need to be at a similar
height. My logic for this part is going to be: &lt;em&gt;if the element next to you is at
elevation e, then your elevation is e - 1&lt;/em&gt;. To take a really simple example,
elevation values would look like this around a peak:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Elevation values" src="https://janithl.github.io/images/go-terrain-gen/p4-elevation-values.png"&gt;&lt;/p&gt;
&lt;p&gt;We'll refine this later (adding cliffs!), but for now, it looks like we need to
find if you have an element adjacent to you at an elevation &lt;code&gt;e&lt;/code&gt;, so we'll define
a new unexported method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// adjacentElevation checks if an adjacent element&lt;/span&gt;
&lt;span class="c1"&gt;// to the given element (h, w) is at a given elevation&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;adjacentElevation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go's &lt;code&gt;Min()&lt;/code&gt; and &lt;code&gt;Max()&lt;/code&gt; methods, as provided by &lt;a href="https://golang.org/pkg/math/"&gt;the &lt;code&gt;math&lt;/code&gt; package&lt;/a&gt;, work with
&lt;code&gt;float64&lt;/code&gt; numbers, so we'll also define two simple private functions to work with
&lt;code&gt;int&lt;/code&gt;s and get min and max values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, let's modify the &lt;code&gt;Generate()&lt;/code&gt; method to use &lt;code&gt;adjacentElevation()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Generate generates the terrain map&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewSteps&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// rand needs to be seeded, so we set the current&lt;/span&gt;
    &lt;span class="c1"&gt;// nanosecond timestamp as the seed&lt;/span&gt;
    &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;// iterate down from max elevation, assigning vals&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if the element has already been assigned, skip it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// if the element is next to a element with elevation x, it&lt;/span&gt;
                &lt;span class="c1"&gt;// should get elevation x - 1&lt;/span&gt;
                &lt;span class="c1"&gt;// alternately, if the random value meets our criteria, it&amp;#39;s a peak&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;adjacentElevation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// if viewSteps is true, we print every step of the generation process,&lt;/span&gt;
        &lt;span class="c1"&gt;// sleep for a second, and clear the screen for the next step&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;viewSteps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;clear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's compile and run it!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output with adjacents" src="https://janithl.github.io/images/go-terrain-gen/p4-output-with-adjacent.gif"&gt;&lt;/p&gt;
&lt;p&gt;I think it's starting to look a lot like a real map now. 🗺&lt;/p&gt;
&lt;h3&gt;Cliffs&lt;/h3&gt;
&lt;p&gt;We know that in the real world, mountains aren't all shaped like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gradual" src="https://janithl.github.io/images/go-terrain-gen/p4-gradual.png"&gt;&lt;/p&gt;
&lt;p&gt;Sometimes, they look like this too:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gradual" src="https://janithl.github.io/images/go-terrain-gen/p4-cliff.png"&gt;&lt;/p&gt;
&lt;p&gt;Also, things are looking a wee bit too boxy, so let's add some randomness in the
form of a &lt;strong&gt;cliff probability&lt;/strong&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; to the &lt;code&gt;fullMap&lt;/code&gt; struct and the &lt;code&gt;NewFullMap()&lt;/code&gt;
function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cliffProbability&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="nx"&gt;elements&lt;/span&gt;                                                    &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// NewFullMap returns a new terrain map&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cliffProbability&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;cliffProbability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cliffProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We'll also edit &lt;code&gt;main.go&lt;/code&gt; to take &lt;code&gt;--cliffs&lt;/code&gt; as a CLI flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;height of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;width of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;levels of elevation on the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;peaks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;percentage probability a peak will randomly appear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;cliffProbability&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cliffs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;percentage probability a cliff will randomly appear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;steps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;show the generation steps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;terrainMap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;cliffProbability&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's now edit &lt;code&gt;adjacentElevation()&lt;/code&gt; to use cliffProbability:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;adjacentElevation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if this element is *not* randomly a cliff, return true&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cliffProbability&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, now to compile and run:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output with cliffs" src="https://janithl.github.io/images/go-terrain-gen/p4-output-cliffs.png"&gt;&lt;/p&gt;
&lt;p&gt;Woo! 🥂 That looks much more realistic, and by tweaking around the
peak and cliff probabilities, and the number of elevation levels, we
can get maps that looks really nice.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So that concludes this long (and I hope &lt;em&gt;educational&lt;/em&gt;) series on using
Go to write a simple terrain generator on the CLI. I hope you enjoyed
following along as much as I enjoyed coding and writing about it!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/go-terrain-gen/tree/master/part4"&gt;&lt;strong&gt;The full code, as always, can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Just like our old friend &lt;strong&gt;peak probability&lt;/strong&gt;, this is the random
percentage of the probability of an element being a cliff.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="golang"></category></entry><entry><title>A basic terrain generator in Go (Part 3)</title><link href="https://janithl.github.io/2019/09/go-terrain-gen-part-3/" rel="alternate"></link><published>2019-09-19T20:49:00+05:30</published><updated>2019-09-19T20:49:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-09-19:/2019/09/go-terrain-gen-part-3/</id><summary type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-2/"&gt;In the last part&lt;/a&gt;, we refactored the code and added CLI flags. The output
right now looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Compile and Output After Flags" src="https://janithl.github.io/images/go-terrain-gen/p2-output-3.png"&gt;&lt;/p&gt;
&lt;p&gt;It doesn't really give us a sense of what the terrain looks like, though. Let's
change that.&lt;/p&gt;
&lt;h3&gt;Unicode&lt;/h3&gt;
&lt;p&gt;Unicode has some &lt;a href="https://en.wikipedia.org/wiki/Block_Elements"&gt;nice characters&lt;/a&gt; that can help us here. The ones we're …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-2/"&gt;In the last part&lt;/a&gt;, we refactored the code and added CLI flags. The output
right now looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Compile and Output After Flags" src="https://janithl.github.io/images/go-terrain-gen/p2-output-3.png"&gt;&lt;/p&gt;
&lt;p&gt;It doesn't really give us a sense of what the terrain looks like, though. Let's
change that.&lt;/p&gt;
&lt;h3&gt;Unicode&lt;/h3&gt;
&lt;p&gt;Unicode has some &lt;a href="https://en.wikipedia.org/wiki/Block_Elements"&gt;nice characters&lt;/a&gt; that can help us here. The ones we're
going to use today are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;U+2591      ░       Light shade
U+2592      ▒       Medium shade
U+2593      ▓       Dark shade
U+2588      █       Full block
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can update the &lt;code&gt;Print()&lt;/code&gt; function to use these new shade blocks. We've also
added a space to get the "no shade" effect.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mapShades&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;░&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;▒&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;▓&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;█&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// print out map&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// print a space (black) if elevation is zero&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// get the approximate shade nearest to the elevation number&lt;/span&gt;
            &lt;span class="nx"&gt;elementShade&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapShades&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;// get its index&lt;/span&gt;
            &lt;span class="nx"&gt;shadeIndex&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementShade&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="c1"&gt;// print out the corresponding unicode char&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapShades&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;shadeIndex&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// print a newline&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go takes its types very seriously, so someone coming from a dynamically typed
language like PHP or Javascript might be a bit confused. But trust me, it is well
worth the trouble to specify all the type conversions manually, as the compiler
helps you find bugs with data types that would otherwise plague you at runtime.&lt;/p&gt;
&lt;p&gt;Let's compile and run it!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output after shades" src="https://janithl.github.io/images/go-terrain-gen/p3-output-shades.png"&gt;&lt;/p&gt;
&lt;p&gt;Very cool. I think it gives a good idea of how bad the generation algorithm
currently looks. 😅&lt;/p&gt;
&lt;h3&gt;Colour&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code#Colors"&gt;Terminals support colour&lt;/a&gt;, and all you got to do is send an ANSI escape
sequence&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; with your output. The colours I want to use are blue and cyan
for the sea and shallows, and green and yellow for the fields and mountains.
We'll modify &lt;code&gt;Print()&lt;/code&gt; to add these and output the codes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mapColours&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// blue, cyan, green, yellow&lt;/span&gt;
    &lt;span class="nx"&gt;mapShades&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;░&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;▒&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;▓&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;█&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// print out map&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// print a space (black) if elevation is zero&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// get the approximate colour nearest to the elevation number&lt;/span&gt;
            &lt;span class="nx"&gt;elementColour&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapColours&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;// get the colour index&lt;/span&gt;
            &lt;span class="nx"&gt;colourIndex&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementColour&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="c1"&gt;// get the approximate shade within that colour&lt;/span&gt;
            &lt;span class="nx"&gt;elementShade&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementColour&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementColour&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapShades&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;// get its index&lt;/span&gt;
            &lt;span class="nx"&gt;shadeIndex&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementShade&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="c1"&gt;// print out the corresponding ANSI code and unicode char&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\033[%dm%s\033[0m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapColours&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;colourIndex&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;mapShades&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;shadeIndex&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// print a newline&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We first get the colour index, and then get the shade index within that
colour. Let's compile and run it with the same flags as before:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output after colours" src="https://janithl.github.io/images/go-terrain-gen/p3-output-colours.png"&gt;&lt;/p&gt;
&lt;p&gt;Fabulous! ❤️💚💙&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Being able to visualise your output is an important part of building any
program (which is a reason wireframes exist, I guess). With the graphics sorted,
&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-4/"&gt;our next improvements&lt;/a&gt; to the system&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; will be more apparent when we
implement them.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/go-terrain-gen/tree/master/part3"&gt;&lt;strong&gt;The full code for this part can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I learned this only &lt;em&gt;yesterday&lt;/em&gt;! &lt;a href="https://rosettacode.org/wiki/Terminal_control/Coloured_text#Go"&gt;Rosetta Code&lt;/a&gt; has code on how it's
done in all the languages.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;I'm planning to cover assigning values to elements near the peaks, and
how introducing a bit of randomness will help make things more realistic.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="golang"></category></entry><entry><title>A basic terrain generator in Go (Part 2)</title><link href="https://janithl.github.io/2019/09/go-terrain-gen-part-2/" rel="alternate"></link><published>2019-09-18T07:28:00+05:30</published><updated>2019-09-18T07:28:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-09-18:/2019/09/go-terrain-gen-part-2/</id><summary type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-1/"&gt;In the last part&lt;/a&gt;, we explored how to set up what was basically a matrix and
randomly assign elevation values to it. In this part, I wanted to explore how to deal
with assigning values to the elements adjacent to the peaks, and how to display
the map to users …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-1/"&gt;In the last part&lt;/a&gt;, we explored how to set up what was basically a matrix and
randomly assign elevation values to it. In this part, I wanted to explore how to deal
with assigning values to the elements adjacent to the peaks, and how to display
the map to users in a more intuitive way than a bunch of numbers.&lt;/p&gt;
&lt;p&gt;But...&lt;/p&gt;
&lt;p&gt;The code that we wrote on a single file in the previous part has global variables and
is all written in a single method, and this would get unmaintainable fast. Let's
first explore some of the nice features Go offers to help refactor this code.&lt;/p&gt;
&lt;h3&gt;Go modules&lt;/h3&gt;
&lt;p&gt;We have all our code in a &lt;code&gt;main.go&lt;/code&gt; file in our home directory. There used to be
a special folder to keep all the Go files called &lt;code&gt;$GOPATH&lt;/code&gt;, but as of &lt;a href="https://golang.org/doc/go1.13"&gt;Go 1.13&lt;/a&gt; this
is deprecated, and we can now initialise Go modules anywhere to maintain our
code. I've found &lt;a href="https://www.kablamo.com.au/blog/2018/12/10/just-tell-me-how-to-use-go-modules"&gt;this super simple guide to Go modules&lt;/a&gt; handy whenever I want
to use them.&lt;/p&gt;
&lt;p&gt;So, first, we move our &lt;code&gt;main.go&lt;/code&gt; file to a folder of our choosing. I want to put all
of the code in this part and the others as separate modules on Github, so I'm going
to name this module &lt;code&gt;github.com/janithl/go-terrain-gen/part2&lt;/code&gt;, to keep
things short and unambiguous. 😜&lt;/p&gt;
&lt;p&gt;&lt;img alt="Go Mod Init" src="https://janithl.github.io/images/go-terrain-gen/p2-go-mod-init.png"&gt;&lt;/p&gt;
&lt;p&gt;If we open up our &lt;code&gt;go.mod&lt;/code&gt; file, we can find that it's very sparse right now since
we don't have any dependencies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;module github.com/janithl/go-terrain-gen/part2

go 1.12
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Multiple files&lt;/h3&gt;
&lt;p&gt;I don't want to keep all the terrain generator logic inside &lt;code&gt;main.go&lt;/code&gt;, so let's first
try to separate them out into two files.&lt;/p&gt;
&lt;p&gt;&lt;img alt="File Layout" src="https://janithl.github.io/images/go-terrain-gen/p2-file-layout-1.png"&gt;&lt;/p&gt;
&lt;p&gt;We move most of our app code into a different file, and a different package
called &lt;code&gt;terrain&lt;/code&gt;. Since in Go, you have to keep packages in their different folders,
we move the code into the &lt;code&gt;terrain&lt;/code&gt; folder, and name the file &lt;code&gt;terrain.go&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;terrain&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;math/rand&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

&lt;span class="c1"&gt;// we set the random chance of a peak occuring to 5%&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;

&lt;span class="c1"&gt;// Generate generates the terrain map&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// rand needs to be seeded, so we set the current&lt;/span&gt;
    &lt;span class="c1"&gt;// nanosecond timestamp as the seed&lt;/span&gt;
    &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;// iterate down from max elevation, assigning vals&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if the element has already been assigned, skip it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// if the random value meets our criteria, it&amp;#39;s a peak&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Print prints the terrain map out&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// print out map&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This leaves our &lt;code&gt;main.go&lt;/code&gt; file wonderfully sparse, and it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;github.com/janithl/go-terrain-gen/part2/terrain&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty neat, right? Let's execute it!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output" src="https://janithl.github.io/images/go-terrain-gen/p2-output-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Boom! 🎆&lt;/p&gt;
&lt;h3&gt;Encapsulate&lt;/h3&gt;
&lt;p&gt;I don't like the structure of &lt;code&gt;terrain.go&lt;/code&gt; right now, it's got stuff hanging around
and it's not very flexible (you can't even set the height and width of the map) and
extensible. Let's explore Go's &lt;a href="https://gobyexample.com/structs"&gt;structs&lt;/a&gt; and &lt;a href="https://gobyexample.com/methods"&gt;methods&lt;/a&gt; to make things cleaner.
We'll also use Go's &lt;a href="https://gobyexample.com/slices"&gt;slices&lt;/a&gt; to make the map resizeable at runtime.&lt;/p&gt;
&lt;p&gt;The fullMap struct will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="nx"&gt;elements&lt;/span&gt;                                  &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also add a function to construct a new fullMap&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// NewFullMap returns a new terrain map&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note how the height and the width of the map can be set dynamically now, in
addition to the levels of elevation and the peak probability.&lt;/p&gt;
&lt;p&gt;We can now rewrite the &lt;code&gt;Generate()&lt;/code&gt; and &lt;code&gt;Print()&lt;/code&gt; functions to work with the
new fullMap struct, which is pretty straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Generate generates the terrain map&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// rand needs to be seeded, so we set the current&lt;/span&gt;
    &lt;span class="c1"&gt;// nanosecond timestamp as the seed&lt;/span&gt;
    &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;// iterate down from max elevation, assigning vals&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if the element has already been assigned, skip it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// if the random value meets our criteria, it&amp;#39;s a peak&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Print prints the terrain map out&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// print out map&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;a href="https://github.com/janithl/go-terrain-gen/blob/master/part2/terrain/terrain.go"&gt;full code can be seen here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, the &lt;code&gt;main.go&lt;/code&gt; file will look a bit different, but this allows us
greater control over how the map is generated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;github.com/janithl/go-terrain-gen/part2/terrain&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's run it:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output After Refactor" src="https://janithl.github.io/images/go-terrain-gen/p2-output-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Yass! 🙌🏾&lt;/p&gt;
&lt;h3&gt;Add Some Flags&lt;/h3&gt;
&lt;p&gt;We can add some &lt;a href="https://gobyexample.com/command-line-flags"&gt;CLI flags&lt;/a&gt; to expose these newly added features to users.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;flag&amp;quot;&lt;/span&gt;

    &lt;span class="s"&gt;&amp;quot;github.com/janithl/go-terrain-gen/part2/terrain&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;height of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;width of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;levels of elevation on the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;peaks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;percentage probability a peak will randomly appear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;terrainMap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To run it, let's first build it with &lt;code&gt;go build&lt;/code&gt;, and point the output to the
&lt;code&gt;bin&lt;/code&gt; directory, and then execute with the CLI flags:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Compile and Output After Flags" src="https://janithl.github.io/images/go-terrain-gen/p2-output-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;bin/terrain --help&lt;/code&gt; returns the usage details:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Usage of bin/terrain:
  -elev int
        levels of elevation on the map (default 9)
  -height int
        height of the map (default 16)
  -peaks int
        percentage probability a peak will randomly appear (default 5)
  -width int
        width of the map (default 16)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty neat, Golang! 👏🏽👏🏽👏🏽&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I know this was supposed to be an exciting installment where we were going to
implement new features, but sometimes&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;, cleaning up the code you already have
is just as rewarding. It also makes adding new features easier and less prone to
bugs. &lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-3/"&gt;In the next part&lt;/a&gt;, we'll explore adding better visualisation for our map.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/go-terrain-gen/tree/master/part2"&gt;&lt;strong&gt;The full code for this part can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Note how I am returning the struct itself instead of my usual practice of
returning a pointer to the struct. This was due to &lt;a href="https://philpearl.github.io/post/bad_go_pointer_returns/"&gt;this post by Phil Pearl&lt;/a&gt;,
which taught me that it's more efficient to just return the struct itself.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Especially with a &lt;em&gt;beautiful&lt;/em&gt; language like Go. 😍&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="golang"></category></entry><entry><title>A basic terrain generator in Go (Part 1)</title><link href="https://janithl.github.io/2019/09/go-terrain-gen-part-1/" rel="alternate"></link><published>2019-09-17T21:12:00+05:30</published><updated>2019-09-17T21:12:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-09-17:/2019/09/go-terrain-gen-part-1/</id><summary type="html">&lt;p&gt;I haven't gushed about Go much on this blog&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, but I thought of writing a
small series of posts on a little piece of code I cooked up while I was
supposed to be doing other, more important things&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;Concept&lt;/h3&gt;
&lt;p&gt;So I was sitting there, zoning out and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I haven't gushed about Go much on this blog&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, but I thought of writing a
small series of posts on a little piece of code I cooked up while I was
supposed to be doing other, more important things&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;Concept&lt;/h3&gt;
&lt;p&gt;So I was sitting there, zoning out and browsing &lt;a href="https://www.reddit.com/r/CitiesSkylines/"&gt;one of my favourite subreddits&lt;/a&gt;,
when I thought about how terrain can be generated. And I thought if we were to
take a flat plane that sliced through the mountains at progressively decreasing
heights, you'd first get a few isolated spots (the peaks of the mountains), and on
the next iteration you'd always have the areas adjacent to these peaks showing up
(because mountain tops don't float in thin air).&lt;/p&gt;
&lt;p&gt;Computationally, if the map was a 2D array, we could randomly set a few elements
as peaks, and then generate the rest of the mountain around those "peak" elements.
Of course, with each iteration you would also have the possibility of running into
peaks that weren't high enough to be captured at the earlier iteration, so we
should keep randomly sprinkling peaks among the (not already assigned) elements
in the map.&lt;/p&gt;
&lt;h3&gt;Pseudocode&lt;/h3&gt;
&lt;p&gt;The pseudocode for the most basic version would look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# map initialised to 0s
map[height][width]

for elevation &amp;lt;- 5 to 0
    for h &amp;lt;- 0 to height
        for w &amp;lt;- 0 to width
            # if element is already assigned value, skip
            if map[h][w] &amp;gt; 0
                continue

            # if array element next to higher elevation
            # or picked as a peak randomly
            if map[h][w] next to elevation + 1 or random()
                map[h][w] &amp;lt;- elevation
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Seems simple enough, right?&lt;/p&gt;
&lt;h3&gt;Go Implementation&lt;/h3&gt;
&lt;p&gt;The initialisations, loops and randomly picking an element to be a peak (and
printing the result out) seem straightforward enough, so let's get those out
of the way first and create our &lt;code&gt;main.go&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;math/rand&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

&lt;span class="c1"&gt;// we set the random chance of a peak occuring to 5%&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// rand needs to be seeded, so we set the current&lt;/span&gt;
    &lt;span class="c1"&gt;// nanosecond timestamp as the seed&lt;/span&gt;
    &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;// iterate down from max elevation, assigning vals&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if the element has already been&lt;/span&gt;
                &lt;span class="c1"&gt;// assigned, skip it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// if the random value meets our criteria,&lt;/span&gt;
                &lt;span class="c1"&gt;// it&amp;#39;s a peak&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// print out map&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We run the code with &lt;code&gt;go run main.go&lt;/code&gt;, and get the following output:&lt;/p&gt;
&lt;p&gt;&lt;img alt="First Iteration" src="https://janithl.github.io/images/iteration-1.png"&gt;&lt;/p&gt;
&lt;p&gt;To quote Chernobyl&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;, it's "Not great, not &lt;em&gt;terrible&lt;/em&gt;".&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-2/"&gt;In the next part&lt;/a&gt; we'll look at a quick and dirty way to implement a
way to look at elements adjacent to our current element (the part of our
pseudocode that we didn't implement), and assign values to it—and better
visualisation of the terrain map.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/go-terrain-gen/tree/master/part1"&gt;&lt;strong&gt;The full code for this part can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Mostly because this blog has been &lt;em&gt;inactive&lt;/em&gt; for the last 2 years, but
more on that in a later post.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;My biggest gripe about my otherwise perfect workplace is that I don't
get to write Go for a living.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Which I haven't watched yet! 🙈&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="golang"></category></entry><entry><title>A meditation on ‘Kimi no Na wa’</title><link href="https://janithl.github.io/2019/07/kimi-no-na-wa/" rel="alternate"></link><published>2019-07-23T16:31:00+05:30</published><updated>2019-07-23T16:31:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-07-23:/2019/07/kimi-no-na-wa/</id><summary type="html">&lt;p&gt;&lt;img alt="Twilight" src="https://janithl.github.io/images/twilight.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Twilight&lt;/p&gt;

&lt;p&gt;I have been on a Makoto Shinkai binge this week. Even though I am usually
very selective and sparse with my media consumption, I had the fortune of
seeing &lt;em&gt;Kotonoha no Niwa&lt;/em&gt; (Garden of Words) at &lt;a href="https://medium.com/u/62e14a4a824e"&gt;Malinthe&lt;/a&gt;’s the weekend
before last, and I was hooked. 5 Centimetres per …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Twilight" src="https://janithl.github.io/images/twilight.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Twilight&lt;/p&gt;

&lt;p&gt;I have been on a Makoto Shinkai binge this week. Even though I am usually
very selective and sparse with my media consumption, I had the fortune of
seeing &lt;em&gt;Kotonoha no Niwa&lt;/em&gt; (Garden of Words) at &lt;a href="https://medium.com/u/62e14a4a824e"&gt;Malinthe&lt;/a&gt;’s the weekend
before last, and I was hooked. 5 Centimetres per Second had been on my
watchlist ever since &lt;a href="https://medium.com/u/5a8381932638"&gt;Dili&lt;/a&gt; showed me the gorgeous artwork, and I finally
got around to watching all three films over last weekend and finally watched
&lt;em&gt;Kimi no Na wa&lt;/em&gt; today.&lt;/p&gt;
&lt;p&gt;I know Shinkai gets a lot of flak for his characters not being 17-dimensional
and what not, but I think people miss the point a bit. Shinkai’s movies — the
way I felt them (as a complete novice) — are not about getting into the
individuals and their backstories, but rather about feelings and emotions that
transcend and are common to us all. To lift a metaphor from the movie, the
threads that bind us all.&lt;/p&gt;
&lt;p&gt;And the feels, oh do they come in waves. At the end of watching 5 Centimetres
I felt a sort of hollowness/longing that is difficult to explain. I had never
had a &lt;em&gt;“middle school girlfriend”&lt;/em&gt;. And yet, I don’t think that is what it’s
about. At least it wasn’t for me. It was about longing for a past that we will
never get back, a nostalgia that makes your lungs ache — for a time and place that
probably never existed. I can still remember the ocean breeze at my old school,
the golden rays of the afternoon sun, and the warm sand of the playground. We all
have our nostalgia, a fantasy world we try and escape to from our cold reality, and
I think Shinkai captures that emotion perfectly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Festival Night" src="https://janithl.github.io/images/festival-night.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;This scene. Her hair.&lt;/p&gt;

&lt;p&gt;The two previous Shinkai films I watched, however, did not quite prepare me for
the plot of &lt;em&gt;‘Kimi no Na wa’&lt;/em&gt;. There were moments in the film with so much raw emotion,
sadness, and shock that my hair was standing on end. The mid-movie plot twist (which I
won’t ruin for those of you who have yet to watch this masterpiece) made me stop, get up,
walk around to calm myself, and message Dili. I thought it was masterfully executed, and
I get why Dili raves about the originality of the story.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Musubi is the old way of calling the local guardian god. This word has profound meaning.
Tying thread is Musubi. Connecting people is Musubi. The flow of time is Musubi.&lt;/p&gt;
&lt;p&gt;These are all the god’s power. So the braided cords that we make are the god’s art and
represent the flow of time itself. They converge and take shape. They twist, tangle,
sometimes unravel, break, then connect again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Life itself can be summed up as threads flowing through time, couldn’t it? And to me that
was the imagery that struck with me the most. Our lives intersect, connect, diverge, and
flow along with each other’s. It is a recurring theme in Shinkai’s films, and to lift a
metaphor from &lt;em&gt;Kotonoha no Niwa&lt;/em&gt;, we are each ‘learning to walk’ in our own ways and our
own time.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://medium.com/@janithl/a-meditation-on-kimi-no-na-wa-3847eda33003"&gt;&lt;em&gt;Originally Posted on Medium&lt;/em&gt;&lt;/a&gt;. I have since watched &lt;em&gt;The Place Promised in Our Early Days&lt;/em&gt;,
&lt;em&gt;Children Who Chase Lost Voices&lt;/em&gt;, and some of Shinkai's short films as well. I eagerly await
&lt;em&gt;Weathering with You&lt;/em&gt;!&lt;/p&gt;</content><category term="biology"></category><category term="films"></category><category term="people"></category></entry></feed>