<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Janith's Blog</title><link href="https://janithl.github.io/" rel="alternate"></link><link href="https://janithl.github.io/feeds/all.atom.xml" rel="self"></link><id>https://janithl.github.io/</id><updated>2019-11-30T20:45:00+05:30</updated><entry><title>Going Digital</title><link href="https://janithl.github.io/2019/11/going-digital/" rel="alternate"></link><published>2019-11-30T20:45:00+05:30</published><updated>2019-11-30T20:45:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-11-30:/2019/11/going-digital/</id><summary type="html">&lt;p&gt;I've been eyeing a graphics tablet for a while now, and on 11.11 there was this gorgeous
&lt;a href="https://www.youtube.com/watch?v=JKcSVBTD2a4"&gt;Gaomon S620&lt;/a&gt; for just $22 (!!!) on AliExpress, an offer I simply couldn't refuse.
Well, the tab arrived in the mail today, and I want to share some of my experiments on
my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been eyeing a graphics tablet for a while now, and on 11.11 there was this gorgeous
&lt;a href="https://www.youtube.com/watch?v=JKcSVBTD2a4"&gt;Gaomon S620&lt;/a&gt; for just $22 (!!!) on AliExpress, an offer I simply couldn't refuse.
Well, the tab arrived in the mail today, and I want to share some of my experiments on
my first day of digital art!&lt;/p&gt;
&lt;p&gt;&lt;img alt="First Drawing" src="https://janithl.github.io/images/sketches/digital-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Second Drawing" src="https://janithl.github.io/images/sketches/digital-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The first few attempts (above) were predictably terrible, but I began realising that my
usual &lt;a href="https://janithl.github.io/2019/11/ive-been-sketching/"&gt;sketching&lt;/a&gt; and watercolouring techniques weren't the best match for the medium,
because digital was something else entirely! As I told Dili, "it's like working with clay,
I can mould this shit all day". And that was my lightbulb moment, the fact that I can
mould the light and shadows to create shapes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Drawing" src="https://janithl.github.io/images/sketches/digital-3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Drawing" src="https://janithl.github.io/images/sketches/digital-4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It's been a lot of fun, and this next piece took only 45 minutes. Having an undo button,
an eraser, and all the brushes in the world&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; is definitely expanding the possibilities
for my limited artistic ability. It's like giving FL Studio to a kid who wants to write
music but can't play an instrument&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Digital Drawing" src="https://janithl.github.io/images/sketches/digital-5.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; After a few more days (actually 3 days, because of travel) of playing with the
tablet, I'm happy to share two more #sadppls (as I used to call them). Say hello to
&lt;em&gt;Orange Guy&lt;/em&gt; and &lt;em&gt;Fail Girl&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Orange Guy" src="https://janithl.github.io/images/sketches/orange-guy.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fail Girl" src="https://janithl.github.io/images/sketches/fail-girl.jpg"&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Shout-out to &lt;a href="https://firealpaca.com"&gt;FireAlpaca&lt;/a&gt;, the awesome free editor I've been using to draw these.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;AKA me when I was 14!&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="design"></category><category term="people"></category></entry><entry><title>I've been sketching...</title><link href="https://janithl.github.io/2019/11/ive-been-sketching/" rel="alternate"></link><published>2019-11-27T08:15:00+05:30</published><updated>2019-11-27T08:15:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-11-27:/2019/11/ive-been-sketching/</id><summary type="html">&lt;h4&gt;I've been sketching at work...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-work.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;I've been sketching at home...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-home.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;I've sketched someone who looks like Jinora...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-jinora.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;And someone who looks like me...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-self.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Most are terrible...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-wtf2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-wtf1.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;But some, I'm quite proud of...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-g2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-g3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Especially this one 👇&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-g1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I got myself a set of cheap graphite sketching pencils from our lord and saviour …&lt;/p&gt;</summary><content type="html">&lt;h4&gt;I've been sketching at work...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-work.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;I've been sketching at home...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-home.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;I've sketched someone who looks like Jinora...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-jinora.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;And someone who looks like me...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-self.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Most are terrible...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-wtf2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-wtf1.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;But some, I'm quite proud of...&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-g2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-g3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Especially this one 👇&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sketch" src="https://janithl.github.io/images/sketches/sketches-g1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I got myself a set of cheap graphite sketching pencils from our lord and saviour
AliExpress. Since I don't Instagram anymore, this is just me showing off.&lt;/p&gt;</content><category term="design"></category><category term="people"></category></entry><entry><title>My take on doing 'Clean Architecture' in React (Part 2)</title><link href="https://janithl.github.io/2019/10/react-clean-architecture-part-2/" rel="alternate"></link><published>2019-10-14T08:28:00+05:30</published><updated>2019-10-14T08:28:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-10-14:/2019/10/react-clean-architecture-part-2/</id><summary type="html">&lt;p&gt;&lt;img alt="Core Folder Structure" src="https://janithl.github.io/images/clean-arch-folders.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://janithl.github.io/2019/10/react-clean-architecture-part-1/"&gt;In the last part&lt;/a&gt;, we broke the application core out, with layers for
entities, usecases, and infrastructure. The &lt;a href="https://github.com/janithl/react-clean-arch/tree/6224ee5f77b1398c41163ffedc78faf786962cc1"&gt;example code we used in the last
part (without breaking the core out) can be found on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now let's look at how we can implement the core. I will be using …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Core Folder Structure" src="https://janithl.github.io/images/clean-arch-folders.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://janithl.github.io/2019/10/react-clean-architecture-part-1/"&gt;In the last part&lt;/a&gt;, we broke the application core out, with layers for
entities, usecases, and infrastructure. The &lt;a href="https://github.com/janithl/react-clean-arch/tree/6224ee5f77b1398c41163ffedc78faf786962cc1"&gt;example code we used in the last
part (without breaking the core out) can be found on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now let's look at how we can implement the core. I will be using TypeScript
here because it has two things that we will make implementing Clean Architecture
much easier: types, and interfaces. &lt;a href="https://github.com/microsoft/TypeScript-React-Conversion-Guide"&gt;To add TypeScript to an existing React
project&lt;/a&gt;, we can simply run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn add -D typescript awesome-typescript-loader source-map-loader
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Entities&lt;/h3&gt;
&lt;p&gt;To separate out the core code from the rest of the app, so we'll first create a
subfolder called &lt;code&gt;core&lt;/code&gt;, with three subfolders for the Entity, Use Case, and
Infra layers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;src/core
├── entities
├── infrastructure
└── usecases
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inside the &lt;code&gt;entities&lt;/code&gt; subfolder, we'll first create the &lt;code&gt;Item&lt;/code&gt; class which holds
Item entities. This is a domain entity that will be used throughout the app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will also create an &lt;code&gt;ItemRepository&lt;/code&gt; interface that will enable us to abstract
out the API calls (and maybe local storage caching later on) which actually get
us the items.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./Item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ItemRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note how it is returning a Promise (with a list of Items), as it will be an async
operation.&lt;/p&gt;
&lt;h3&gt;Use Cases&lt;/h3&gt;
&lt;p&gt;Then, we implement the &lt;code&gt;UserService&lt;/code&gt;. We are implementing the service after defining
an interface because this will make writing tests etc. easier. There are arguments
against single implementation interfaces, but that is a debate for another time. The
service simply gets the items from the repository and returns them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../entities/Item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ItemRepository&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../entities/ItemRepository&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ItemService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ItemServiceImpl&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ItemService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;itemRepo&lt;/span&gt;: &lt;span class="kt"&gt;ItemRepository&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ir&lt;/span&gt;: &lt;span class="kt"&gt;ItemRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;itemRepo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ir&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;itemRepo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice how the constructor of the service takes an item repository. This is the runtime
injection of dependencies that makes this &lt;strong&gt;super exciting&lt;/strong&gt;. We can swap implementations
at runtime and the service has no hard dependencies on &lt;code&gt;infrastructure&lt;/code&gt; code, instead
relying on an interface defined at the &lt;code&gt;entity&lt;/code&gt; layer.&lt;/p&gt;
&lt;h3&gt;Infrastructure&lt;/h3&gt;
&lt;p&gt;Finally, we implement the &lt;code&gt;UserRepository&lt;/code&gt; we defined in the &lt;code&gt;entity&lt;/code&gt; layer. It will
just be a simple API call using &lt;code&gt;fetch()&lt;/code&gt;. We should add error handling here, but I've
left it out for now for the sake of simplicity.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../entities/Item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ItemRepository&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../entities/ItemRepository&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ItemDTO&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ItemRepositoryImpl&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ItemRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;jsonUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jsonUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;: &lt;span class="kt"&gt;ItemDTO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note how we are defining an &lt;code&gt;ItemDTO&lt;/code&gt; here. This is your contract with the API, and will
change with time. The following line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;: &lt;span class="kt"&gt;ItemDTO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is also very important. This is where the DTO is being mapped to a domain entity. We
can move this transformation to another file as our implementation grows in complexity,
as this code is on an architectural boundary and will change quite frequently.&lt;/p&gt;
&lt;h3&gt;All Together Now&lt;/h3&gt;
&lt;p&gt;We can now edit our Thunk to use the service instead of directly calling the API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;LIST_LOAD_REQUEST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;LIST_LOAD_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;LIST_LOAD_FAILURE&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./Item.types&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ItemServiceImpl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../core/usecases/ItemService&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ItemRepositoryImpl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../core/infrastructure/ItemRepositoryImpl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refreshList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LIST_LOAD_REQUEST&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemRepo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ItemRepositoryImpl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ItemServiceImpl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itemRepo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;itemService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LIST_LOAD_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LIST_LOAD_FAILURE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first three lines within the try hold the essence of any dependency injection setup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemRepo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ItemRepositoryImpl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, we initalise the repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ItemServiceImpl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itemRepo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, we inject it into the service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;itemService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And finally, we access the methods offered by the service.&lt;/p&gt;
&lt;p&gt;It's good to keep these steps explicitly defined, so that the flow is clear and can
be changed in the future.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;And that's it! We've taken our core out and implemented it in a completely isolated
fashion that doesn't depend on infrastructure concerns. This makes things nice and
testable (I'll try to add some tests to the repo soon!), and makes you think about
the parts of your code that can (and definitely will) change—and how to make sure
that change is contained.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the reason we do not put SQL in JSPs. This is the reason we do not generate
HTML in the modules that compute results. This is the reason that business rules
should not know the database schema. This is the reason we separate concerns.&lt;/p&gt;
&lt;p&gt;Another wording for the Single Responsibility Principle is: "Gather together the
things that change for the same reasons. Separate those things that change for
different reasons."&lt;/p&gt;
&lt;p&gt;If you think about this you’ll realize that this is just another way to define
cohesion and coupling. We want to increase the cohesion between things that change
for the same reasons, and we want to decrease the coupling between those things
that change for different reasons.&lt;/p&gt;
&lt;p&gt;— Uncle Bob&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;This series of posts is dedicated to &lt;a href="https://www.linkedin.com/in/mahasenbandara/"&gt;Mr. Mahasen Bandara&lt;/a&gt;, architect extraordinaire,
from whom I had the priviledge of learning about Robert C. Martin and architectural
boundaries and a ton of other architectural and programming practicies.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/react-clean-arch"&gt;&lt;strong&gt;The full code for this part can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="code"></category><category term="design"></category><category term="work"></category></entry><entry><title>My take on doing 'Clean Architecture' in React (Part 1)</title><link href="https://janithl.github.io/2019/10/react-clean-architecture-part-1/" rel="alternate"></link><published>2019-10-06T19:10:00+05:30</published><updated>2019-10-06T19:10:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-10-06:/2019/10/react-clean-architecture-part-1/</id><summary type="html">&lt;p&gt;&lt;img alt="Clean Architecture" src="https://janithl.github.io/images/clean-arch-diagram.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Clean Architecture, simplified.&lt;/p&gt;

&lt;p&gt;I'm a huge fan of Robert C. Martin's work in general, and &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;Clean Architecture&lt;/a&gt; in
particular. I'm frequently on the lookout for how to apply it to the different system
architectures and frameworks we work with.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Which modules should be decoupled? I think the rule is similar …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Clean Architecture" src="https://janithl.github.io/images/clean-arch-diagram.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Clean Architecture, simplified.&lt;/p&gt;

&lt;p&gt;I'm a huge fan of Robert C. Martin's work in general, and &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;Clean Architecture&lt;/a&gt; in
particular. I'm frequently on the lookout for how to apply it to the different system
architectures and frameworks we work with.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Which modules should be decoupled? I think the rule is similar to the previous
rule: &lt;em&gt;Any module that changes frequently should be decoupled from the rest of the
system.&lt;/em&gt; — Uncle Bob&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's a damn shame that most of the code we are told to write in guides and documentation
(often written by people who are heavily invested in the framework that the docs are
about) are very tightly coupled to the framework, libraries, and persistence implementation
(as well as the REST APIs that are called—how many of us have had to do system-wide
changes because the response object from the API changed?)&lt;/p&gt;
&lt;p&gt;Today, in part 1 of a 2 part series, I'll write a bit about what I think is a good way
to implement Clean Architecture in React JS and React Native apps&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;Why?&lt;/h3&gt;
&lt;p&gt;The advantages of switching to Clean Architecture are &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;listed out in detail on Uncle Bob's
blog&lt;/a&gt;, but I am going for three main objectives with regards to having this architecture
on our React app:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make the Core 100% testable:&lt;/strong&gt; All external dependencies (the UI, local storage,
   REST APIs etc) can be mocked out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Portability:&lt;/strong&gt; If we need to port the app to Vue JS tomorrow, the core can still
   be put there wholesale. We can also explore sharing the core between the frontend and
   backend (if your backend is written in Node or something).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prevent 'Change Propagation':&lt;/strong&gt; If the REST API's response object changes, or we
   change the caching mechanism, or any such change happens upstream of the final consumer
   (the UI), those changes should not cause changes downstream.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Keep in mind that one of the most important fundamentals of Clean Architecture is to
recognise where your architectural boundaries are, and to ensure that calls across those
boundaries are done using well defined interfaces and contracts. The response object
changing does not change the contract, since the core sets the contract and the code that
calls the API and parses its responses merely implements it. Your DTO is changing? It's
up to the API component to massage that into the existing domain entity, sorry.&lt;/p&gt;
&lt;h3&gt;Standard React async call architecture&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Standard React architecture" src="https://janithl.github.io/images/basic-react-arch.png"&gt;&lt;/p&gt;
&lt;p&gt;Okay, so this a very standard and common pattern when writing the most common kind of
interface, i.e. call an API, display some data in a component. You could be using Redux
for state, or React hooks, or component state, but this diagram barely changes because
in essence the user performs an action, which results in an API call, which updates the
state and hence the UI.&lt;/p&gt;
&lt;p&gt;Your component code would look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const ItemList = ({ items, refreshList }) =&amp;gt; (
  &amp;lt;div&amp;gt;
    &amp;lt;button onClick={refreshList}&amp;gt;Refresh&amp;lt;/button&amp;gt;
    &amp;lt;ul&amp;gt;
      {items.map(item =&amp;gt; (
        &amp;lt;li key={item.id}&amp;gt;{item.name}&amp;lt;/li&amp;gt;
      ))}
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It'll be hooked up to Redux using something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapStateToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;refreshList&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refreshList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;mapStateToProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt;
&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;ItemList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And I'd guess your Thunk (or Saga) would look a bit like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refreshList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;LIST_LOAD_REQUEST&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://your.api/listdata&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;LIST_LOAD_SUCCESS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;LIST_LOAD_FAILURE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty simple and familiar, right?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Let's break it&lt;/em&gt; 😈&lt;/p&gt;
&lt;h3&gt;Identifying boundaries&lt;/h3&gt;
&lt;p&gt;Now, I would like to start off by saying it would be unwise to try to break React
and whatever state management solution you use using Clean Architecture. Yes, it's
good to keep them isolated but I'd suggest using React patterns such as presentational
components and containers to do that—this is because Redux and the ilk are tightly
tied to React's Context API, and it would be a massive hassle to handle all that
complexity and coupling in our core. So let's keep it out.&lt;/p&gt;
&lt;p&gt;I'm thinking of having 3 major components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;UI:&lt;/strong&gt; This is in Infrastructure, and is basically React + Redux&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network and Persistence:&lt;/strong&gt; Also in Infrastructure. I am thinking of hiding the
   API complexity behind a repository interface, and to implement local storage for
   caching if necessary inside this repo implementation itself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application Core:&lt;/strong&gt; This is in the Use Case and Entity layers, and is where the
   magical business logic et al. happens.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The component diagram, in my head, looks a bit like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="React with Clean Architecture" src="https://janithl.github.io/images/clean-react-arch-1.png"&gt;&lt;/p&gt;
&lt;p&gt;But wait, where's are we calling the API and getting the data for items? We need to
include an &lt;code&gt;ItemRepository&lt;/code&gt; interface, and an implementation for it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="React with Clean Architecture, updated" src="https://janithl.github.io/images/clean-react-arch-2.png"&gt;&lt;/p&gt;
&lt;p&gt;This is one of the coolest things about &lt;a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle"&gt;Dependency Inversion&lt;/a&gt;, in that all the
arrows are flowing inwards. In this case, &lt;code&gt;ItemService&lt;/code&gt; depends on the interface
&lt;code&gt;ItemRepository&lt;/code&gt;—which is in the Entity layer—and not on its concrete implementation
which is on a lower layer and will only be injected during runtime. This has several
benefits, &lt;a href="https://janithl.github.io/2019/10/react-clean-architecture-part-2/"&gt;which we'll explore in the next part&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The overriding rule that makes this architecture work is The Dependency Rule. This
rule says that source code dependencies can only point inwards. Nothing in an inner
circle can know anything at all about something in an outer circle. In particular,
the name of something declared in an outer circle must not be mentioned by the code
in the an inner circle. That includes, functions, classes. variables, or any other
named software entity.&lt;/p&gt;
&lt;p&gt;By the same token, data formats used in an outer circle should not be used by an inner
circle, especially if those formats are generate by a framework in an outer circle. We
don’t want anything in an outer circle to impact the inner circles.&lt;/p&gt;
&lt;p&gt;— Uncle Bob&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/react-clean-arch/tree/6224ee5f77b1398c41163ffedc78faf786962cc1"&gt;&lt;strong&gt;The full code for this part can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;With or without Redux (or Redux-like) state management&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="design"></category><category term="work"></category></entry><entry><title>On-Premise CloudWatch Metrics with AWS CLI</title><link href="https://janithl.github.io/2019/10/cloudwatch-metrics-aws-cli/" rel="alternate"></link><published>2019-10-02T21:16:00+05:30</published><updated>2019-10-02T21:16:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-10-02:/2019/10/cloudwatch-metrics-aws-cli/</id><summary type="html">&lt;p&gt;&lt;img alt="Have you tried AWS CLI?" src="https://janithl.github.io/images/aws-cli.jpg"&gt;&lt;/p&gt;
&lt;p&gt;CloudWatch is pretty cool, and looking at a metrics dashboard and setting up
alarms is pretty badass—especially when you're not a full-time DevOps and
don't have the time to worry about your &lt;em&gt;monitoring solution&lt;/em&gt; in addition to
the thing it's &lt;em&gt;supposed&lt;/em&gt; to look after.&lt;/p&gt;
&lt;p&gt;If you're running some of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Have you tried AWS CLI?" src="https://janithl.github.io/images/aws-cli.jpg"&gt;&lt;/p&gt;
&lt;p&gt;CloudWatch is pretty cool, and looking at a metrics dashboard and setting up
alarms is pretty badass—especially when you're not a full-time DevOps and
don't have the time to worry about your &lt;em&gt;monitoring solution&lt;/em&gt; in addition to
the thing it's &lt;em&gt;supposed&lt;/em&gt; to look after.&lt;/p&gt;
&lt;p&gt;If you're running some of your stuff outside AWS (cue gasps), &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-on-premise.html"&gt;CloudWatch agent&lt;/a&gt;
is supposed to have you covered, but after following the instructions to a
tee, I found that it wasn't doing what it said on the tin, and the agent was
refusing to start&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Anyhoo, I was running out of time and I absolutely had to get this very simple
metric into CloudWatch, and after 2 days of losing sleep and trying to make
the agent work, I gave up. Thankfully, the ever reliable &lt;a href="https://aws.amazon.com/cli/"&gt;AWS CLI&lt;/a&gt; was
there to pick me up.&lt;/p&gt;
&lt;p&gt;It turns out a simple &lt;code&gt;aws cloudwatch put-metric-data&lt;/code&gt; is all you need to push
metrics to CloudWatch. There's actually &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html"&gt;an entire doc on it&lt;/a&gt;, which I only
found while writing this post.&lt;/p&gt;
&lt;h3&gt;The Setup&lt;/h3&gt;
&lt;p&gt;You need to make sure you have a IAM role set up with the ability to push
metrics to CloudWatch, which is &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/create-iam-roles-for-cloudwatch-agent.html"&gt;covered in the CloudWatch agent docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For my setup, I just wanted to send the disk utilisation to CloudWatch, so I
created a shell script that looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;freeSpace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;df -m &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;NR==2{print $4}&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
/usr/local/bin/aws cloudwatch put-metric-data --metric-name my-server-FreeDisk &lt;span class="se"&gt;\&lt;/span&gt;
--value &lt;span class="nv"&gt;$freeSpace&lt;/span&gt; --unit Megabytes --namespace my-server --profile AmazonCloudWatchAgent
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, I am using the &lt;code&gt;--profile&lt;/code&gt; flag to select the correct IAM user, which has
been added to my AWS &lt;code&gt;credentials&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;The shell script was simply called every 5 minutes from a cron job, and I had the
whole setup up and running in no time. You can also do fancy stuff like sending in
entire JSON files, which will surely come in handy if you want to work with Docker
stats etc.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Some issue about the instance not having an EC2 identifier, which—&lt;em&gt;duh&lt;/em&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="work"></category></entry><entry><title>A basic terrain generator in Go (Part 4)</title><link href="https://janithl.github.io/2019/09/go-terrain-gen-part-4/" rel="alternate"></link><published>2019-09-21T17:21:00+05:30</published><updated>2019-09-21T17:21:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-09-21:/2019/09/go-terrain-gen-part-4/</id><summary type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-3/"&gt;In the last part&lt;/a&gt;, we added fancy output code, and our output looks like
this now:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output with colours" src="https://janithl.github.io/images/go-terrain-gen/p4-output-initial.png"&gt;&lt;/p&gt;
&lt;p&gt;...which, if you've ever seen a map, isn't what terrain actually looks like.
The terrain around peaks tend to be at a similar height, and there is rarely
the random patchwork of heights we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-3/"&gt;In the last part&lt;/a&gt;, we added fancy output code, and our output looks like
this now:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output with colours" src="https://janithl.github.io/images/go-terrain-gen/p4-output-initial.png"&gt;&lt;/p&gt;
&lt;p&gt;...which, if you've ever seen a map, isn't what terrain actually looks like.
The terrain around peaks tend to be at a similar height, and there is rarely
the random patchwork of heights we see here. So let's fix that!&lt;/p&gt;
&lt;p&gt;But first...&lt;/p&gt;
&lt;h3&gt;Visualise Steps&lt;/h3&gt;
&lt;p&gt;Wouldn't it be cool to see how the terrain gets generated layer by layer
from the highest elevation to the lowest? Let's change our &lt;code&gt;Generate()&lt;/code&gt;
method to allow us to view this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewSteps&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// rand needs to be seeded, so we set the current&lt;/span&gt;
    &lt;span class="c1"&gt;// nanosecond timestamp as the seed&lt;/span&gt;
    &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;// iterate down from max elevation, assigning vals&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if the element has already been assigned, skip it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// if the random value meets our criteria, it&amp;#39;s a peak&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// if viewSteps is true, we print every step of the generation process,&lt;/span&gt;
        &lt;span class="c1"&gt;// sleep for a second, and clear the screen for the next step&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;viewSteps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;clear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's also add it as a CLI flag in our &lt;code&gt;main.go&lt;/code&gt; so that the user can
turn it on when they want.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;height of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;width of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;levels of elevation on the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;peaks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;percentage probability a peak will randomly appear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;steps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;show the generation steps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;terrainMap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we can compile and run with the &lt;code&gt;--steps&lt;/code&gt; flag to view our little
generator in action:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output with steps" src="https://janithl.github.io/images/go-terrain-gen/p4-output-steps.gif"&gt;&lt;/p&gt;
&lt;p&gt;Groovy! 💃🏽&lt;/p&gt;
&lt;h3&gt;Neighbours&lt;/h3&gt;
&lt;p&gt;Like we discussed before, the map elements next to peaks need to be at a similar
height. My logic for this part is going to be: &lt;em&gt;if the element next to you is at
elevation e, then your elevation is e - 1&lt;/em&gt;. To take a really simple example,
elevation values would look like this around a peak:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Elevation values" src="https://janithl.github.io/images/go-terrain-gen/p4-elevation-values.png"&gt;&lt;/p&gt;
&lt;p&gt;We'll refine this later (adding cliffs!), but for now, it looks like we need to
find if you have an element adjacent to you at an elevation &lt;code&gt;e&lt;/code&gt;, so we'll define
a new unexported method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// adjacentElevation checks if an adjacent element&lt;/span&gt;
&lt;span class="c1"&gt;// to the given element (h, w) is at a given elevation&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;adjacentElevation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go's &lt;code&gt;Min()&lt;/code&gt; and &lt;code&gt;Max()&lt;/code&gt; methods, as provided by &lt;a href="https://golang.org/pkg/math/"&gt;the &lt;code&gt;math&lt;/code&gt; package&lt;/a&gt;, work with
&lt;code&gt;float64&lt;/code&gt; numbers, so we'll also define two simple private functions to work with
&lt;code&gt;int&lt;/code&gt;s and get min and max values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, let's modify the &lt;code&gt;Generate()&lt;/code&gt; method to use &lt;code&gt;adjacentElevation()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Generate generates the terrain map&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewSteps&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// rand needs to be seeded, so we set the current&lt;/span&gt;
    &lt;span class="c1"&gt;// nanosecond timestamp as the seed&lt;/span&gt;
    &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;// iterate down from max elevation, assigning vals&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if the element has already been assigned, skip it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// if the element is next to a element with elevation x, it&lt;/span&gt;
                &lt;span class="c1"&gt;// should get elevation x - 1&lt;/span&gt;
                &lt;span class="c1"&gt;// alternately, if the random value meets our criteria, it&amp;#39;s a peak&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;adjacentElevation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// if viewSteps is true, we print every step of the generation process,&lt;/span&gt;
        &lt;span class="c1"&gt;// sleep for a second, and clear the screen for the next step&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;viewSteps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;clear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's compile and run it!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output with adjacents" src="https://janithl.github.io/images/go-terrain-gen/p4-output-with-adjacent.gif"&gt;&lt;/p&gt;
&lt;p&gt;I think it's starting to look a lot like a real map now. 🗺&lt;/p&gt;
&lt;h3&gt;Cliffs&lt;/h3&gt;
&lt;p&gt;We know that in the real world, mountains aren't all shaped like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gradual" src="https://janithl.github.io/images/go-terrain-gen/p4-gradual.png"&gt;&lt;/p&gt;
&lt;p&gt;Sometimes, they look like this too:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gradual" src="https://janithl.github.io/images/go-terrain-gen/p4-cliff.png"&gt;&lt;/p&gt;
&lt;p&gt;Also, things are looking a wee bit too boxy, so let's add some randomness in the
form of a &lt;strong&gt;cliff probability&lt;/strong&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; to the &lt;code&gt;fullMap&lt;/code&gt; struct and the &lt;code&gt;NewFullMap()&lt;/code&gt;
function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cliffProbability&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="nx"&gt;elements&lt;/span&gt;                                                    &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// NewFullMap returns a new terrain map&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cliffProbability&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;cliffProbability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cliffProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We'll also edit &lt;code&gt;main.go&lt;/code&gt; to take &lt;code&gt;--cliffs&lt;/code&gt; as a CLI flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;height of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;width of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;levels of elevation on the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;peaks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;percentage probability a peak will randomly appear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;cliffProbability&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cliffs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;percentage probability a cliff will randomly appear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;steps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;show the generation steps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;terrainMap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;cliffProbability&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's now edit &lt;code&gt;adjacentElevation()&lt;/code&gt; to use cliffProbability:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;adjacentElevation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if this element is *not* randomly a cliff, return true&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cliffProbability&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, now to compile and run:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output with cliffs" src="https://janithl.github.io/images/go-terrain-gen/p4-output-cliffs.png"&gt;&lt;/p&gt;
&lt;p&gt;Woo! 🥂 That looks much more realistic, and by tweaking around the
peak and cliff probabilities, and the number of elevation levels, we
can get maps that looks really nice.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So that concludes this long (and I hope &lt;em&gt;educational&lt;/em&gt;) series on using
Go to write a simple terrain generator on the CLI. I hope you enjoyed
following along as much as I enjoyed coding and writing about it!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/go-terrain-gen/tree/master/part4"&gt;&lt;strong&gt;The full code, as always, can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Just like our old friend &lt;strong&gt;peak probability&lt;/strong&gt;, this is the random
percentage of the probability of an element being a cliff.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="golang"></category></entry><entry><title>A basic terrain generator in Go (Part 3)</title><link href="https://janithl.github.io/2019/09/go-terrain-gen-part-3/" rel="alternate"></link><published>2019-09-19T20:49:00+05:30</published><updated>2019-09-19T20:49:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-09-19:/2019/09/go-terrain-gen-part-3/</id><summary type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-2/"&gt;In the last part&lt;/a&gt;, we refactored the code and added CLI flags. The output
right now looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Compile and Output After Flags" src="https://janithl.github.io/images/go-terrain-gen/p2-output-3.png"&gt;&lt;/p&gt;
&lt;p&gt;It doesn't really give us a sense of what the terrain looks like, though. Let's
change that.&lt;/p&gt;
&lt;h3&gt;Unicode&lt;/h3&gt;
&lt;p&gt;Unicode has some &lt;a href="https://en.wikipedia.org/wiki/Block_Elements"&gt;nice characters&lt;/a&gt; that can help us here. The ones we're …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-2/"&gt;In the last part&lt;/a&gt;, we refactored the code and added CLI flags. The output
right now looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Compile and Output After Flags" src="https://janithl.github.io/images/go-terrain-gen/p2-output-3.png"&gt;&lt;/p&gt;
&lt;p&gt;It doesn't really give us a sense of what the terrain looks like, though. Let's
change that.&lt;/p&gt;
&lt;h3&gt;Unicode&lt;/h3&gt;
&lt;p&gt;Unicode has some &lt;a href="https://en.wikipedia.org/wiki/Block_Elements"&gt;nice characters&lt;/a&gt; that can help us here. The ones we're
going to use today are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;U+2591      ░       Light shade
U+2592      ▒       Medium shade
U+2593      ▓       Dark shade
U+2588      █       Full block
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can update the &lt;code&gt;Print()&lt;/code&gt; function to use these new shade blocks. We've also
added a space to get the "no shade" effect.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mapShades&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;░&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;▒&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;▓&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;█&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// print out map&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// print a space (black) if elevation is zero&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// get the approximate shade nearest to the elevation number&lt;/span&gt;
            &lt;span class="nx"&gt;elementShade&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapShades&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;// get its index&lt;/span&gt;
            &lt;span class="nx"&gt;shadeIndex&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementShade&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="c1"&gt;// print out the corresponding unicode char&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapShades&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;shadeIndex&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// print a newline&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go takes its types very seriously, so someone coming from a dynamically typed
language like PHP or Javascript might be a bit confused. But trust me, it is well
worth the trouble to specify all the type conversions manually, as the compiler
helps you find bugs with data types that would otherwise plague you at runtime.&lt;/p&gt;
&lt;p&gt;Let's compile and run it!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output after shades" src="https://janithl.github.io/images/go-terrain-gen/p3-output-shades.png"&gt;&lt;/p&gt;
&lt;p&gt;Very cool. I think it gives a good idea of how bad the generation algorithm
currently looks. 😅&lt;/p&gt;
&lt;h3&gt;Colour&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code#Colors"&gt;Terminals support colour&lt;/a&gt;, and all you got to do is send an ANSI escape
sequence&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; with your output. The colours I want to use are blue and cyan
for the sea and shallows, and green and yellow for the fields and mountains.
We'll modify &lt;code&gt;Print()&lt;/code&gt; to add these and output the codes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mapColours&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// blue, cyan, green, yellow&lt;/span&gt;
    &lt;span class="nx"&gt;mapShades&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;░&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;▒&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;▓&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;█&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// print out map&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// print a space (black) if elevation is zero&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// get the approximate colour nearest to the elevation number&lt;/span&gt;
            &lt;span class="nx"&gt;elementColour&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapColours&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;// get the colour index&lt;/span&gt;
            &lt;span class="nx"&gt;colourIndex&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementColour&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="c1"&gt;// get the approximate shade within that colour&lt;/span&gt;
            &lt;span class="nx"&gt;elementShade&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementColour&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementColour&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapShades&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;// get its index&lt;/span&gt;
            &lt;span class="nx"&gt;shadeIndex&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementShade&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="c1"&gt;// print out the corresponding ANSI code and unicode char&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\033[%dm%s\033[0m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapColours&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;colourIndex&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;mapShades&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;shadeIndex&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// print a newline&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We first get the colour index, and then get the shade index within that
colour. Let's compile and run it with the same flags as before:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output after colours" src="https://janithl.github.io/images/go-terrain-gen/p3-output-colours.png"&gt;&lt;/p&gt;
&lt;p&gt;Fabulous! ❤️💚💙&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Being able to visualise your output is an important part of building any
program (which is a reason wireframes exist, I guess). With the graphics sorted,
&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-4/"&gt;our next improvements&lt;/a&gt; to the system&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; will be more apparent when we
implement them.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/go-terrain-gen/tree/master/part3"&gt;&lt;strong&gt;The full code for this part can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I learned this only &lt;em&gt;yesterday&lt;/em&gt;! &lt;a href="https://rosettacode.org/wiki/Terminal_control/Coloured_text#Go"&gt;Rosetta Code&lt;/a&gt; has code on how it's
done in all the languages.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;I'm planning to cover assigning values to elements near the peaks, and
how introducing a bit of randomness will help make things more realistic.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="golang"></category></entry><entry><title>A basic terrain generator in Go (Part 2)</title><link href="https://janithl.github.io/2019/09/go-terrain-gen-part-2/" rel="alternate"></link><published>2019-09-18T07:28:00+05:30</published><updated>2019-09-18T07:28:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-09-18:/2019/09/go-terrain-gen-part-2/</id><summary type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-1/"&gt;In the last part&lt;/a&gt;, we explored how to set up what was basically a matrix and
randomly assign elevation values to it. In this part, I wanted to explore how to deal
with assigning values to the elements adjacent to the peaks, and how to display
the map to users …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-1/"&gt;In the last part&lt;/a&gt;, we explored how to set up what was basically a matrix and
randomly assign elevation values to it. In this part, I wanted to explore how to deal
with assigning values to the elements adjacent to the peaks, and how to display
the map to users in a more intuitive way than a bunch of numbers.&lt;/p&gt;
&lt;p&gt;But...&lt;/p&gt;
&lt;p&gt;The code that we wrote on a single file in the previous part has global variables and
is all written in a single method, and this would get unmaintainable fast. Let's
first explore some of the nice features Go offers to help refactor this code.&lt;/p&gt;
&lt;h3&gt;Go modules&lt;/h3&gt;
&lt;p&gt;We have all our code in a &lt;code&gt;main.go&lt;/code&gt; file in our home directory. There used to be
a special folder to keep all the Go files called &lt;code&gt;$GOPATH&lt;/code&gt;, but as of &lt;a href="https://golang.org/doc/go1.13"&gt;Go 1.13&lt;/a&gt; this
is deprecated, and we can now initialise Go modules anywhere to maintain our
code. I've found &lt;a href="https://www.kablamo.com.au/blog/2018/12/10/just-tell-me-how-to-use-go-modules"&gt;this super simple guide to Go modules&lt;/a&gt; handy whenever I want
to use them.&lt;/p&gt;
&lt;p&gt;So, first, we move our &lt;code&gt;main.go&lt;/code&gt; file to a folder of our choosing. I want to put all
of the code in this part and the others as separate modules on Github, so I'm going
to name this module &lt;code&gt;github.com/janithl/go-terrain-gen/part2&lt;/code&gt;, to keep
things short and unambiguous. 😜&lt;/p&gt;
&lt;p&gt;&lt;img alt="Go Mod Init" src="https://janithl.github.io/images/go-terrain-gen/p2-go-mod-init.png"&gt;&lt;/p&gt;
&lt;p&gt;If we open up our &lt;code&gt;go.mod&lt;/code&gt; file, we can find that it's very sparse right now since
we don't have any dependencies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;module github.com/janithl/go-terrain-gen/part2

go 1.12
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Multiple files&lt;/h3&gt;
&lt;p&gt;I don't want to keep all the terrain generator logic inside &lt;code&gt;main.go&lt;/code&gt;, so let's first
try to separate them out into two files.&lt;/p&gt;
&lt;p&gt;&lt;img alt="File Layout" src="https://janithl.github.io/images/go-terrain-gen/p2-file-layout-1.png"&gt;&lt;/p&gt;
&lt;p&gt;We move most of our app code into a different file, and a different package
called &lt;code&gt;terrain&lt;/code&gt;. Since in Go, you have to keep packages in their different folders,
we move the code into the &lt;code&gt;terrain&lt;/code&gt; folder, and name the file &lt;code&gt;terrain.go&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;terrain&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;math/rand&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

&lt;span class="c1"&gt;// we set the random chance of a peak occuring to 5%&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;

&lt;span class="c1"&gt;// Generate generates the terrain map&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// rand needs to be seeded, so we set the current&lt;/span&gt;
    &lt;span class="c1"&gt;// nanosecond timestamp as the seed&lt;/span&gt;
    &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;// iterate down from max elevation, assigning vals&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if the element has already been assigned, skip it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// if the random value meets our criteria, it&amp;#39;s a peak&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Print prints the terrain map out&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// print out map&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This leaves our &lt;code&gt;main.go&lt;/code&gt; file wonderfully sparse, and it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;github.com/janithl/go-terrain-gen/part2/terrain&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty neat, right? Let's execute it!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output" src="https://janithl.github.io/images/go-terrain-gen/p2-output-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Boom! 🎆&lt;/p&gt;
&lt;h3&gt;Encapsulate&lt;/h3&gt;
&lt;p&gt;I don't like the structure of &lt;code&gt;terrain.go&lt;/code&gt; right now, it's got stuff hanging around
and it's not very flexible (you can't even set the height and width of the map) and
extensible. Let's explore Go's &lt;a href="https://gobyexample.com/structs"&gt;structs&lt;/a&gt; and &lt;a href="https://gobyexample.com/methods"&gt;methods&lt;/a&gt; to make things cleaner.
We'll also use Go's &lt;a href="https://gobyexample.com/slices"&gt;slices&lt;/a&gt; to make the map resizeable at runtime.&lt;/p&gt;
&lt;p&gt;The fullMap struct will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="nx"&gt;elements&lt;/span&gt;                                  &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also add a function to construct a new fullMap&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// NewFullMap returns a new terrain map&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note how the height and the width of the map can be set dynamically now, in
addition to the levels of elevation and the peak probability.&lt;/p&gt;
&lt;p&gt;We can now rewrite the &lt;code&gt;Generate()&lt;/code&gt; and &lt;code&gt;Print()&lt;/code&gt; functions to work with the
new fullMap struct, which is pretty straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Generate generates the terrain map&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// rand needs to be seeded, so we set the current&lt;/span&gt;
    &lt;span class="c1"&gt;// nanosecond timestamp as the seed&lt;/span&gt;
    &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;// iterate down from max elevation, assigning vals&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if the element has already been assigned, skip it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// if the random value meets our criteria, it&amp;#39;s a peak&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Print prints the terrain map out&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// print out map&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;a href="https://github.com/janithl/go-terrain-gen/blob/master/part2/terrain/terrain.go"&gt;full code can be seen here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, the &lt;code&gt;main.go&lt;/code&gt; file will look a bit different, but this allows us
greater control over how the map is generated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;github.com/janithl/go-terrain-gen/part2/terrain&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's run it:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output After Refactor" src="https://janithl.github.io/images/go-terrain-gen/p2-output-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Yass! 🙌🏾&lt;/p&gt;
&lt;h3&gt;Add Some Flags&lt;/h3&gt;
&lt;p&gt;We can add some &lt;a href="https://gobyexample.com/command-line-flags"&gt;CLI flags&lt;/a&gt; to expose these newly added features to users.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;flag&amp;quot;&lt;/span&gt;

    &lt;span class="s"&gt;&amp;quot;github.com/janithl/go-terrain-gen/part2/terrain&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;height of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;width of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;levels of elevation on the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;peaks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;percentage probability a peak will randomly appear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;terrainMap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To run it, let's first build it with &lt;code&gt;go build&lt;/code&gt;, and point the output to the
&lt;code&gt;bin&lt;/code&gt; directory, and then execute with the CLI flags:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Compile and Output After Flags" src="https://janithl.github.io/images/go-terrain-gen/p2-output-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;bin/terrain --help&lt;/code&gt; returns the usage details:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Usage of bin/terrain:
  -elev int
        levels of elevation on the map (default 9)
  -height int
        height of the map (default 16)
  -peaks int
        percentage probability a peak will randomly appear (default 5)
  -width int
        width of the map (default 16)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty neat, Golang! 👏🏽👏🏽👏🏽&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I know this was supposed to be an exciting installment where we were going to
implement new features, but sometimes&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;, cleaning up the code you already have
is just as rewarding. It also makes adding new features easier and less prone to
bugs. &lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-3/"&gt;In the next part&lt;/a&gt;, we'll explore adding better visualisation for our map.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/go-terrain-gen/tree/master/part2"&gt;&lt;strong&gt;The full code for this part can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Note how I am returning the struct itself instead of my usual practice of
returning a pointer to the struct. This was due to &lt;a href="https://philpearl.github.io/post/bad_go_pointer_returns/"&gt;this post by Phil Pearl&lt;/a&gt;,
which taught me that it's more efficient to just return the struct itself.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Especially with a &lt;em&gt;beautiful&lt;/em&gt; language like Go. 😍&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="golang"></category></entry><entry><title>A basic terrain generator in Go (Part 1)</title><link href="https://janithl.github.io/2019/09/go-terrain-gen-part-1/" rel="alternate"></link><published>2019-09-17T21:12:00+05:30</published><updated>2019-09-17T21:12:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-09-17:/2019/09/go-terrain-gen-part-1/</id><summary type="html">&lt;p&gt;I haven't gushed about Go much on this blog&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, but I thought of writing a
small series of posts on a little piece of code I cooked up while I was
supposed to be doing other, more important things&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;Concept&lt;/h3&gt;
&lt;p&gt;So I was sitting there, zoning out and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I haven't gushed about Go much on this blog&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, but I thought of writing a
small series of posts on a little piece of code I cooked up while I was
supposed to be doing other, more important things&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;Concept&lt;/h3&gt;
&lt;p&gt;So I was sitting there, zoning out and browsing &lt;a href="https://www.reddit.com/r/CitiesSkylines/"&gt;one of my favourite subreddits&lt;/a&gt;,
when I thought about how terrain can be generated. And I thought if we were to
take a flat plane that sliced through the mountains at progressively decreasing
heights, you'd first get a few isolated spots (the peaks of the mountains), and on
the next iteration you'd always have the areas adjacent to these peaks showing up
(because mountain tops don't float in thin air).&lt;/p&gt;
&lt;p&gt;Computationally, if the map was a 2D array, we could randomly set a few elements
as peaks, and then generate the rest of the mountain around those "peak" elements.
Of course, with each iteration you would also have the possibility of running into
peaks that weren't high enough to be captured at the earlier iteration, so we
should keep randomly sprinkling peaks among the (not already assigned) elements
in the map.&lt;/p&gt;
&lt;h3&gt;Pseudocode&lt;/h3&gt;
&lt;p&gt;The pseudocode for the most basic version would look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# map initialised to 0s
map[height][width]

for elevation &amp;lt;- 5 to 0
    for h &amp;lt;- 0 to height
        for w &amp;lt;- 0 to width
            # if element is already assigned value, skip
            if map[h][w] &amp;gt; 0
                continue

            # if array element next to higher elevation
            # or picked as a peak randomly
            if map[h][w] next to elevation + 1 or random()
                map[h][w] &amp;lt;- elevation
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Seems simple enough, right?&lt;/p&gt;
&lt;h3&gt;Go Implementation&lt;/h3&gt;
&lt;p&gt;The initialisations, loops and randomly picking an element to be a peak (and
printing the result out) seem straightforward enough, so let's get those out
of the way first and create our &lt;code&gt;main.go&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;math/rand&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

&lt;span class="c1"&gt;// we set the random chance of a peak occuring to 5%&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// rand needs to be seeded, so we set the current&lt;/span&gt;
    &lt;span class="c1"&gt;// nanosecond timestamp as the seed&lt;/span&gt;
    &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;// iterate down from max elevation, assigning vals&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if the element has already been&lt;/span&gt;
                &lt;span class="c1"&gt;// assigned, skip it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// if the random value meets our criteria,&lt;/span&gt;
                &lt;span class="c1"&gt;// it&amp;#39;s a peak&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// print out map&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We run the code with &lt;code&gt;go run main.go&lt;/code&gt;, and get the following output:&lt;/p&gt;
&lt;p&gt;&lt;img alt="First Iteration" src="https://janithl.github.io/images/iteration-1.png"&gt;&lt;/p&gt;
&lt;p&gt;To quote Chernobyl&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;, it's "Not great, not &lt;em&gt;terrible&lt;/em&gt;".&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-2/"&gt;In the next part&lt;/a&gt; we'll look at a quick and dirty way to implement a
way to look at elements adjacent to our current element (the part of our
pseudocode that we didn't implement), and assign values to it—and better
visualisation of the terrain map.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/go-terrain-gen/tree/master/part1"&gt;&lt;strong&gt;The full code for this part can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Mostly because this blog has been &lt;em&gt;inactive&lt;/em&gt; for the last 2 years, but
more on that in a later post.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;My biggest gripe about my otherwise perfect workplace is that I don't
get to write Go for a living.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Which I haven't watched yet! 🙈&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="golang"></category></entry><entry><title>A meditation on ‘Kimi no Na wa’</title><link href="https://janithl.github.io/2019/07/kimi-no-na-wa/" rel="alternate"></link><published>2019-07-23T16:31:00+05:30</published><updated>2019-07-23T16:31:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-07-23:/2019/07/kimi-no-na-wa/</id><summary type="html">&lt;p&gt;&lt;img alt="Twilight" src="https://janithl.github.io/images/twilight.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Twilight&lt;/p&gt;

&lt;p&gt;I have been on a Makoto Shinkai binge this week. Even though I am usually
very selective and sparse with my media consumption, I had the fortune of
seeing &lt;em&gt;Kotonoha no Niwa&lt;/em&gt; (Garden of Words) at &lt;a href="https://medium.com/u/62e14a4a824e"&gt;Malinthe&lt;/a&gt;’s the weekend
before last, and I was hooked. 5 Centimetres per …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Twilight" src="https://janithl.github.io/images/twilight.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Twilight&lt;/p&gt;

&lt;p&gt;I have been on a Makoto Shinkai binge this week. Even though I am usually
very selective and sparse with my media consumption, I had the fortune of
seeing &lt;em&gt;Kotonoha no Niwa&lt;/em&gt; (Garden of Words) at &lt;a href="https://medium.com/u/62e14a4a824e"&gt;Malinthe&lt;/a&gt;’s the weekend
before last, and I was hooked. 5 Centimetres per Second had been on my
watchlist ever since &lt;a href="https://medium.com/u/5a8381932638"&gt;Dili&lt;/a&gt; showed me the gorgeous artwork, and I finally
got around to watching all three films over last weekend and finally watched
&lt;em&gt;Kimi no Na wa&lt;/em&gt; today.&lt;/p&gt;
&lt;p&gt;I know Shinkai gets a lot of flak for his characters not being 17-dimensional
and what not, but I think people miss the point a bit. Shinkai’s movies — the
way I felt them (as a complete novice) — are not about getting into the
individuals and their backstories, but rather about feelings and emotions that
transcend and are common to us all. To lift a metaphor from the movie, the
threads that bind us all.&lt;/p&gt;
&lt;p&gt;And the feels, oh do they come in waves. At the end of watching 5 Centimetres
I felt a sort of hollowness/longing that is difficult to explain. I had never
had a &lt;em&gt;“middle school girlfriend”&lt;/em&gt;. And yet, I don’t think that is what it’s
about. At least it wasn’t for me. It was about longing for a past that we will
never get back, a nostalgia that makes your lungs ache — for a time and place that
probably never existed. I can still remember the ocean breeze at my old school,
the golden rays of the afternoon sun, and the warm sand of the playground. We all
have our nostalgia, a fantasy world we try and escape to from our cold reality, and
I think Shinkai captures that emotion perfectly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Festival Night" src="https://janithl.github.io/images/festival-night.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;This scene. Her hair.&lt;/p&gt;

&lt;p&gt;The two previous Shinkai films I watched, however, did not quite prepare me for
the plot of &lt;em&gt;‘Kimi no Na wa’&lt;/em&gt;. There were moments in the film with so much raw emotion,
sadness, and shock that my hair was standing on end. The mid-movie plot twist (which I
won’t ruin for those of you who have yet to watch this masterpiece) made me stop, get up,
walk around to calm myself, and message Dili. I thought it was masterfully executed, and
I get why Dili raves about the originality of the story.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Musubi is the old way of calling the local guardian god. This word has profound meaning.
Tying thread is Musubi. Connecting people is Musubi. The flow of time is Musubi.&lt;/p&gt;
&lt;p&gt;These are all the god’s power. So the braided cords that we make are the god’s art and
represent the flow of time itself. They converge and take shape. They twist, tangle,
sometimes unravel, break, then connect again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Life itself can be summed up as threads flowing through time, couldn’t it? And to me that
was the imagery that struck with me the most. Our lives intersect, connect, diverge, and
flow along with each other’s. It is a recurring theme in Shinkai’s films, and to lift a
metaphor from &lt;em&gt;Kotonoha no Niwa&lt;/em&gt;, we are each ‘learning to walk’ in our own ways and our
own time.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://medium.com/@janithl/a-meditation-on-kimi-no-na-wa-3847eda33003"&gt;&lt;em&gt;Originally Posted on Medium&lt;/em&gt;&lt;/a&gt;. I have since watched &lt;em&gt;The Place Promised in Our Early Days&lt;/em&gt;,
&lt;em&gt;Children Who Chase Lost Voices&lt;/em&gt;, and some of Shinkai's short films as well. I eagerly await
&lt;em&gt;Weathering with You&lt;/em&gt;!&lt;/p&gt;</content><category term="biology"></category><category term="films"></category><category term="people"></category></entry><entry><title>Cliff Notes</title><link href="https://janithl.github.io/2019/07/cliff-notes/" rel="alternate"></link><published>2019-07-04T22:17:00+05:30</published><updated>2019-07-04T22:17:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-07-04:/2019/07/cliff-notes/</id><summary type="html">&lt;p&gt;&lt;img alt="Mountains" src="https://janithl.github.io/images/mountains.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It doesn’t go away. None of it does. No matter how kind or forgiving
you are, the stains of the &lt;em&gt;‘bad times’&lt;/em&gt; stay on like fountain pen
ink on white fabric, refusing to budge. All they need is some mild
reoccurrence to go full-on #ThrowbackThursday&lt;/p&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;p&gt;Am I a bad …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Mountains" src="https://janithl.github.io/images/mountains.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It doesn’t go away. None of it does. No matter how kind or forgiving
you are, the stains of the &lt;em&gt;‘bad times’&lt;/em&gt; stay on like fountain pen
ink on white fabric, refusing to budge. All they need is some mild
reoccurrence to go full-on #ThrowbackThursday&lt;/p&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;p&gt;Am I a bad person? Was she a bad person? Do we tell each other that
we’re good people to avoid the painful truth that maybe we weren’t
good to each other? That we did things that were downright mean, but
always with the cover of “but I &lt;em&gt;meant&lt;/em&gt; well”.
&lt;em&gt;Cetanaham bhikkhave kammam vadami,&lt;/em&gt; but does the intent lessen the
pain of the person suffering?&lt;/p&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You always seem to attract the destructive type.&lt;/p&gt;
&lt;p&gt;— a very good friend I haven’t kept in touch with enough&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;p&gt;People rarely are what they seem on the surface, and that includes yourself.
You know, it doesn’t matter how good your unit test suite is if the train
tracks don’t line up and your integrations fail? It’s the same with people.
No matter how much you think you know yourself, it takes deep, meaningful
and prolonged interaction with another to know what you’re &lt;em&gt;really&lt;/em&gt; like.&lt;/p&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;p&gt;Do you ever worry that they’ll never appreciate you for who you are? That
you’ll never match up to the version of you in their heads? That they’ll
never know the &lt;em&gt;why&lt;/em&gt; of your quirks and your ideals, or worse, they’ll
never &lt;em&gt;care&lt;/em&gt;?&lt;/p&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The sad reality is that [he] has gone head first completely into this.
Willingly. He doesn’t want to get out. He just wants it to conform to his liking.&lt;/p&gt;
&lt;p&gt;We might see from here that these two aren’t compatible but the fact it until
they decide to let go, we can scream blue murder but it’s not going to do anything.&lt;/p&gt;
&lt;p&gt;[He] has not reached his breaking point. Until then all we can do is commiserate,
love him when he cries, and hope this works out.&lt;/p&gt;
&lt;p&gt;— a very good friend that I thankfully get to see every week or two&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Esto Perpetua&lt;/em&gt;. I only got to attend that good school for two years, but the
motto will always stay with me because it spoke to my soul. Be thou forever.
Don’t be afraid to be your own true self, warts and all. Life is too short to
be constantly feel like you’re walking on eggshells, hiding away parts of your
&lt;em&gt;being&lt;/em&gt;, and isolating yourself from the people and activities that meant things
to you. Nothing, and no one, is worth that.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://medium.com/@janithl/cliff-notes-509ed8429695"&gt;&lt;em&gt;Originally Posted on Medium&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="biology"></category><category term="conflict"></category><category term="people"></category><category term="sexuality"></category></entry><entry><title>The future wasn’t supposed to be this way</title><link href="https://janithl.github.io/2019/06/the-future-wasnt-supposed-to-be-this-way/" rel="alternate"></link><published>2019-06-08T21:47:00+05:30</published><updated>2019-06-08T21:47:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-06-08:/2019/06/the-future-wasnt-supposed-to-be-this-way/</id><summary type="html">&lt;p&gt;Romeo was a Montegue, the powerful ruling clan. Juliet was a Capulet,
a member of a minority (and yet, a privileged minority in many ways).&lt;/p&gt;
&lt;p&gt;Romeo adored Juliet. They had rarely spoken, but he was an ardent
follower of her work since his teens. He was very much smitten, amazed …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Romeo was a Montegue, the powerful ruling clan. Juliet was a Capulet,
a member of a minority (and yet, a privileged minority in many ways).&lt;/p&gt;
&lt;p&gt;Romeo adored Juliet. They had rarely spoken, but he was an ardent
follower of her work since his teens. He was very much smitten, amazed
at how every word she laid down on paper seemed to emanate a softness,
a warmth, a humanity — a deep love and kindness that he saw reflected
in her eyes whenever they rarely did meet.&lt;/p&gt;
&lt;p&gt;And in those years of quiet romance from afar, the Capulets went through
their fair share of trials. They were branded traitors to the nation, a
force hell bent on bringing down the Montegues from within. Two-tongued
and devious, driven by a long-term ideology and short-term niceties. A
fifth-column that has waited patiently for centuries for its chance to strike.&lt;/p&gt;
&lt;p&gt;Romeo saw parallels though. He saw the same humanity he saw within his
Montegue friends within Juliet and the dozens of other Capulet friends
he had. He felt that they were all being taken for a ride by those within
the clans that wished for nothing but conflict, for conflict was profitable.
The silent and peaceful (and yet very mistrusting) masses being led for a
ride by those who hogged the limelight, the radicals, the firebrands, the
ones who could easily call for the head of anyone sane who stood up to
them and for common humanity.&lt;/p&gt;
&lt;p&gt;This wasn’t how the future was supposed to look. We were supposed to be the
post-war generation which had learned lessons which were never to be repeated.
We grew up in our multi-cultural schools and with friends from all over. We
had an internet to connect us, Snapchat filters to unite us, a soundtrack of
our youth that we shared with kids from America. Where did it all go so
horribly wrong?&lt;/p&gt;
&lt;p&gt;Romeo was tired of reality, and very much wished that Juliet was the one
penning the story instead, with that familiar softness, warmth, and humanity
emanating from every word.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://medium.com/@janithl/the-future-wasnt-supposed-to-be-this-way-3184203e3902"&gt;&lt;em&gt;Originally Posted on Medium&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="biology"></category><category term="conflict"></category><category term="people"></category><category term="politics"></category><category term="religion"></category></entry><entry><title>Kottu Kontainers</title><link href="https://janithl.github.io/2019/02/kottu-kontainers/" rel="alternate"></link><published>2019-02-02T15:57:00+05:30</published><updated>2019-02-02T15:57:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-02-02:/2019/02/kottu-kontainers/</id><summary type="html">&lt;p&gt;Remember &lt;a href="https://kottu.org"&gt;Kottu&lt;/a&gt;? Those were the days. Anyway,
&lt;a href="https://github.com/janithl/Kottu2012"&gt;Kottu has always been a totally open-source project&lt;/a&gt;, and theoretically
it is as easy as cloning the git repo and... jumping a few hoops to set it
up on your own local machine or VPS.&lt;/p&gt;
&lt;p&gt;Except... the loops are tedious and there’s …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Remember &lt;a href="https://kottu.org"&gt;Kottu&lt;/a&gt;? Those were the days. Anyway,
&lt;a href="https://github.com/janithl/Kottu2012"&gt;Kottu has always been a totally open-source project&lt;/a&gt;, and theoretically
it is as easy as cloning the git repo and... jumping a few hoops to set it
up on your own local machine or VPS.&lt;/p&gt;
&lt;p&gt;Except... the loops are tedious and there’s a bunch of things that could go
wrong. There must be a better way, right?&lt;/p&gt;
&lt;p&gt;Enter &lt;a href="https://www.docker.com"&gt;Docker&lt;/a&gt;. It promises to solve one of the oldest complaints in
Computer Science, namely "it works on &lt;em&gt;my&lt;/em&gt; machine". I’ve been using Docker
at work for the past 6 months (hat tip to the wonderful &lt;a href="https://github.com/malitta"&gt;Malitta Nanayakkara&lt;/a&gt;
for getting me the job AND teaching me the basics of Docker) and my mind has
been simply blown away by how simple and effective it is, and how I barely
have to think about dependencies and reproducible environments anymore.&lt;/p&gt;
&lt;p&gt;I won't get into the background of Docker and how it works, but there’s this
&lt;a href="https://towardsdatascience.com/learn-enough-docker-to-be-useful-b7ba70caeb4b"&gt;wonderful series by Jeff Hale if you’re so inclined&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Step 1: Clone the Repo&lt;/h3&gt;
&lt;p&gt;It’s been almost over 2 years since I last messed with the Kottu source code,
so it’s naturally no longer on my machine. I run a git clone and download the
repo.&lt;/p&gt;
&lt;p&gt;I look through the instructions and they basically go like “run kottu.sql on
the mysql server which you *obviously* have running on your machine
(&lt;code&gt;#LAMPBoise&lt;/code&gt;) and then copy this into your webroot, update the config, and bam!
Kottu for the whole kadey!”.&lt;/p&gt;
&lt;p&gt;But we’re in 2019 and no one is stupid enough to run mysql and Apache on their
machines like that. I’m not even on Linux anymore! (&lt;strong&gt;the HORROR&lt;/strong&gt;! 21 year old
me writing Kottu would’ve spit in disgust if he knew I use a Mac now.)&lt;/p&gt;
&lt;h3&gt;Step 2: Look around the web for a docker-compose.yml file to hijack&lt;/h3&gt;
&lt;p&gt;No one &lt;em&gt;writes&lt;/em&gt; software anymore, we just copy paste snippets from a thousand
blog posts and StackOverflow answers, cobble it together, and pray it works.&lt;/p&gt;
&lt;p&gt;I found two articles on this setup, one from &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-laravel-nginx-and-mysql-with-docker-compose"&gt;DigitalOcean&lt;/a&gt; (excellent
resource) which is a bit Laravel-focused, and one from the
&lt;a href="http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm"&gt;Geeky Platypus blog&lt;/a&gt; which was more generic. Kottu is custom PHP, and the
Geeky Platypus &lt;code&gt;docker-compose.yml&lt;/code&gt; file was cleaner, so I used it as the base
with some bits pulled from the DigitalOcean guide. Note that both use nginx and
not Apache because we’re civilised human beings nowadays.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;

&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;webserver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx:alpine&lt;/span&gt;
    &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8000:80&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.:/var/www&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./docker/nginx/site.conf:/etc/nginx/conf.d/default.conf&lt;/span&gt;
    &lt;span class="nt"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;internal&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default&lt;/span&gt;
  &lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql:5.7&lt;/span&gt;
    &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3306:3306&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;kottu&lt;/span&gt;
      &lt;span class="nt"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;your_mysql_root_password&lt;/span&gt;
    &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./docker/dbdata:/var/lib/mysql/&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./docker/mysql/my.cnf:/etc/mysql/my.cnf&lt;/span&gt;
    &lt;span class="nt"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;internal&lt;/span&gt;
  &lt;span class="nt"&gt;php&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;php:5.6-fpm&lt;/span&gt;
    &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.&lt;/span&gt;
      &lt;span class="nt"&gt;dockerfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./docker/php/Dockerfile&lt;/span&gt;
    &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.:/var/www&lt;/span&gt;
    &lt;span class="nt"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;internal&lt;/span&gt;

&lt;span class="nt"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bridge&lt;/span&gt;
  &lt;span class="nt"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;host&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, there’s a bit to digest here:&lt;/p&gt;
&lt;p&gt;We’re creating three services that work together, namely webserver, php and db.
The webserver is straight up garden variety nginx running on Alpine Linux, which
is very popular for Docker images because of the tiny size. It is exposing port
&lt;code&gt;8000&lt;/code&gt; (traditional Kottu port) on Localhost, and directing traffic from there
to the standard &lt;code&gt;80&lt;/code&gt; port.&lt;/p&gt;
&lt;p&gt;The root directory of the repo is being mounted on &lt;code&gt;/var/www&lt;/code&gt;, and a nginx conf
file we have inside our Docker folder is being set as the &lt;code&gt;default.conf&lt;/code&gt; for
nginx. More on this conf file (and networking) later.&lt;/p&gt;
&lt;p&gt;The db service is based on a standard &lt;code&gt;mysql 5.7&lt;/code&gt; image&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, exposing the
standard mysql port of &lt;code&gt;3306&lt;/code&gt;, and with some env variables for setting the
database name and root password. We also mount a conf file and a data folder
so that database data is persisted across container restarts (internal container
data is by definition ephemeral, so if we don’t do this we will lose our data
if the container is ever down’d).&lt;/p&gt;
&lt;p&gt;The php service also has the repo root mounted to &lt;code&gt;/var/www&lt;/code&gt; (so that that most
important mama of all files, &lt;code&gt;index.php&lt;/code&gt; can be accessed), but there are some
additional dependencies we want to install not included in the standard
&lt;code&gt;php:5.6-fpm&lt;/code&gt; image it is based on, so we include a custom &lt;code&gt;Dockerfile&lt;/code&gt; (more
on that later). The DigitalOcean guide has port &lt;code&gt;9000&lt;/code&gt; being exposed by the php
container and everything, but I found that was unnecessary (and the Geeky
Platypus doesn’t use it either) so we don’t use that here.&lt;/p&gt;
&lt;h3&gt;Step 3: Networking&lt;/h3&gt;
&lt;p&gt;I’ve skipped talking about networking because networking in Docker deserves its
own blog post, really. The example in the setup we have above, though, is a good
starting point to talk about the amazeballs planet that is Docker networking.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Now, it is standard knowledge that not all services should be exposed to the
public internet. Ideally, we’d only expose things like SSH and the webserver
to incoming traffic. Everything else traditionally sits behind a firewall. With
this Docker Compose setup though, we have created two different networks which
serve our purpose much better than any finicky firewall rules would.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Networking" src="https://janithl.github.io/images/kottu/networking.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Internet traffic can enter the default network and hence
nginx, but it cannot enter the internal network.&lt;/p&gt;

&lt;p&gt;In our dual-network setup, internet traffic can access nginx through the external
(default) network (which uses the host driver, which allows it to 
&lt;a href="https://docs.docker.com/network/network-tutorial-host"&gt;bind directly to the Docker host’s network&lt;/a&gt;), but cannot access the internal
bridge network. nginx, which sits on both the default and internal networks, can
use the internal network to communicate with php and mysql.&lt;/p&gt;
&lt;p&gt;Note that this works for HTTP traffic (as our nginx container only exposes port
&lt;code&gt;80&lt;/code&gt;), but on the server you might use something like
&lt;a href="https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion"&gt;docker-letsencrypt-nginx-proxy-companion&lt;/a&gt; to make life easier (and support
HTTPS). It takes care of SSL certs and all that. You will have to replace the
default network in the compose file with the nginx-proxy network, attach the
webserver service to it, and add the &lt;code&gt;VIRTUAL_HOST&lt;/code&gt;, &lt;code&gt;LETSENCRYPT_HOST&lt;/code&gt;, 
&lt;code&gt;LETSENCRYPT_EMAIL&lt;/code&gt; env variables to make proxy companion pick up the hostname
and the certificates you need.&lt;/p&gt;
&lt;h3&gt;Step 4: PHP Dockerfile&lt;/h3&gt;
&lt;p&gt;We need to install the mysql client and the &lt;code&gt;PDO_Mysql&lt;/code&gt; PHP extension on the php
service, so we’ll create a Dockerfile for that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FROM php:5.6-fpm

# install dependencies
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y mysql-client

# install php extensions
RUN docker-php-ext-install pdo_mysql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I later found out that none of the images on Kottu were showing up and it’s because
Timthumb (yes, Kottu &lt;em&gt;still&lt;/em&gt; uses Timthumb, please don’t hack us!) needs &lt;code&gt;GD&lt;/code&gt;, which
wasn’t installed. So let’s add those lines to the file too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Install GD and it&amp;#39;s dependencies

RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
libfreetype6-dev \
libjpeg62-turbo-dev \
libpng-dev \
&amp;amp;&amp;amp; docker-php-ext-install -j$(nproc) iconv \
&amp;amp;&amp;amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \
&amp;amp;&amp;amp; docker-php-ext-install -j$(nproc) gd
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Step 5: The mysql and nginx conf files&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;my.cnf&lt;/code&gt; is so basic that it doesn’t even deserve mentioning, but obviously you can
add more configurations here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[mysqld]
general_log = 1
general_log_file = /var/lib/mysql/general.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;site.conf&lt;/code&gt; file for nginx is your standard nginx + php site config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.php&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;error_log&lt;/span&gt;  &lt;span class="s"&gt;/var/log/nginx/error.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri/&lt;/span&gt; &lt;span class="s"&gt;/index.php&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;\.php$&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;fastcgi_split_path_info&lt;/span&gt; &lt;span class="s"&gt;^(.+\.php)(/.+)&lt;/span&gt;$&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;fastcgi_pass&lt;/span&gt; &lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;fastcgi_index&lt;/span&gt; &lt;span class="s"&gt;index.php&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;fastcgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;fastcgi_param&lt;/span&gt; &lt;span class="s"&gt;SCRIPT_FILENAME&lt;/span&gt; &lt;span class="nv"&gt;$document_root$fastcgi_script_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;fastcgi_param&lt;/span&gt; &lt;span class="s"&gt;PATH_INFO&lt;/span&gt; &lt;span class="nv"&gt;$fastcgi_path_info&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It tells nginx to listen for traffic on port 80, make &lt;code&gt;/var/www&lt;/code&gt; the web root, try to
find static files for the paths that visitors are trying to access, and then redirect
those requests to &lt;code&gt;index.php&lt;/code&gt; if that fails, and pass php requests to &lt;code&gt;php:9000&lt;/code&gt; (which
means port &lt;code&gt;9000&lt;/code&gt; in the php service).&lt;/p&gt;
&lt;h3&gt;Step 6: Rock ’n’ Roll&lt;/h3&gt;
&lt;p&gt;We now get to say the magic words:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker-compose up -d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Containers Starting" src="https://janithl.github.io/images/kottu/containers-starting.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Ah, satisfaction...&lt;/p&gt;

&lt;p&gt;After the images and dependencies are downloaded and the containers are set up, a
&lt;code&gt;docker ps&lt;/code&gt;&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt; will reveal that three new containers have spun up and we’re ready
to roll. We direct our web browser to &lt;code&gt;localhost:8000&lt;/code&gt;, and...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Database Issue" src="https://janithl.github.io/images/kottu/database-issue.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Victo- &lt;em&gt;oh god!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Whoops, we still need to import the database. But fear not, that’s pretty easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker-compose exec php bash
root@3836dc148c6a:/var/www/html# cd ..
root@3836dc148c6a:/var/www# ls
LICENSE  README.md  cache  config.php  docker  docker-compose.yml  html  img  index.php  kottu.sql  lib  static  templates  webcache
root@3836dc148c6a:/var/www# mysql -h db -u root -pyour_mysql_root_password kottu &amp;lt; kottu.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I just bash’d into the container, ran the mysql client&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4"&gt;4&lt;/a&gt;&lt;/sup&gt; (remember installing that
via the Dockerfile earlier?) and redirected &lt;code&gt;kottu.sql&lt;/code&gt; (which holds the database
schema) into it. Now, things still look empty but not broken:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Empty Kottu" src="https://janithl.github.io/images/kottu/empty-kottu.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Did you guys know that Flickr still exists?&lt;/p&gt;

&lt;h3&gt;Step 7: Add a blog and fetch its posts&lt;/h3&gt;
&lt;p&gt;Let’s go to the Kottu Baas admin interface, which most people haven’t seen. Get
ready for some Web 2.0 super secure shit, yo.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Admin Login" src="https://janithl.github.io/images/kottu/admin-login.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Like all great login forms from 2012, the password is
SHA-1 hashed on the clientside itself! SEKURITEEH.&lt;/p&gt;

&lt;p&gt;After entering the default username/password combo of indi/indi, we are inside
the &lt;em&gt;uh-may-zin&lt;/em&gt; admin interface:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Admin Interface" src="https://janithl.github.io/images/kottu/admin-interface.png"&gt;&lt;/p&gt;
&lt;p&gt;We click “add a blog” and a &lt;strong&gt;POPUP&lt;/strong&gt; shows up! How wizard is that?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Adding Blogs" src="https://janithl.github.io/images/kottu/add-blog.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;The copyright being stuck in 2012 is just apt!&lt;/p&gt;

&lt;p&gt;In my bout of narcissism, I add my own blog and navigate to
&lt;code&gt;localhost:8000/admin/feedget/&amp;lt;secretkey&amp;gt;&lt;/code&gt;, and voila:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fetching Feeds" src="https://janithl.github.io/images/kottu/fetching-feeds.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;backendsecretkeywithunicorns! SEKURITEEH.&lt;/p&gt;

&lt;p&gt;Aaaand, finally:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kottu working" src="https://janithl.github.io/images/kottu/kottu-working.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Even Timthumb works, uguise. :')&lt;/p&gt;

&lt;p&gt;And there we have it. Now you’ve got your own piece of 2012 tech running a
personalised version of Kottu on Docker! Next week, we cover how Kubern—&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;p&gt;Okay, this post isn’t the most comprehensible piece of writing I’ve done. It
feels rushed and under-explained, and yet resulted in a very long post. The
topics covered honestly require blog posts of their own, and time permitting,
I would do one or two over the course of the year. But here’s a start. And it
feels like a Friday night (and half of Saturday) well-spent setting up an ancient
piece of code on Docker&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6"&gt;6&lt;/a&gt;&lt;/sup&gt;, so that it becomes at least a tad more accessible.&lt;/p&gt;
&lt;p&gt;I think I need to attach a fair warning: &lt;strong&gt;DON’T RUN THIS IN PROD, FOLKS&lt;/strong&gt;. It’s
from 2012 and has security holes the size of the Mariana Trench in it, and it’s
a miracle that kottu.org still continues to run&lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7"&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://medium.com/@janithl/kottu-kontainers-c3c9833ecf65"&gt;&lt;em&gt;Originally Posted on Medium&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Another really cool thing about Docker that I missed mentioning in the post
is the ability to run different versions of, say, mysql or php (as your apps
need them) on different containers. This is really helpful if you have a bunch
of old code that can only run on an older version of php/python/whatever...&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Docker networking is seriously amazing, and they do things like adding
iptables records to make it possible. I would recommend reading the
&lt;a href="https://docs.docker.com/network/"&gt;Network section&lt;/a&gt; of the Docker docs.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Docker has some really cool commands that help you administer everything.
Some of my favourites are:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker ps&lt;/code&gt; — lists all the running containers&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker stats&lt;/code&gt; — container stats&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker-compose logs -f&lt;/code&gt; — logs from all the containers in the compose file&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker network ls&lt;/code&gt; — lists networks&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;A sharp-eyed reader might ask: "why not just run the mysql client from the
&lt;code&gt;exec&lt;/code&gt; command?". Well, I tried that and it gives some weird tty error that
I remember once solving, but I forgot how. This bash/mysql method described
here works without issue.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;This is a joke. I don't know Kubernetes. Who does, really? &lt;code&gt;¯\_(ツ)_/¯&lt;/code&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;I updated the repo and its README with how to do a Docker setup!&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;Hat tip to the mysterious maintainer who set up nginx and LetsEncrypt SSL
certs on the Kottu server!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Turns out it was trusty ol' &lt;a href="https://github.com/malinthe"&gt;Malinthe&lt;/a&gt;!&amp;#160;&lt;a class="footnote-backref" href="#fnref:7" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="docker"></category></entry><entry><title>Life is a [WIP]</title><link href="https://janithl.github.io/2019/01/life-is-a-wip/" rel="alternate"></link><published>2019-01-27T16:31:00+05:30</published><updated>2019-01-27T16:31:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-01-27:/2019/01/life-is-a-wip/</id><summary type="html">&lt;p&gt;&lt;img alt="Earthrise" src="https://janithl.github.io/images/earthrise.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Credits to the &lt;em&gt;incredible&lt;/em&gt; Frank Borman, Jim Lovell, and William Anders&lt;/p&gt;

&lt;p&gt;I recently read an article about &lt;a href="https://en.wikipedia.org/wiki/Hard_determinism"&gt;Hard Determinism&lt;/a&gt;, the theory that there
is no free will, and that given the initial values of things like the physical
constants (the speed of light, the gravitational constant &lt;em&gt;G&lt;/em&gt; etc), a universe …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Earthrise" src="https://janithl.github.io/images/earthrise.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Credits to the &lt;em&gt;incredible&lt;/em&gt; Frank Borman, Jim Lovell, and William Anders&lt;/p&gt;

&lt;p&gt;I recently read an article about &lt;a href="https://en.wikipedia.org/wiki/Hard_determinism"&gt;Hard Determinism&lt;/a&gt;, the theory that there
is no free will, and that given the initial values of things like the physical
constants (the speed of light, the gravitational constant &lt;em&gt;G&lt;/em&gt; etc), a universe
would evolve, and of it matter, and of it sentient beings, and of those beings
one would inevitably be sitting in a tuk at a petrol shed typing out these words,
and another would be sitting somewhere reading them just life you. It’s the idea
that everything has been decided ahead of time, and we’re merely playing our parts
in a grand cosmic script over which we have no control.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; hope that’s &lt;strong&gt;not&lt;/strong&gt; the case, and it doesn’t sit well with one of my
(admittedly few) very strongly held beliefs: that each individual, and only s/he,
can determine their reality and the story they write of their lives.&lt;/p&gt;
&lt;p&gt;But, &lt;em&gt;boy oh boy&lt;/em&gt; does it feel like you don’t have a choice sometimes.&lt;/p&gt;
&lt;p&gt;For me, personally, the biggest factor keeping me from living life the way I want
to live it is &lt;em&gt;obligations&lt;/em&gt;; I feel very strongly about words I’ve given, or
responsibilities someone has entrusted in me. I go to insane lengths sometimes to
keep my word, putting my own welfare and happiness in jeopardy, and feel intense
guilt when you inevitably fail sometimes to fulfill that obligation.&lt;/p&gt;
&lt;p&gt;This might sound like a innocuous enough problem to have, but it isn’t. I often end
up in situations which range from the awkward to the borderline hazardous because I
don’t set realistic expectations, set boundaries, or don’t say no enough.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This post has no grand message, but I’ve had a shitty month so far, and:&lt;br&gt;
a) &lt;a href="https://alifeofsaturdays.wordpress.com/2019/01/27/reasons-not-to-write/"&gt;Adilah’s lovely post about excuses not to write&lt;/a&gt;, and&lt;br&gt;
b) &lt;a href="https://thamara.blog/expectations-97685dd85811"&gt;Thamara’s about managing expectations&lt;/a&gt;, made me just want to get this out of my system. 🤷&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/@janithl/life-is-a-wip-e4b911ae1a7d"&gt;&lt;em&gt;Originally Posted on Medium&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="biology"></category><category term="work"></category></entry><entry><title>A brief history of my ‘work music’</title><link href="https://janithl.github.io/2019/01/a-brief-history-of-my-work-music/" rel="alternate"></link><published>2019-01-09T10:44:00+05:30</published><updated>2019-01-09T10:44:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-01-09:/2019/01/a-brief-history-of-my-work-music/</id><summary type="html">&lt;h3&gt;2011: Live Forever — Oasis&lt;/h3&gt;
&lt;p&gt;These were the heady days of youthful exuberance, when any idea seemed
like it was worth pursuing — all the world’s problems could be solved
with code, y’know? — and the internet was new, exciting, and as yet
relatively uncommercialised. I was going through a major …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;2011: Live Forever — Oasis&lt;/h3&gt;
&lt;p&gt;These were the heady days of youthful exuberance, when any idea seemed
like it was worth pursuing — all the world’s problems could be solved
with code, y’know? — and the internet was new, exciting, and as yet
relatively uncommercialised. I was going through a major Britpop phase
and this anthem seemed to best capture the spirit of the age.&lt;/p&gt;
&lt;iframe width="640" height="480" src="https://www.youtube.com/embed/i_2mWhfOhGU"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p class="text-center"&gt;My favourite member of the band was obviously Guigsy, the bassist.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Maybe you’re the same as me&lt;br&gt;
We see things they’ll never see&lt;br&gt;
You and I are gonna live forever&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There were no limits back then, no wary old voice at the back of your
head saying &lt;em&gt;“someone must’ve written a library for this before”&lt;/em&gt;, or
&lt;em&gt;“if this is worth anything Google would’ve done it already”.&lt;/em&gt; Bus route
finders and blog aggregators just sprung up, with hopelessly naive yet
somehow (barely) functioning code that got the job done.&lt;/p&gt;
&lt;h3&gt;2012: A Certain Romance — Arctic Monkeys&lt;/h3&gt;
&lt;p&gt;My final year of uni was happening, and there was a real chance of me failing.&lt;/p&gt;
&lt;p&gt;In retrospect, this might’ve been an overreaction to the statement by a
lecturer that last year’s batch had done awfully, and half had flunked their
finals. But I was fed up of the years of uni I’d already been through, and
wanted to finally be a salaryman. No chances were hence taken, and no quarter
given. From the end of the day’s lecturers right up until 8 PM when the library
closed down, I would be in there studying. Every. Single. Day.&lt;/p&gt;
&lt;p&gt;There were some perks. Pretty librarians, and even prettier girls. Nothing
(obviously) came of it, but I got introduced to a lot of good music: Hendrix,
Clapton, and the Monkeys from Sheffield. I still consider their debut album
— chronicling a night out clubbing— one of the finest ever crafted. Alex Turner
was barely 20 at the time.&lt;/p&gt;
&lt;iframe width="700" height="393" src="https://www.youtube.com/embed/RyEiRKJJr6A"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p class="text-center"&gt;Alex ❤&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Well over there, there’s friends of mine&lt;br&gt;
What can I say? I’ve known ’em for a long long time&lt;br&gt;
And yeah they might overstep the line&lt;br&gt;
But I just cannot get angry in the same way&lt;br&gt;
Not in the same way&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh, and I passed. :)&lt;/p&gt;
&lt;h3&gt;2017: Don’t Stop — Fleetwood Mac&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Was it even a &lt;strong&gt;break up&lt;/strong&gt; if you didn’t listen to &lt;strong&gt;Rumours&lt;/strong&gt;
by &lt;strong&gt;Fleetwood Mac&lt;/strong&gt; at least 6 times?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was trudging through my second job like a British tax inspector through a cold
thunderstorm. The project I was working through had been through 6 weeks of hell
and back — all to deliver a product that would’ve taken &lt;em&gt;n&lt;/em&gt; number of weeks in
&lt;em&gt;half the time&lt;/em&gt;, all because it had been sold to the client as something that
could be done.&lt;/p&gt;
&lt;p&gt;Everyone involved in that sales pitch had disappeared, and a team of mostly
greenhorns had to spend late nights and weekends, clocking up 100-hour weeks for
this impossible goal. There was a week where I had spent 6 midnights in a row at
the office. We’d go home at 2 AM (on a good day) and be back at work at 9 AM for
the morning client call with the team in Brisbane.&lt;/p&gt;
&lt;p&gt;As 2017 ended, and I spent Christmas ‘holidays’ in an empty office working, my
mind was set on quitting as soon as possible. The only thing keeping me going
were the breakup songs playing through my tinny headset.&lt;/p&gt;
&lt;iframe width="700" height="393" src="https://www.youtube.com/embed/QV9JJmSCiI8"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p class="text-center"&gt;Everyone needs some of that coke in their lives.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you wake up and don’t want to smile&lt;br&gt;
If it takes just a little while&lt;br&gt;
Open your eyes and look at the day&lt;br&gt;
You’ll see things in a different way&lt;/p&gt;
&lt;p&gt;Don’t stop thinking about tomorrow&lt;br&gt;
Don’t stop, it’ll soon be here&lt;br&gt;
It’ll be, better than before&lt;br&gt;
Yesterday’s gone, yesterday’s gone&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;2018: Renu Renu — Rookantha Gunathilake&lt;/h3&gt;
&lt;p&gt;2018 was an year of catharsis in many ways. I was able to leave my second job
and transition to my third, work with a group of people whom I enjoy being
around, and work at my own pace. I listen to a lot of Rookantha and &lt;a href="https://soundcloud.com/tags/synthwave"&gt;Synthwave&lt;/a&gt;
these days, when I need to get deep work done and block out the distractions of the
co-working space we operate out of.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Renu Renu&lt;/em&gt; is the 7th track from Roo’s seminal 1988 release &lt;a href="https://itunes.apple.com/lk/album/bambara-pahasa/1440268046"&gt;&lt;em&gt;Bambara Pahasa&lt;/em&gt;&lt;/a&gt;.
With such evergreen hits like the title track, the patriotic anthem &lt;em&gt;Indunil Gangulel&lt;/em&gt;,
&lt;em&gt;Sithin Sina Sisi&lt;/em&gt; (one of my favourite love songs ever), &lt;em&gt;Anatha Maruthe&lt;/em&gt;,
&lt;em&gt;Suwanda Dena Mal Wane&lt;/em&gt; and &lt;em&gt;Lande Mula Wee&lt;/em&gt;, the &lt;em&gt;Bambara Pahasa&lt;/em&gt; cassette (which I
grew up listening to) marked a high point in the Sri Lankan popular music industry.&lt;/p&gt;
&lt;p&gt;One year later, its greatest ever songwriter Premakeerthi de Alwis was killed in the
midst of an extremely gruesome war between Marxist insurgents and government death squads
that were ready to match and amplify the savagery, marking the start of a slow but steady
decline in both the commercial reach and the artistic achievements of the industry.&lt;/p&gt;
&lt;p&gt;As for the work itself — it isn’t the most exciting in the world. I’m no longer working
with the latest cutting-edge tech and writing code in a language that came out 6 months
ago and Babel transpiles into 16 different varieties of Javascript, but sometimes
&lt;em&gt;boring is good&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This beautiful track is like 3-songs-in-one. Also, Rupavahini should bring back
Saxophonists in naval suits.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;රේණු රේණු මල් මිටේ රේණු&lt;br&gt;
ඈට පෙම් කරන්න මට බෑලු&lt;br&gt;
රන් සමනල තටු මට ලැබෙන්නෙ නෑලු&lt;br&gt;
රොන් පිරී සැලෙන්න මල් රේණු&lt;/p&gt;
&lt;p&gt;සඳවත දෝ මා දුටුවේ&lt;br&gt;
ඔබෙ ගත දෝ මා දුටුවේ&lt;br&gt;
සිතුවම් දෝ මා දුටුවේ&lt;br&gt;
හැබැහින් දෝ ඔබ දුටුවේ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Bambara Pahasa Album Cover" src="https://janithl.github.io/images/bambara-pahasa.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Greatest Sri Lankan album cover design ever?&lt;/p&gt;

&lt;hr&gt;
&lt;p&gt;&lt;a href="https://medium.com/@janithl/a-brief-history-of-my-work-music-2efd190619e8"&gt;&lt;em&gt;Originally Posted on Medium&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="music"></category><category term="uni"></category><category term="work"></category></entry><entry><title>Some things I wish I knew as a young startup dev</title><link href="https://janithl.github.io/2018/06/some-things-i-wish-i-knew-as-a-young-startup-dev/" rel="alternate"></link><published>2018-06-08T19:17:00+05:30</published><updated>2018-06-08T19:17:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2018-06-08:/2018/06/some-things-i-wish-i-knew-as-a-young-startup-dev/</id><summary type="html">&lt;p&gt;As some of you might know, I started my career as the first
developer at a startup, way back in 2012. It was a challenging
but rewarding experience, and I got to learn a lot and explore
the full breadth of the software stack. The following are some
learnings that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As some of you might know, I started my career as the first
developer at a startup, way back in 2012. It was a challenging
but rewarding experience, and I got to learn a lot and explore
the full breadth of the software stack. The following are some
learnings that I wish I could tell my younger self.&lt;/p&gt;
&lt;h3&gt;Prototype like your life depends on it&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“I know you guys are restless to get started, but before you
write a single line of code — Make a prototype and run it by your client”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I heard this line from one of the co-founders of a very successful
software services company. In a startup, the client might be your
founder who’s sitting in the desk in front of you, but code is costly
to work and rework. Always prototype, at least on paper. It’ll help
everyone visualise what they’re building, and see issues and limitations
before you even start on the implementation.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Paper Prototype" src="https://janithl.github.io/images/paper-prototype.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Image by &lt;a href="https://www.flickr.com/photos/21218849@N03"&gt;Samuel Mann&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Write a spec, and check it twice&lt;/h3&gt;
&lt;p&gt;Software is all about the spec. It defines the scope and the tests that
need to pass to mark the work as done. A spec might be as simple as a user
story followed by some acceptance criteria in the &lt;a href="http://docs.behat.org/en/v2.5/guides/1.gherkin.html"&gt;Gherkin format&lt;/a&gt;, but it’s
very important for estimations, avoiding the dreaded scope creep, and writing
high quality code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A sample spec:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a &lt;strong&gt;logged in user&lt;/strong&gt;,&lt;/p&gt;
&lt;p&gt;I want to &lt;strong&gt;access the Account page&lt;/strong&gt;,&lt;/p&gt;
&lt;p&gt;so that I can &lt;strong&gt;see my Account Settings&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Acceptance criteria:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;Feature:&lt;/span&gt;&lt;span class="nf"&gt; Access account settings page&lt;/span&gt;

&lt;span class="k"&gt;Scenario:&lt;/span&gt;&lt;span class="nf"&gt; Janith accesses the account settings page&lt;/span&gt;

&lt;span class="k"&gt;Given &lt;/span&gt;&lt;span class="nf"&gt;I am logged in as &amp;quot;&lt;/span&gt;&lt;span class="s"&gt;janith@startup.lk&lt;/span&gt;&lt;span class="nf"&gt;&amp;quot;,&lt;/span&gt;
&lt;span class="k"&gt;And &lt;/span&gt;&lt;span class="nf"&gt;I am in the home page&lt;/span&gt;

&lt;span class="k"&gt;When &lt;/span&gt;&lt;span class="nf"&gt;I click on &amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Account&lt;/span&gt;&lt;span class="nf"&gt;&amp;quot; on the top menu,&lt;/span&gt;

&lt;span class="k"&gt;Then &lt;/span&gt;&lt;span class="nf"&gt;I am navigated to the &amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Account&lt;/span&gt;&lt;span class="nf"&gt;&amp;quot; page,&lt;/span&gt;
&lt;span class="k"&gt;And &lt;/span&gt;&lt;span class="nf"&gt;I can see my Account Settings.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember, you will most probably be your own QA, so write a solid automated
test suite that covers these conditions.&lt;/p&gt;
&lt;h3&gt;Timebox, timebox, timebox&lt;/h3&gt;
&lt;p&gt;You probably won’t have a Project Manager, nor will anyone really care about
Agile or sprints. The constant mantra will be &lt;em&gt;“just get it shipped”&lt;/em&gt;. This is
damaging in two aspects: a team without a welldefined end goal and a timeframe
to achieve it in will drift and probably get demotivated, and you will not be
able to set up a good measure of how much work your team is able to tackle in a
given period of time--which will make it really difficult to draw up a project
timeline.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sprint Plan" src="https://janithl.github.io/images/sprint-plan.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Avoid this trap. Set up 1 or 2 week sprints, take up only stories that the team is
confident they can achieve in that timebox, and &lt;a href="https://medium.com/softwaredevtools/agile-retrospectives-why-your-team-should-be-having-them-even-if-youre-not-in-the-tech-industry-b98c3df6501d"&gt;&lt;strong&gt;have a retro&lt;/strong&gt; at the end of each sprint
to discuss what went well, what failed, and how the team can improve&lt;/a&gt;. Try your best to
ship production code at the end of every sprint. It will give the team a sense of
achievement, and &lt;a href="https://ma.tt/2010/11/one-point-oh/"&gt;that which is most valuable: customer feedback&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Know when to use Frameworks and Libraries&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are some terrible frameworks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Often, code you write from the ground-up for a specific purpose will be faster and more performant.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of the points above a valid, and I avoided using PHP and frontend Javascript
frameworks for the longest time. This cost us a lot in terms of delivery speed and
maintainability, and especially made onboarding new developers hell. I still wonder
how things would’ve turned out had I used — say, Laravel or Python with Flask, or
KnockoutJS from the earliest days. We probably would’ve shipped a lot more features,
and at much higher quality.&lt;/p&gt;
&lt;h3&gt;Read up, seek support&lt;/h3&gt;
&lt;p&gt;Look, when it’s a tiny startup and it’s just two junior devs fighting fires every
day, you will miss out on a lot. You won’t have leads who will guide you on best
practices and design patterns, or architects who explain why TDD is awesome, and
why you should read &lt;a href="https://www.goodreads.com/book/show/3735293-clean-code"&gt;Clean Code by Robert C. Martin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It will be up to you to reach out: follow your &lt;a href="https://twitter.com/dan_abramov"&gt;favourite&lt;/a&gt; &lt;a href="https://twitter.com/dhh"&gt;library&lt;/a&gt; &lt;a href="https://twitter.com/John_Papa"&gt;authors&lt;/a&gt; on Twitter,
subscribe to a few good tech blogs on Medium and turn on the “Daily Digest” email.
Participate in the community and tech meet ups, and try to reach out to batch mates
or seniors working in bigger companies for advice and tips. There are so many people
willing to help if only you’d ask.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Workshop" src="https://janithl.github.io/images/workshop.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So yeah. Those are a few things I learned the hard way, and I wouldn’t trade it for the world. I hope you find it useful.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/@janithl/some-things-i-wish-i-knew-as-a-young-startup-dev-d6475d3f8151"&gt;&lt;em&gt;Originally Posted on Medium&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="code"></category><category term="people"></category><category term="work"></category></entry><entry><title>සමාජ ජාල ඇත්තටම අවුල්ද?</title><link href="https://janithl.github.io/2017/05/is-social-media-bad-si/" rel="alternate"></link><published>2017-05-25T20:58:00+05:30</published><updated>2017-05-25T20:58:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2017-05-25:/2017/05/is-social-media-bad-si/</id><summary type="html">&lt;p&gt;අද ෆේස්බුක් ගිනුමක් නැතිකෙනෙක් බෙහෙතකටවත් හොයාගන්න අමාරුයි. මේ බ්ලොග් එක කියවන ඔය ඇත්තොනම් ඊටත් එහා
ගිය නානාප්‍රකාර සමාජ ජාල ගොඩක ඉන …&lt;/p&gt;</summary><content type="html">&lt;p&gt;අද ෆේස්බුක් ගිනුමක් නැතිකෙනෙක් බෙහෙතකටවත් හොයාගන්න අමාරුයි. මේ බ්ලොග් එක කියවන ඔය ඇත්තොනම් ඊටත් එහා
ගිය නානාප්‍රකාර සමාජ ජාල ගොඩක ඉන්නව ඇති.&lt;/p&gt;
&lt;p&gt;දෙයක් ප්‍රචලිත වෙන්න පටන්ගත්තහම ඒක ඇද හොයන සෙට් එකකුත් අනිවා ඉන්නවනෙ. &lt;a href="http://www.npr.org/sections/health-shots/2016/09/07/492871024/facebook-and-mortality-why-your-incessant-joy-gives-me-the-blues"&gt;ඔය කට්ටිය ආටිකල් දෙක තුනක්
හොයාගෙන&lt;/a&gt;, ඒව උඩ දාගෙන "ෆේස්බුක් මාරයා" ගැන කතා කරන්න පටන් ගන්නව. "දේකට ගෙවන්නෙ නැත්තම්  ඔයා
තමයි වෙළඳ භාණ්ඩෙ", "ඕකට දාන දත්ත වල අයිතිය ඒගොල්ලන්ගෙ" වගේ බය හිතෙන කතා ගොඩක් ඔය සෙට් එකෙන් අහගන්න
පුළුවන්.&lt;/p&gt;
&lt;p&gt;මේ හැමදේම වැරදියි කියල මම කියන්නෙ නෑ. විශේෂයෙන්ම බුකී සමාගමත්, ඒගොල්ලන්ගෙ බිස්නස් කෙරීගෙන යන විදිහත්, 
ඒගොල්ලො වෙළඳ දැන්වීම වලට ඔබව නතුකරගන්න යොදන උපාය මාර්ගත් දැක්කහම අපිට ඔකෙ නරක පැත්ත ගැන යම් වැටහීමක්
ලැබෙනව. ඒත් එක්කම එකේකාගෙ ඕපාදූප හොයන්නයි, රට ගිනි තියන පට්ට පල් බොරු ගහන්නයි, අල්ලපු ගෙදර මිනිහට
පේන්න නයි අරින්නයි බුකී යන ඕනෙතරම් මිනිස්සු ඉන්නව.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;හැබැයි ඔය ඔක්කොටම වඩා සමාජ ජාලත්, විවෘත අන්තර්ජාලයත් හරහා  අපිට ඉතාමත්ම වැදගත් දෙයක් ලැබෙනව.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://si.wikipedia.org/wiki/1971_%E0%B6%A2%E0%B7%80%E0%B7%92%E0%B6%B4%E0%B7%99_%E0%B6%9A%E0%B7%90%E0%B6%BB%E0%B7%90%E0%B6%BD%E0%B7%8A%E0%B6%BD"&gt;1971 ජවිපෙ කැරැල්ලෙදි&lt;/a&gt; කැරලිකරුවො අත්පත් කරගන්න හදපු ඉතාමත්ම වැදගත් මරමස්ථානයක් විදිහට අපිට ශ්‍රී ලංකා ගුවන්
විදුලි සංස්ථාව හඳුනගන්න පුළුවන්. ඒ දවස් වල ටී. වී. ඇවිත් තිබුනෙ නෑ. රටෙ ලෝකෙ වෙන දේ දැනගන්න සාමාන්‍ය මිනිහෙකුට
තිබිච්ච එකම විදිහ රේඩියෝවයි. ඒ වගේම ආණ්ඩුවත් තම පාලනය ගෙනියන්න, විරුද්ධ මත යටපත් කරන්න ගුවන් විදුලිය
උපයෝගී කරගත්ත. එහෙම වැදගත් දෙයක් අල්ලගන්න කැරලිකරුවො ප්‍රමුඛතාව දෙන එක ඉතිං පුදුමයක් නෙමෙයි.&lt;/p&gt;
&lt;p&gt;අද කැරැල්ලක් ඇතිවුනොත් වෙබ් සයිට්, බුකි පිටු, ට්විටර් අකවුන්ට් කී දාහක් කියල අල්ලගන්න ද?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Traditional vs Social Media" src="https://janithl.github.io/images/social-media.png"&gt;&lt;/p&gt;
&lt;p&gt;අද එහෙම කරන්න බෑ. තොරතුරු පිළිබඳව ආණ්ඩුවටත්, මාධ්‍ය ආයතන වලටත් තිබිච්ච ඒකාධිකාරිය අද බිඳ වැටිල. ඉහත කියපු
කැරලි කාලෙදි වගේම, 80/90 දශකවල යුද්ධ පුවත් වාරණයත් ඒ දවස් වල රෑට ප්‍රවෘත්ති බලපු ඕනම කෙනෙක්ට මතක ඇති. අද
මේ දේ කරන්න බොහොම අමාරුයි. මොකද මේ සියල්ල සමාජ ජාල තුළින්, ඡායාරූප/වීඩියෝද ඇතුළුව  විදුලි වේගෙන් පැතිරෙන
නිසා. ආණ්ඩු පෙරලීමේ බලය බුකියට තියෙනව කියන්න අමාරුයි, ඒත් ආණ්ඩුව වගේම විවිධ ව්‍යාපාරද සමාජ ජාල නිසා සීරුවෙන්
ඉන්නව කියල කියන්න පුළුවන්. පාරිභෝගිකයන්ට සලකන ආකාරයේ ඉඳල විවිධ අක්‍රමිකතා වගේ දේවල් සමාජ ජාල වලින් පැතිරිලා,
එම සමාගම් අසරණ වෙච්ච වාර අනන්තයි.&lt;/p&gt;
&lt;p&gt;පාලක පැලැන්තිය සමාජ ජාල වලට බයයි කියල අපිට උපකල්පණය කරන්න පුළුවන්. තමන්ගෙ බලය හීණ වෙන ඕනැම දෙයක් ගැන
සැකෙන් ඉන්න මේ උදවිය පාලනය කරන්න කොහෙත්ම බැරි සමාජ ජාල නිසා තමන්ගෙ පට්ටම නැතිවෙයි කියල බයවෙලයි ඉන්නෙ.&lt;/p&gt;
&lt;p&gt;සමාජ ජාලත්, ඉන් පිටත විවෘත අන්තර්ජාලයත්  100% හොඳ දෙයක් නෙමෙයි. ඒත් ඒකෙ තියන නරක දේට වඩා අපිට ලැබෙන
බලය වැදගත් කියන එකයි මම හිතන්නෙ. ගතානුගතිකව අපිට කියවෙන, ඇහෙන, බැලෙන, ආකල්පමය වශයෙන අපිට සමාන
අදහස් තියෙන අපේම මිත්‍ර කණ්ඩායමට (&lt;a href="https://www.wired.com/2016/11/facebook-echo-chamber/"&gt;"echo chamber"&lt;/a&gt;) එහා ගිහින්, එහා පැත්තෙ මිනිහ කියන්නෙ මොනාද කියල
බලන්න අපිට අවස්ථාවක් ලැබෙනව. සමාජයේ එක් සීමිත පිරිසක් අරක්ගත්ත &lt;em&gt;"ජන සන්නිවේදනය"&lt;/em&gt; කියන එක හැබෑවෙන්ම 
&lt;em&gt;"ජනතාවට"&lt;/em&gt; උරුම කරන්න සමාජ ජාල වලට හැකි වෙලා තියෙනව. එච්චර වදගත් දෙයක් මුළුමුනින්ම "අවුල්" කියල ඉවත දාන
එක අන්ත මෝඩකමක්.&lt;/p&gt;
&lt;p&gt;අර &lt;a href="http://www.npr.org/sections/health-shots/2016/09/07/492871024/facebook-and-mortality-why-your-incessant-joy-gives-me-the-blues"&gt;උඩ ලින්ක් කරපු NPR ආටිකල් එකේ&lt;/a&gt; තියෙනව වගේ:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kraut's advice: "Don't treat it as simple entertainment and consume everything that is 
put in front of you," he said. "Use it more proactively to communicate with people that 
you care about."&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="sinhala"></category><category term="people"></category><category term="politics"></category></entry><entry><title>Links: May 25</title><link href="https://janithl.github.io/2017/05/links-may-25/" rel="alternate"></link><published>2017-05-25T07:33:00+05:30</published><updated>2017-05-25T07:33:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2017-05-25:/2017/05/links-may-25/</id><summary type="html">&lt;p&gt;Media coverage of ISIS tends to veer from the utilitarian (covering attacks and the daily
body-counts of ongoing operations against them) to the absurd, like the story of &lt;a href="https://www.usatoday.com/story/news/nation-now/2017/05/02/fbi-translator-secretly-married-islamic-state-leader/309137001/"&gt;how a
"smart but naive" FBI translator fell in love with a German rapper turned ISIS leader&lt;/a&gt;
she was supposed to be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Media coverage of ISIS tends to veer from the utilitarian (covering attacks and the daily
body-counts of ongoing operations against them) to the absurd, like the story of &lt;a href="https://www.usatoday.com/story/news/nation-now/2017/05/02/fbi-translator-secretly-married-islamic-state-leader/309137001/"&gt;how a
"smart but naive" FBI translator fell in love with a German rapper turned ISIS leader&lt;/a&gt;
she was supposed to be investigating, and flew over to Syria to marry him &lt;em&gt;(wtaf?!)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Lately, with Mosul being liberated, sobering reports have come to light of life under 
ISIS, and the violent campaign that freed Mosul.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Earlier this month, &lt;a href="https://scroll.in/article/836791/why-use-rockets-a-blow-by-blow-account-of-how-airstrikes-wrecked-homes-in-mosul-iraq"&gt;Scroll.in&lt;/a&gt; carried the story of two families and their
experiences in the carnage.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Khalil then heard a loud whoosh - the sound of incoming rockets. "I recognised it," he
said, having enlisted in the army for the mandatory one-year service after he completed 
college in 2000.&lt;/p&gt;
&lt;p&gt;The first two rockets hit his uncle's house. The impact pushed Khalil into the 
basement. A third rocket landed on his friend's garage. A fourth hit a corner of his own 
house.&lt;/p&gt;
&lt;p&gt;"Everything went dark," he said. "All this happened in 15 minutes."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The "Uncle" in the story is the world-renowned Civil Engineer &lt;a href="http://www.workers.org/2017/01/26/the-battle-for-mosul/#.WQyTvlOGPVo"&gt;Dr Mohamad Tyeb Al-Layla&lt;/a&gt;, who died in the conflict. Generally, education seems to have taken the 
biggest hit during the period of ISIS control. &lt;a href="http://www.bbc.com/news/world-middle-east-39525749"&gt;A BBC report from two days ago&lt;/a&gt; says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our lives under IS were empty and boring as we were locked in our homes. They shut down
our universities and wrote on the front door: "A woman's kingdom is her home". &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On universities:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most of those institutions were shut down, and education under IS was focused on
teaching jihad and combat techniques. Women and men were separated and women were told to
completely cover up.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This obsession with female dress was referred to in the earlier story as well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Hafidh's daughter, 21-year-old Nawal] brought out the dress she had to wear under
ISIS: the abaya, or loose-fitting gown, gloves, socks, niqab, or face veil with slits for
the eyes, and an eye-shield on top of it. "We could hardly see when we went out," she
said. Any deviation was punished with fines, whiplashes and street executions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Women in Mosul" src="https://janithl.github.io/images/mosul.png"&gt;&lt;/p&gt;
&lt;p&gt;The BBC article carries a more gruesome depiction of what the Hisba (religious police) was
capable of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I will never forget that awful day and what happened to a little seven-year-old on our
street. The girl had come down to the small neighbourhood shop to buy some sweets when IS
militants approached her. The girl, chatting innocently to the old shop owner, was asked
by the militants where her home was. She pointed it out before running and hiding. Her
parents come to see what was going on and the IS fighters lectured them about how their
daughter was violating Sharia law by being alone with the seller.&lt;/p&gt;
&lt;p&gt;After a long debate, the fighters decided the girl's punishment was to be bitten or 
pinched in her face or on her hands by the women of the Hisba [the religious police], or 
the more adequately described "monsters of Hisba".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The terrified mother begged them to punish her instead of her young daughter but there
is no room for discussion with IS. The child was punished in front of her screaming
mother. The monsters aggressively and repeatedly beat her and pinched her. The child was
screaming until she passed out and her heart stopped. The wailing mother completely lost
her mind when she saw her child die in front of her.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A conflict that has lasted more than half a decade (and has involved everything from
alleged chemical attacks, to drowning toddlers seeking refuge, to young Yazidi girls
forced into sexual slavery) still manages to produce stories of the most senseless crimes
imaginable.&lt;/p&gt;</content><category term="conflict"></category><category term="geopolitics"></category><category term="religion"></category></entry><entry><title>අල්පේච්ඡතාව</title><link href="https://janithl.github.io/2017/05/alpechchathawa-si/" rel="alternate"></link><published>2017-05-04T21:18:00+05:30</published><updated>2017-05-04T21:18:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2017-05-04:/2017/05/alpechchathawa-si/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.divaina.com/2010/06/06/feature07.html"&gt;&lt;strong&gt;හිස්‌ අහසේ සරණ  විහඟෙක්‌ සේ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;භික්‍ෂුව බහු භාණ්‌ඩික නොවිය යුතුයි. යම් දිසාවකට යන කල්හි පාසිවුරු, ඇතිරිලි, තෙල්, සකුරු ආදී බොහෝ උපකරණ පොදි 
බැද ම …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.divaina.com/2010/06/06/feature07.html"&gt;&lt;strong&gt;හිස්‌ අහසේ සරණ  විහඟෙක්‌ සේ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;භික්‍ෂුව බහු භාණ්‌ඩික නොවිය යුතුයි. යම් දිසාවකට යන කල්හි පාසිවුරු, ඇතිරිලි, තෙල්, සකුරු ආදී බොහෝ උපකරණ පොදි 
බැද මිනිසුන් ලවා උරෙන් හෝ හිසින් උසුලවාගෙන ගිsය භික්‍ෂූන් බුදුන් කල සිට තිබේ. සැහැල්ලු චාම් පැවතුම් ඇති භික්‍ෂුවට 
අවශ්‍ය වන්නේ අට පිරිකරම පමණි.&lt;/p&gt;
&lt;p&gt;තනිපට සිවුර, දෙපට සිවුර, අඳනය, පටිය, පාත්‍රය, කඩකැත්ත (දැලිපිහිය), ඉඳිකටුව සහ පෙරහන්කඩ අටපිරිකරයි.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;අටපිරිකර පමණක්‌&lt;/em&gt; ඇතිව යම් දිසාවක ගමන් කරන භික්‍ෂුව පියාපත් සහිතව &lt;em&gt;සිව්දිගට ඉගිල්ලී යන පක්‍ෂියකු මෙන් නිදහස්&lt;/em&gt;‌ යෑයි 
බුදුහිමි කරණීය මෙත්ත සූත්‍රයේදී සඳහන් කරයි.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Wandering Monk" src="https://janithl.github.io/images/wandering-monk.png"&gt;&lt;/p&gt;</content><category term="sinhala"></category><category term="religion"></category></entry><entry><title>ජීවනෝපාය ජීවනාලිය කරගැනීම</title><link href="https://janithl.github.io/2017/04/thoughts-on-being-busy-si/" rel="alternate"></link><published>2017-04-25T23:41:00+05:30</published><updated>2017-04-25T23:41:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2017-04-25:/2017/04/thoughts-on-being-busy-si/</id><summary type="html">&lt;p&gt;ගොඩදෙනෙක් "රාජකාරිය දේවකාරිය" කරගෙන තියෙනවනෙ. මාත් ඒ වගේ කෙනෙක්. ජීවිතේ මොන මොන කරදර තිබුනත්
මාසෙ අන්තිමට පඩිය හරි හම්බවෙනවනෙ කියාගෙන …&lt;/p&gt;</summary><content type="html">&lt;p&gt;ගොඩදෙනෙක් "රාජකාරිය දේවකාරිය" කරගෙන තියෙනවනෙ. මාත් ඒ වගේ කෙනෙක්. ජීවිතේ මොන මොන කරදර තිබුනත්
මාසෙ අන්තිමට පඩිය හරි හම්බවෙනවනෙ කියාගෙන බොක්කෙන් බැහැල වැඩ කරපු ඩයල් එකක්. එහෙම කියල අර ස්ට්‍රෙස් හදාගෙන
දුක් වින්දෙත් නෑ. (එහෙම පීඩාකාරී දවස් නොතිබුනාමත් නෙමෙයි. ඒත් මම ඉන්න IT ෆීල්ඩ් එකේ ඕව සුලභ දසුන්.) කොහොම
උනත්, ජීවිතේ ඒ වගේ යම් ඉලක්කයක් තියාගෙන, කාර්ය බහුල වෙලා ඉන්නකොට දුක අඩුයි. ඕනෙ ඕනෙ නැති දේවල් ගැන
වැඩිය එරීගෙන හිතන්න වෙලා නැතිවෙනව. කෙලි ප්‍රශ්න, රටේ ප්‍රශ්න, බොන්න ඕනෙ ප්‍රශ්න ඔක්කොම අමතක වෙනව හොඳ
කෝඩ් කෑල්ලක් ගහන්න සෙට් වුනාම. &lt;/p&gt;
&lt;p&gt;දැන් ඉතින් ඔහොම කොහෙන් කොහෙන් හරි ගේම ගැටගහන් හිටපු අපේ උන්දට රස්සාව දාල යන්න උනා මාස තුනකට කලින් විතර.
මොරටුව කැම්පස් එකේ කරන් යන MSc එකේ වැඩ කෝටියක් ගොඩ ගැහිල තිබුනෙ. මතක කාලෙක ඉඳන් ඇණයක් වෙලා
තිබ්බ  &lt;em&gt;ස්ටැටිස්ටික්ස්&lt;/em&gt; සබ්ජෙක්ට් එක මේකෙත් තිබ්බ. ඒක දැන් අවුරුදු දෙකක් තිස්සෙ ෆේල්. මේ පාර ගෙදර ඉඳන් හරි ගොඩ දානව 
කියල තමයි ගේමට බැස්සෙ. හොඳ වෙලාවට &lt;a href="https://www.udacity.com/course/intro-to-descriptive-statistics--ud827"&gt;උඩෑසිටී&lt;/a&gt; එකේ හොඳ ස්ටැට් කෝස් එකක් සෙට් වුනා. නැත්තම් ඒක ආයෙත් 
කපෝති.&lt;/p&gt;
&lt;p&gt;හරි හරි, මම කියන්න පටන් ගත්ත කතාව නෙමෙයිනෙ.&lt;/p&gt;
&lt;p&gt;මට කියන්න ඕනෙ වුනේ කරන්න රස්සාවක් නැති වුනාම ඔය හිත ඇතුලෙ තියෙන කුණුගොඩවල් ඔක්කොම එලියට එනව. ඕනෙ 
නැති හැම මගුල ගැනම කියෝ කියෝ විග්‍රහ දෙන්න ෆුල් ට්‍ර්යි එක දෙනව. &lt;/p&gt;
&lt;p&gt;ඉස්සර තිබ්බ වගේ තනියෙම හිතල &lt;a href="https://janithl.github.io/2016/07/busroutejs/"&gt;ඇප් එකක්&lt;/a&gt;, ඩිසයින් එකක්, &lt;a href="https://janithl.github.io/2016/09/the-unp-at-70/"&gt;දත්ත ටිකක් අරන් ඒ ගැන ඇනෑලිසිස් එකක්&lt;/a&gt; වගේ 
දේවල් කරන්න  කිසිම උනන්‍දුවක් නෑ. යසට හිටපු සතාට මොනා වුනාද කියල හිතාගන්න මටවත් බෑ. 😢&lt;/p&gt;
&lt;p&gt;&lt;img alt="Motivation - Owlturd Comix" src="https://janithl.github.io/images/motivation.png"&gt;
&lt;p class="text-center"&gt;&lt;em&gt;උපුටාගැනීම:&lt;/em&gt; &lt;a href="https://www.facebook.com/owlturdcomix/photos/a.248552535284688.1073741825.218730561600219/864263317046937/?type=3&amp;amp;theater"&gt;Owlturd Comix&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;අලුතෙන් දෙයක් කරන්න හිතෙනවනම් ඒ ගිටාර් ගැහිල්ල විතරයි. ඒකත් පොඩ්ඩක් හිමින් සීරුවේ කරන්නෙ, මොකෝ "පාඩම් 
කරන්නැයි" කියල නැවතිච්ච එකා කලාවට නැඹුරු වෙන්න ගත්තහම ගෙදර කට්ටිය පොඩ්ඩක් ටෙනා ගහනව.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The Strat" src="https://janithl.github.io/images/the-strat.jpg"&gt;&lt;/p&gt;
&lt;p&gt;ඉතින් ඔයවගේ මනෝවිකාර සීන් ටිකක් එක්ක තමයි පහුගිය මාස තුන ගත කරේ. ස්ටැට් විභාගෙ මේ සෙනසුරාද. පාස් වුනොත්
හොඳයි, මොකෝ නැත්තම් "කොච්චර කළත් මෙච්චර තමයි" කියල අතෑරල දාන්න තමයි වෙන්නෙ. &lt;/p&gt;</content><category term="sinhala"></category><category term="work"></category><category term="uni"></category></entry><entry><title>Retaining</title><link href="https://janithl.github.io/2017/03/retaining/" rel="alternate"></link><published>2017-03-28T22:48:00+05:30</published><updated>2017-03-28T22:48:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2017-03-28:/2017/03/retaining/</id><summary type="html">&lt;p&gt;There was a really interesting &lt;a href="https://blog.ycombinator.com/ask-a-female-engineer-how-can-managers-help-retain-technical-women-on-their-team/"&gt;YC blog post&lt;/a&gt; titled &lt;strong&gt;"Ask a Female Engineer: How Can 
Managers Help Retain Technical Women on Their Team?"&lt;/strong&gt;, which asks a panel of female 
technical employees on reasons they left jobs or in some cases even change their career 
paths.&lt;/p&gt;
&lt;p&gt;I believe it has some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There was a really interesting &lt;a href="https://blog.ycombinator.com/ask-a-female-engineer-how-can-managers-help-retain-technical-women-on-their-team/"&gt;YC blog post&lt;/a&gt; titled &lt;strong&gt;"Ask a Female Engineer: How Can 
Managers Help Retain Technical Women on Their Team?"&lt;/strong&gt;, which asks a panel of female 
technical employees on reasons they left jobs or in some cases even change their career 
paths.&lt;/p&gt;
&lt;p&gt;I believe it has some really important takeaways not just for managers of technical teams,
but all managers and all employees of whetever gender.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ve left companies after years of chaotically fighting fires while simultaneously
needing to build new features, or after repeatedly getting disorganized braindumps or
single line descriptions from stakeholders rather than the thoughtful, detailed specs
they’ve promised.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is something I've had to deal with personally as well: underspecification, or the
people in charge not really knowing what they want. Rewriting code to fit their latest
whim or fancy is wasteful and makes you feel like your project is going nowhere. Also,
&lt;a href="https://en.wikipedia.org/wiki/Scope_creep"&gt;scope creep&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Making sure your team members have a comfortable relationship with someone in leadership
outside their reporting chain is important; having someone who they feel they can go to
with manager-related problems is key.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As the recent &lt;a href="https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber"&gt;Susan Fowler/Uber debacle&lt;/a&gt; showed, though, upper leadership tends to
favour the manager's side over the employee's.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Especially as a woman, I worry about being labeled hyper-sensitive, or that my gender
will influence a person’s reaction to my feedback (e.g. the perception that women are
hysterical). If a company’s leadership feels too tightly knit – where all the managers
and founders are friends that aren’t open to critical feedback from employees – I won’t
even try to work out the issue before leaving.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See: the Uber thing above.&lt;/p&gt;
&lt;p&gt;And finally, this gem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;That employee shouldn’t have to train their boss in order to make the relationship
productive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On finding a new job:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I might see an email from a recruiter about a job that sounds exciting and that pays
well. I’ll start to consider leaving, and then someone I work with – usually my boss or
manager – does something that makes me angry. Angry enough to rewrite my resume, email a
recruiter back, brush up on interview questions and whiteboarding, and get off my butt
and go interview.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or deciding to stay:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s important that my boss checks in with me even if I seem happy or like I’m doing
really well. I don’t want to be asked for feedback only when things aren’t going well.
When my boss respectfully listens to feedback and strives to incorporate at least some of
it, I’m much more likely to stay at a company.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On working at a startup:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At a startup it can be hard to decipher whether your company is doing well, especially
since progress isn’t always in a continuous, upward direction. As an employee, you’re not
always privy to important information that would help you figure it out, especially if the
company is struggling. I’ve often felt that trying to determine how well my company is
doing is a guessing game. So then I turn to assessing my personal growth because that’s in
theory more straight-forward. I ask myself questions like: How much have I learned? Do I
get feedback? Am I challenged? What else can I accomplish here? If I can get excited about
what’s next for me at a company, I will stay. If I can mix things up enough and learn new
things where I am without actually finding a new job, I will do that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Anyway, the &lt;a href="https://blog.ycombinator.com/ask-a-female-engineer-how-can-managers-help-retain-technical-women-on-their-team/"&gt;&lt;strong&gt;full blog post&lt;/strong&gt;&lt;/a&gt; is really interesting and a must-read for both 
managers and employees. So do yourself a favour and go read!&lt;/p&gt;</content><category term="people"></category><category term="politics"></category><category term="work"></category></entry><entry><title>Animal Crackers</title><link href="https://janithl.github.io/2017/03/animal-crackers/" rel="alternate"></link><published>2017-03-19T21:52:00+05:30</published><updated>2017-03-19T21:52:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2017-03-19:/2017/03/animal-crackers/</id><summary type="html">&lt;p&gt;&lt;img alt="Animal Crackers by Richard de Zoysa" src="https://janithl.github.io/images/animal-crackers.png"&gt;&lt;/p&gt;
&lt;p&gt;Thimal is making me read &lt;a href="https://en.wikipedia.org/wiki/Richard_de_Zoysa"&gt;Richard de Zoysa&lt;/a&gt;'s work.&lt;/p&gt;
&lt;p&gt;Back when the dictator in chief cared about what was written in English about the
government, and dissent was treated with abduction, torture and a gunshot to the back of
the head (if you were lucky), de Zoysa stood for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Animal Crackers by Richard de Zoysa" src="https://janithl.github.io/images/animal-crackers.png"&gt;&lt;/p&gt;
&lt;p&gt;Thimal is making me read &lt;a href="https://en.wikipedia.org/wiki/Richard_de_Zoysa"&gt;Richard de Zoysa&lt;/a&gt;'s work.&lt;/p&gt;
&lt;p&gt;Back when the dictator in chief cared about what was written in English about the
government, and dissent was treated with abduction, torture and a gunshot to the back of
the head (if you were lucky), de Zoysa stood for, and died for, his convictions.&lt;/p&gt;
&lt;p&gt;Typeset in LaTeX. I wanted to do something fancy with illustrations, but it would've been
overkill as the words stand by themselves.&lt;/p&gt;</content><category term="conflict"></category><category term="politics"></category></entry><entry><title>It's Alllive!</title><link href="https://janithl.github.io/2017/03/its-alllive/" rel="alternate"></link><published>2017-03-12T06:22:00+05:30</published><updated>2017-03-12T06:22:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2017-03-12:/2017/03/its-alllive/</id><summary type="html">&lt;p&gt;It takes ages to run, isn't optimized at all (bad by even my standards - it queries 
sqlite for the same value over and over again in a single loop), runs off basic TF-IDF
and nothing fancier, and fails to make obvious connections (as the screenshot below 
illustrates).&lt;/p&gt;
&lt;p&gt;I feel nervous …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It takes ages to run, isn't optimized at all (bad by even my standards - it queries 
sqlite for the same value over and over again in a single loop), runs off basic TF-IDF
and nothing fancier, and fails to make obvious connections (as the screenshot below 
illustrates).&lt;/p&gt;
&lt;p&gt;I feel nervous even posting about it because who knows how it'll turn out? Or if it'll
ever &lt;em&gt;really&lt;/em&gt; work out there in the real world?&lt;/p&gt;
&lt;p&gt;But it's a start, and I'm a wee bit proud (and apprehensive).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Indexer Demo" src="https://janithl.github.io/images/terminal-indexer.png"&gt;&lt;/p&gt;</content><category term="uni"></category></entry><entry><title>Links: March 06</title><link href="https://janithl.github.io/2017/03/links-march-06/" rel="alternate"></link><published>2017-03-06T21:06:00+05:30</published><updated>2017-03-06T21:06:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2017-03-06:/2017/03/links-march-06/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;s&gt;Patrio&lt;/s&gt; Posts about links are the last refuge of a scoundrel.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before we get underway, a status update:&lt;/p&gt;
&lt;p&gt;The number of lines of code I've written in the last 26 days (since I stopped going to
work) is 0, not counting some late night shenanigans where I thought typing some …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;s&gt;Patrio&lt;/s&gt; Posts about links are the last refuge of a scoundrel.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before we get underway, a status update:&lt;/p&gt;
&lt;p&gt;The number of lines of code I've written in the last 26 days (since I stopped going to
work) is 0, not counting some late night shenanigans where I thought typing some Pandas
code into a terminal was going to solve my issues (it didn't).&lt;/p&gt;
&lt;p&gt;On the plus side, I've devoured BoJack, and started on &lt;a href="https://en.wikipedia.org/wiki/Letterkenny_(TV_series)"&gt;Letterkenny&lt;/a&gt;. So, there's 
&lt;em&gt;some&lt;/em&gt; progress. Also I finally managed to finish off the first draft of my PGDip report,
typeset it in beautiful LaTeX (&amp;lt;3 &amp;lt;3 &amp;lt;3), and send it in. So hopefully I can get around to 
some real work from now on... &lt;em&gt;*proceeds to write blog post instead*&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://www.theguardian.com/cities/2017/feb/27/sand-mining-global-environmental-crisis-never-heard"&gt;&lt;strong&gt;Sand mining: the global environmental crisis you've probably never heard of&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;tl;dr:&lt;/em&gt; Sand mining sucks, and will destroy ecosystems and infrastructure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cities are expanding at a pace and on a scale far greater than at any time in human 
history. The number of people living in urban areas has more than quadrupled since 1950, 
to about 4 billion today.&lt;/p&gt;
&lt;p&gt;In the past few years, China has used more cement than the US used in the entire 20th 
century. Last year alone, the nation used enough construction sand to cover the entire 
state of New York an inch deep.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;*looks wearily over Galle Face at the new port city coming up*&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Worldwide, thousands of ships vacuum up millions of tonnes from the seabed each year, 
tearing up habitats and muddying waters with sand plumes that can affect aquatic life far 
from the original site.&lt;/p&gt;
&lt;p&gt;The most dramatic impact of ocean sand mining is surely felt in Indonesia, where sand 
miners have completely erased at least two dozen islands since 2005.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lots to learn and think about, especially with our recent issues with both sand mining 
(leading to salinisation of rivers), and the recent controversy (especially in 
&lt;a href="http://www.colombopage.com/archive_17A/Feb12_1486916112CH.php"&gt;Divulapitiya in the Gampaha district&lt;/a&gt;) regarding soil being illegally mined.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://www.wired.com/2017/03/ann-arbor-fighting-traffic-software-winning/"&gt;&lt;strong&gt;Ann Arbor Is Fighting Traffic With Software - and Winning&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ann Arbor's adaptive traffic signal control system has been playing god for more than a 
decade, but fiddling engineers continue to tweak its inputs and algorithms. Now it reduces 
weekday travel times on affected corridors by 12 percent, and weekend travel time by 21 
percent. A trip along one busy corridor that took under three minutes just 15 percent of 
the time in 2005 now comes in under that mark 70 percent of the time. That’s enough to 
convince Ann Arbor’s traffic engineers, who just announced they'll extend this system to 
all its downtown traffic lights and its most trafficked corridors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Music to the ears of Colombo commuters stuck in traffic.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Of course, all this may prove little more than a band-aid. Geometry says there are only 
so many ways to fit a bunch of vehicles on to streets. The best way to beat traffic is to 
not be part of traffic at all. It's by moving people onto transit (a regional commuter 
rail plan is hogtied by funding woes and general intransigence), or carpools, or making 
it easier to walk and bicycle. In the meantime, though, computers are pretty cool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="http://www.vox.com/a/fenn-treasure-hunt-map"&gt;&lt;strong&gt;In search of Forrest Fenn's treasure&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vox has this wonderful long form piece with video, maps and gorgeous photography. Loved 
it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We came here to find a chest filled with $2 million worth of treasure, hidden by an 
eccentric, wealthy 80-year-old man.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There's poetry with clues, lots of maps and riddles. It's like a Wes Anderson movie.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am reminded of a telephone conversation we’d had earlier with Scott King, a treasure 
hunter who failed in his own search. He’d warned us to be wary of &lt;strong&gt;confirmation bias&lt;/strong&gt; - 
interpreting new evidence as validation of one's preexisting beliefs.&lt;/p&gt;
&lt;p&gt;The next day, we turn to science. [...] Using geographic data from the clues (e.g., 
between 5,000 and 10,200 feet; near a water source; near pine trees), they'd narrowed down 
the original search area from 27,801,289 acres to 591,636 acres — a 98 percent reduction 
in size. From there, they’d homed in specifically on the Yellowstone National Park area, 
shrinking the search area to a mere 0.084% of the original.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using modern GIS tools for treasure hunting... how abou dah?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;From this Sunday's Sunday Times (yes, I read the paper whenever I can), two interesting
stories:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.sundaytimes.lk/170305/plus/a-tale-of-the-kandyan-royal-architect-and-court-intrigue-231157.html"&gt;&lt;strong&gt;A tale of the Kandyan royal architect and court intrigue&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The title 'Mulachari' was given to an artificer who was an expert in at least five arts 
and crafts. As John D'Oyly had observed, there were seven artificers under one Mulachari 
and it was a coveted position&lt;/p&gt;
&lt;p&gt;Devendra Mulachari is also credited for some of the iconic historic monuments of the 
Kandyan Kingdom including the Pattirippuwa or Octagon of the Dalada Maligawa, Cloud Wall 
(walakulubemma) and the Kandy lake.&lt;/p&gt;
&lt;p&gt;According to Lawrie's Gazetteer, Devendra Mulachari's first architectural work was the 
construction of the Bana Maduwa in Middeniya. The place which was used as a meeting place 
for official and unofficial purposes and also as a preaching hall had been demolished 
around 2004 as Mr. Waidyasekera notes and was replaced by a Samurdhi meeting place today.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;*sigh*&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.sundaytimes.lk/170305/plus/who-are-we-231172.html"&gt;&lt;strong&gt;'Who are we?'&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Who are Sri Lankans? From where have we come? Are the major ethnic groups and also the 
Veddahs closely-linked or disparately different? The indisputable findings based on the 
'Eve Gene' or Mitochondrial DNA (mtDNA) should lead to stronger bonds among the major 
ethnic groups, making the call 'We are Sri Lankans' louder and clearer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The evidence that all Sri Lankan ethnic groups are closely interrelated genetically has 
been piling up for some time, and this is even stronger evidence of that being the case.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a considerable genetic admixture in contemporary ethnic groups in Sri Lanka - 
the Sinhalese are closely related to the Sri Lankan Tamils. [...] The Muslims and the 
Malays are also closely related to each other. &lt;/p&gt;
&lt;p&gt;West Eurasian haplogroups among the Sinhalese, the Sri Lankan Tamils and the Veddahs 
suggest early migration of women carrying these haplogroups into the country. [...] 
Predominance of Indian mtDNA haplogroups among Muslims and Malays support the notion of 
largely male migration and marriage to local women.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The study size is not huge (about 200 DNA samples in total), and more sequencing of the 
mtDNA molecule is to be done for even better understanding, but this is pretty sweet. 
Hopefully the findings make a splash among the general public and we can move over the 
bickering and start to move forward as a unified nation.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Two pretty great tools for dataviz, and stats respectively.&lt;/p&gt;
&lt;p&gt;Firstly, the &lt;a href="http://pixelmap.amcharts.com/"&gt;&lt;strong&gt;Pixel Map Generator&lt;/strong&gt;&lt;/a&gt;, which lets you paint map segments and draw all 
sorts of symbols on it. Great tool for generating maps, and they have a district map of
Sri Lanka as well. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Sri Lanka on Pixel Map Generator" src="https://janithl.github.io/images/pixel-map-sri-lanka.png"&gt;&lt;/p&gt;
&lt;p&gt;Secondly, &lt;a href="http://students.brown.edu/seeing-theory/"&gt;&lt;strong&gt;Seeing Theory&lt;/strong&gt;&lt;/a&gt;, a site that uses D3js 
visualisations to explain statistics in an easier to understand way to a wider range of 
students. As someone who's always had trouble with the subject, I'm grateful.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That's it for now. More, soon. Hopefully more substantive. Or rant-ive. IDK.&lt;/p&gt;</content><category term="biology"></category><category term="conflict"></category><category term="data"></category><category term="people"></category></entry><entry><title>Wanda</title><link href="https://janithl.github.io/2017/02/wanda/" rel="alternate"></link><published>2017-02-23T21:20:00+05:30</published><updated>2017-02-23T21:20:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2017-02-23:/2017/02/wanda/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;"What happened, BoJack?"&lt;/p&gt;
&lt;p&gt;"Same thing that always happens.  You didn't know me, then you fell in love with me, 
and now you know me."&lt;/p&gt;
&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;"What happened, BoJack?"&lt;/p&gt;
&lt;p&gt;"Same thing that always happens.  You didn't know me, then you fell in love with me, 
and now you know me."&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="biology"></category><category term="people"></category></entry></feed>