<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Janith's Blog - General</title><link href="https://janithl.github.io/" rel="alternate"></link><link href="https://janithl.github.io/feeds/general.atom.xml" rel="self"></link><id>https://janithl.github.io/</id><updated>2021-12-09T19:15:00+05:30</updated><entry><title>Remove shadows and uneven lighting from photographs of writing on paper</title><link href="https://janithl.github.io/2021/12/remove-shadows-and-uneven-lighting/" rel="alternate"></link><published>2021-12-09T19:15:00+05:30</published><updated>2021-12-09T19:15:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2021-12-09:/2021/12/remove-shadows-and-uneven-lighting/</id><summary type="html">&lt;p&gt;This is mostly a note to self. You know how you often have photographs
of notes or forms that you need to print out, and there's a shadow or
uneven lighting across the image which makes the print look bad?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Initial image" src="https://janithl.github.io/images/shadow-removal/photo-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;These are the steps I take to make something like …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is mostly a note to self. You know how you often have photographs
of notes or forms that you need to print out, and there's a shadow or
uneven lighting across the image which makes the print look bad?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Initial image" src="https://janithl.github.io/images/shadow-removal/photo-1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;These are the steps I take to make something like this friendlier for a
black-and-white printer. I am using the amazing online editor
&lt;a href="https://www.photopea.com/"&gt;Photopea&lt;/a&gt;, but most image editors can handle this.&lt;/p&gt;
&lt;h3&gt;Initial image adjustments&lt;/h3&gt;
&lt;p&gt;First, desaturate the image. Since we're going to print it out in b&amp;amp;w anyway,
it doesn't matter. Bump up the contrast and brightness a bit too.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Desaturated image" src="https://janithl.github.io/images/shadow-removal/photo-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;If the editor has a way to warp transformation or something similar, you can
use it to straighten out the image a little bit.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Warped image" src="https://janithl.github.io/images/shadow-removal/photo-3.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Duplicating the layer&lt;/h3&gt;
&lt;p&gt;Now, duplicate the image layer. Invert the colours and apply a Gaussian
blur (I used about 7 pixels as the blur value)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blurred image" src="https://janithl.github.io/images/shadow-removal/photo-4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;We can then change the layer mode from "normal" to "colour dodge"&lt;/p&gt;
&lt;p&gt;&lt;img alt="Layer mode screen shot" src="https://janithl.github.io/images/shadow-removal/screenshot-1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Colour Dodge applied" src="https://janithl.github.io/images/shadow-removal/photo-5.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Final adjustments&lt;/h3&gt;
&lt;p&gt;Then with some level adjustment, we can get the final output to look evenly
lit and appropriate for printing.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Level adjustment screen shot" src="https://janithl.github.io/images/shadow-removal/screenshot-2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Level adjusted image" src="https://janithl.github.io/images/shadow-removal/photo-6.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This is simply what worked for me, but there must be tons of other, &lt;em&gt;better&lt;/em&gt; ways
of doing this. Play around with the level adjustment, drop the bumping of
brightness and contrast at the start, and you might get something that works
best for the photographs of notes that you have.&lt;/p&gt;</content><category term="design"></category></entry><entry><title>useMemo vs useEffect and useState</title><link href="https://janithl.github.io/2021/07/usememo-vs-useeffect-and-usestate/" rel="alternate"></link><published>2021-07-20T08:48:00+05:30</published><updated>2021-07-20T08:48:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2021-07-20:/2021/07/usememo-vs-useeffect-and-usestate/</id><summary type="html">&lt;p&gt;Since the advent of React Hooks, there have been a few hook-related
anti-patterns that have popped up. To be fair, these existed before
hooks as well, but in different forms. The use of derived state is
one of the most pervasive of these. As the React blog pointed out
way …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since the advent of React Hooks, there have been a few hook-related
anti-patterns that have popped up. To be fair, these existed before
hooks as well, but in different forms. The use of derived state is
one of the most pervasive of these. As the React blog pointed out
way back in 2018, &lt;a href="https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html"&gt;&lt;em&gt;"You Probably Don't Need Derived State"&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In a hooks-based application, it may look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;derivedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;expensiveTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;derivedValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are two varieties of this: one where &lt;code&gt;value&lt;/code&gt; is updated by the
user inside the component, and another where &lt;code&gt;value&lt;/code&gt; is used but not
updated.&lt;/p&gt;
&lt;p&gt;For the first type, consider how any update of &lt;code&gt;initialValue&lt;/code&gt; will
overwrite the changes made by the user in the state. Do you really
want this to happen? &lt;a href="https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html"&gt;The blog post I linked above&lt;/a&gt; lays out a few
alternatives.&lt;/p&gt;
&lt;p&gt;For the second type, there is &lt;strong&gt;no need&lt;/strong&gt; to put things in state anyway
if you don't plan on updating it. You can simply assign it to a constant:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;expensiveTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or, if you're worried about the &lt;code&gt;expensiveTransform()&lt;/code&gt; and wish to avoid
unnecessarily calling it, you can use memoization:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expensiveTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Simple, and saves you the trouble of dealing with unnecessary state.&lt;/p&gt;</content><category term="code"></category><category term="js and ts"></category><category term="react"></category></entry><entry><title>On the making of "Paramitha"</title><link href="https://janithl.github.io/2021/03/paramitha/" rel="alternate"></link><published>2021-03-15T07:40:00+05:30</published><updated>2021-03-15T07:40:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2021-03-15:/2021/03/paramitha/</id><summary type="html">&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/mX2w9W4xIc4"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;One week ago, on 7 March, I released my animated short &lt;em&gt;Paramitha&lt;/em&gt;.
I stared working on it in early February and just as I expected
it took ~4 weeks of work to finish. I used &lt;a href="https://krita.org/en/"&gt;Krita&lt;/a&gt; for the
drawing and frame-by-frame animations, and &lt;a href="https://www.synfig.org"&gt;Synfig Studio&lt;/a&gt; for
things like parallax.&lt;/p&gt;
&lt;p&gt;The …&lt;/p&gt;</summary><content type="html">&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/mX2w9W4xIc4"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;One week ago, on 7 March, I released my animated short &lt;em&gt;Paramitha&lt;/em&gt;.
I stared working on it in early February and just as I expected
it took ~4 weeks of work to finish. I used &lt;a href="https://krita.org/en/"&gt;Krita&lt;/a&gt; for the
drawing and frame-by-frame animations, and &lt;a href="https://www.synfig.org"&gt;Synfig Studio&lt;/a&gt; for
things like parallax.&lt;/p&gt;
&lt;p&gt;The story and setting were inspired by a random piece I did a
while back (I think I just liked the background!)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Storyboard" src="https://janithl.github.io/images/poya-girl.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;&lt;a href="https://www.instagram.com/p/CJZ5yHHhnqW/"&gt;Original Post on Instagram&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Storyboard and Animation&lt;/h3&gt;
&lt;p&gt;I first started with a storyboard, and then animated it to get an
idea of the timing and "beats":&lt;/p&gt;
&lt;p&gt;&lt;img alt="Storyboard" src="https://janithl.github.io/images/storyboard.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Very rough storyboard animation:&lt;/p&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/PMPHFazRt9g"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I did a lot of rough renders to explore ideas and get a feel for my
capabilities as an animator. This was my first short and I didn't want
to bite off more than I could chew.&lt;/p&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/89_ar23BNUw"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The walk cycles were a major part of the animation. I do wish I could've
spent a little bit more time on them, as they were animated on fours and
would've looked much better if animated on twos.&lt;/p&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/eRpo2q4h6p0"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I deviated from the storyboard somewhat by adding two additional
shots that were inspired by seeing how reflections were animated,
and the idea of a "journey" was used in anime. So, the bus scene
came into existence:&lt;/p&gt;
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/OYJzla1ju5I"
frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;Parallax&lt;/h3&gt;
&lt;p&gt;For parallax shots, which I employed a lot, the scene would broken
down into multiple semi-transparent layers in Krita and exported as
PNGs, which I would then animate in Synfig Studio. This allowed me
to make the layers closer to the camera move faster, giving the
illusion of depth in a scene.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Parallax" src="https://janithl.github.io/images/parallax.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Sound&lt;/h3&gt;
&lt;p&gt;Finally, in the final two days of production (a weekend) I worked on
the sound design and making a theme. &lt;a href="https://www.audacityteam.org"&gt;Audacity&lt;/a&gt; was a great help
during this. I wanted a female voice for the Buddhist chant (to fit the
character), but running short of time and people I could ask, I created
a chorus of voices chanting by recording it myself. For the theme, I
created a very simple droning, Eastern-inspired guitar and bass piece
in D major and C major.&lt;/p&gt;
&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/994887208&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;
&lt;div style="font-size: 10px; color: #cccccc;line-break: anywhere;word-break: normal;overflow: hidden;white-space: nowrap;text-overflow: ellipsis; font-family: Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif;font-weight: 100;"&gt;&lt;a href="https://soundcloud.com/janith-leanage" title="Jan" target="_blank" style="color: #cccccc; text-decoration: none;"&gt;Jan&lt;/a&gt; · &lt;a href="https://soundcloud.com/janith-leanage/paramitha-theme" title="&amp;quot;පාරමිතා&amp;quot; තේමා ගීතය | &amp;quot;Paramitha&amp;quot; Theme" target="_blank" style="color: #cccccc; text-decoration: none;"&gt;&amp;quot;පාරමිතා&amp;quot; තේමා ගීතය | &amp;quot;Paramitha&amp;quot; Theme&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;For the bird sounds, which added a lot of ambiance, I used two recordings:
&lt;a href="https://en.wikipedia.org/wiki/File:Psittacula_krameri_-_Rose-ringed_Parakeet_XC474519.mp3"&gt;a recording of Rose-ringed Parakeet sounds by Marie-Lan Taÿ Pamart&lt;/a&gt;,
and &lt;a href="https://en.wikipedia.org/wiki/File:CommonMynaCalls.ogg"&gt;a recording of Common Mynas by L. Shyamal&lt;/a&gt;. Both these birds are
commonly found in Sri Lanka.&lt;/p&gt;
&lt;p&gt;And that's how it was done. Given how it was my first time making
something, and the fact that I had to learn so much on the job, I'm
very happy with how it turned out. The film and music are released
under a &lt;a href="https://creativecommons.org/licenses/by-sa/4.0/"&gt;Creative Commons Attribution-ShareAlike 4.0 license
(CC BY-SA 4.0)&lt;/a&gt;, so everyone can use and build up on it!&lt;/p&gt;</content><category term="design"></category><category term="films"></category><category term="music"></category></entry><entry><title>Pizza Dough: What I've Learned</title><link href="https://janithl.github.io/2020/12/pizza-dough-what-ive-learned/" rel="alternate"></link><published>2020-12-31T10:05:00+05:30</published><updated>2020-12-31T10:05:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-12-31:/2020/12/pizza-dough-what-ive-learned/</id><summary type="html">&lt;p&gt;Watching the &lt;a href="https://www.youtube.com/watch?v=SDpCzJw2xm4"&gt;Adam Ragusea New York-style pizza dough recipe&lt;/a&gt; inspired me to make
pizza at home, something that I never thought I was capable of. Now, about 3 batches
of pizza later, I think I’ve got most of the big details sorted out. Credit also to
&lt;a href="https://www.youtube.com/watch?v=J_3v7DEkjsk"&gt;Andrew Rea for …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Watching the &lt;a href="https://www.youtube.com/watch?v=SDpCzJw2xm4"&gt;Adam Ragusea New York-style pizza dough recipe&lt;/a&gt; inspired me to make
pizza at home, something that I never thought I was capable of. Now, about 3 batches
of pizza later, I think I’ve got most of the big details sorted out. Credit also to
&lt;a href="https://www.youtube.com/watch?v=J_3v7DEkjsk"&gt;Andrew Rea for his pan pizza recipe&lt;/a&gt; which really helped me with kneading and
shaping techniques.&lt;/p&gt;
&lt;p&gt;The prep time is about 3 hours, and I don’t do overnight refrigerator rises (I plan
to, one day, when I’m more patient and can remember to mix the dough the night before
I want the pizza)&lt;/p&gt;
&lt;h3&gt;Flour&lt;/h3&gt;
&lt;p&gt;I use the regular wheat flour, 150g per pizza. I usually make 3–4 pizzas so it’s
usually 450g or 600g. I don’t have a scale, so I use a measuring cup, sue me!&lt;/p&gt;
&lt;h3&gt;Water, sugar and yeast&lt;/h3&gt;
&lt;p&gt;I first take 100ml of water, mix it with half a packet of dry yeast (about 7.5g),
and 2 tablespoons of sugar. Mix well and let it activate for at least 30 minutes
(but longer is better). This will foam up and overtop your container so make sure
you put it on a large enough jar or something.&lt;/p&gt;
&lt;h3&gt;Hydration&lt;/h3&gt;
&lt;p&gt;I’m currently going for 60% hydration. This results in a very sticky dough but I
really like the taste and crunchy fluffiness of the final product.&lt;/p&gt;
&lt;p&gt;60% hydration means you add 60% of your flour weight in water. For example if you
have 100g of flour, you add 60g (or 60ml–isn’t SI lovely!) of water. For 600g of
flour, this means adding 360ml of water.&lt;/p&gt;
&lt;p&gt;But, &lt;strong&gt;remember that you already added 100ml to the yeast mixture&lt;/strong&gt;. So do make
sure to take that into account. You can just top up the yeast mixture with 260ml
of water and add the whole shebang to the flour in a large mixing bowl. Add a
tablespoon of salt and two tablespoons of olive oil (I usually substitute with
&lt;em&gt;pol thel&lt;/em&gt; because I am not made out of money).&lt;/p&gt;
&lt;p&gt;Mix, mix, mix. You can check &lt;a href="https://www.youtube.com/watch?v=n1O3uHPCOLA"&gt;Babish for ways to knead without breaking your back&lt;/a&gt;.
I used to knead with my hands, but now I just use the mixer attachment in my
immersion blender and small bursts to get the thing kneaded.&lt;/p&gt;
&lt;p&gt;Let it rest for 2 hours with a wet cloth on top of the bowl. This step is called
the &lt;strong&gt;bulk ferment&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Shaping&lt;/h3&gt;
&lt;p&gt;After letting your dough rise, break it into 3 or 4 parts. I really eyeball this and
don’t really care about accuracy at this point.&lt;/p&gt;
&lt;p&gt;Now, the tricky part of actual shaping. The dough is sticky af and will stick to
anything, and I am currently experimenting with &lt;s&gt;oil paper sheets cut into circles&lt;/s&gt;,
&lt;a href="https://www.youtube.com/watch?v=3ZEGG1mb3Rc"&gt;like what Adam Ragusea does sometimes&lt;/a&gt;. &lt;strong&gt;Update:&lt;/strong&gt; The oil paper sticks like glue
to the batter (hey, &lt;em&gt;paappa&lt;/em&gt; and &lt;em&gt;sau kola&lt;/em&gt; in essence), so a better alternative I have
found is aluminium foil! Comes right off when the pizza cools.&lt;/p&gt;
&lt;p&gt;You drop the dough balls into a bowl of flour, and dust your fingers with flour as
well. Drop the balls onto the oil paper and taking care not to deflate the edge (cornice)
use your fingers to push down and flatten the middle. Doing this and expanding the
pizza to your required size is the least fun part of the whole process for me, and I
have not perfected it at all. After you’re done making a fool of yourself, let it rest
and rise for another 1 hour.&lt;/p&gt;
&lt;h3&gt;Sauce&lt;/h3&gt;
&lt;p&gt;Now is a good time to get started on the sauce. I just chop up one onion (or two), and
smash a clove or two of garlic. I mix in about 2 tomatoes per pizza, so for 4 you’d need
8 tomatoes. It’s a good idea to drop the tomatoes in a hot water bath and peel off the
skins if that’s your thing. People also remove the seeds. I do neither of these things
because I am lazy and I don’t want to throw stuff away. Drop everything into a pan (onions
and garlic first) with oil, add water and tomato sauce as desired, and mix well over
medium heat. Once it looks good season with salt and pepper, and then put everything in a
jar and use an immersion blender to mix it all in.&lt;/p&gt;
&lt;h3&gt;Cheese&lt;/h3&gt;
&lt;p&gt;Don’t get pre-shredded motz. Shred your own motz. American YouTubers swear by adjectives
(“low moisture”, “full fat”), but we don’t really have much variety here right? Get whatever
mozzarella you can and just shred it into a bowl.&lt;/p&gt;
&lt;h3&gt;Other toppings&lt;/h3&gt;
&lt;p&gt;I’ve tried olives, sausages, and bacon. They all work well.&lt;/p&gt;
&lt;h3&gt;Baking&lt;/h3&gt;
&lt;p&gt;Pre-heat your oven to 200°C. Apply the sauce first, then the cheese, then drop any other
toppings. Brush your crust with some oil if you want things to look fancy. Slide your oil
paper’d pizza onto a baking pan to bake&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. Your cook time will depend on your oven and
other factors I guess, but for me it’s usually between 15–20 minutes. I know it’s done when
the toppings are getting burnt and the crust starts looking brown (if the crust is still
white I’d advice keeping it in for a bit more). &lt;s&gt;The oil paper should come right off now that
the pizza is baked.&lt;/s&gt; &lt;strong&gt;Update:&lt;/strong&gt; It doesn't.&lt;/p&gt;
&lt;p&gt;Keep experimenting, and I’m sure you’ll find better ways of doing things. For example if
you want a more burnt bottom you can try a small trick I do and use a &lt;em&gt;roti pan&lt;/em&gt; on the
stove to burn the bottom (this can happen before you put it in the oven).&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Does anyone have pizza stones or pizza steels here? If you have one you can use that.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="biology"></category></entry><entry><title>On Intolerance (of Intolerance)</title><link href="https://janithl.github.io/2020/12/on-intolerance-of-intolerance/" rel="alternate"></link><published>2020-12-20T22:45:00+05:30</published><updated>2020-12-20T22:45:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-12-20:/2020/12/on-intolerance-of-intolerance/</id><summary type="html">&lt;p&gt;I’m sure everyone at this point has read about the &lt;a href="https://en.wikipedia.org/wiki/Paradox_of_tolerance"&gt;&lt;em&gt;paradox of tolerance&lt;/em&gt;&lt;/a&gt;. It’s
a pretty common sense argument and there are many historial examples that are often
held up, one of the most popular being the rise of the Nazi party in the liberal
democracy of the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m sure everyone at this point has read about the &lt;a href="https://en.wikipedia.org/wiki/Paradox_of_tolerance"&gt;&lt;em&gt;paradox of tolerance&lt;/em&gt;&lt;/a&gt;. It’s
a pretty common sense argument and there are many historial examples that are often
held up, one of the most popular being the rise of the Nazi party in the liberal
democracy of the Weimar Republic.&lt;/p&gt;
&lt;p&gt;A problem that I've see cropping up recently (first in online communities, but soon
evolving to have offline consequences) is with the &lt;em&gt;definition of intolerance&lt;/em&gt;—and
the actions the self-proclaimed ‘defenders’ of tolerance take to guard it.&lt;/p&gt;
&lt;p&gt;One example from a few years back was the &lt;em&gt;Sinha-le&lt;/em&gt; stickers, and the &lt;em&gt;Colombo liberal&lt;/em&gt;
reaction to it. Without even considering the origins of the sticker campaign, or
motivations of those who chose to brand their vehicles with said sticker, a counter-campaign
was launched to take photographs, identify owners of the vehicles, and basically notify
their employees (with the ultimate intention of getting them fired, of course). Now, the
obvious moral issues of doxxing aside, this was one of the first instances I observed
the troubling phenomenon of online vigilantism, and what later came to be known as
&lt;em&gt;cancel culture&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now, many years later, cancel culture seems to be here to stay. It has led to a situation
which I’ve only experienced previously due to the looming threat of violence from a repressive
surveillance state: &lt;em&gt;self-censorship&lt;/em&gt;. Netizens, people who used to risk their necks to
speak out against injustice being perpetrated by nation states, were now treating certain
subjects as off-limits, lest they be branded &lt;em&gt;“-phobes”&lt;/em&gt; and cancelled. It is truly an
unexpected low-intensity reign of terror, and unlike state actors where there might be
&lt;em&gt;some&lt;/em&gt; legal recourse/FR petition/habeas corpus/international pressure to give you at
least an iota of relief, in this case mobs accountable to no one and run by shadowy teenagers
seem to mete out justice after kangaroo trials. It sort of feels like the &lt;em&gt;JVP days&lt;/em&gt; are here
again.&lt;/p&gt;
&lt;p&gt;So, what’s a society to do to emerge out of this mess and reclaim our right to discourse and
divergent viewpoints? I honestly don’t know, but remember that an insurgency can only survive
as long as the wider populace supports it. For far too long we’ve allowed &lt;em&gt;important online public spaces&lt;/em&gt;
to be run by social media firms milking our emotions for ad revenue. They have, in turn, given
us skewed elections, body image issues, FOMO, and free reign for online bullies. This fight is
well and truly lost, &lt;strong&gt;unless&lt;/strong&gt; we take back our spaces. We will need to demand that the firms
for whom we create so much value give us—the community—the tools to curate, moderate, and monitor
those spaces&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. We will need tougher regulations while guaranteeing freedom of expression, a tough
balancing act whenever governments (especially in our little corner of the world) get involved.&lt;/p&gt;
&lt;p&gt;But, an even more pressing need will be for us as a society to come to terms with what
&lt;strong&gt;is and isn’t intolerant speech&lt;/strong&gt;. We will have to grow up and tolerate dissenting views, and
not call for heads to roll whenever viewpoints that make us clutch our pearls come up on our feeds.&lt;/p&gt;
&lt;p&gt;I used to believe technology could help alleviate societal problems, but I now realise that
technology is merely a &lt;em&gt;megaphone&lt;/em&gt;—the voice and the words that come out of it will ultimately always
be &lt;em&gt;your own&lt;/em&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I would talk about solutions like &lt;a href="https://joinmastodon.org"&gt;Mastodon&lt;/a&gt;, but I really think that the convenience and network effect of, say, Facebook’s multi-network empire will take decades to dismantle.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="conflict"></category><category term="people"></category><category term="politics"></category></entry><entry><title>On Foundation</title><link href="https://janithl.github.io/2020/10/on-foundation/" rel="alternate"></link><published>2020-10-31T20:05:00+05:30</published><updated>2020-10-31T20:05:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-10-31:/2020/10/on-foundation/</id><summary type="html">&lt;p&gt;I finished Isaac Asimov's seminal work, the first book of the &lt;a href="https://en.wikipedia.org/wiki/Foundation_series"&gt;Foundation trilogy&lt;/a&gt;,
yesterday. This is &lt;a href="https://www.goodreads.com/review/show/3621843372"&gt;my short review&lt;/a&gt; that I added on Goodreads:&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I think it's a bit harsh to rate this book using modern standards when it was
written in the 1940s. Yes, it's not as fast paced …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I finished Isaac Asimov's seminal work, the first book of the &lt;a href="https://en.wikipedia.org/wiki/Foundation_series"&gt;Foundation trilogy&lt;/a&gt;,
yesterday. This is &lt;a href="https://www.goodreads.com/review/show/3621843372"&gt;my short review&lt;/a&gt; that I added on Goodreads:&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I think it's a bit harsh to rate this book using modern standards when it was
written in the 1940s. Yes, it's not as fast paced or as expansive as modern SciFi,
and there is a woeful lack of female characters (only one gets a speaking part).
But modern SciFi didn't exist when Asimov wrote this, and so much of it even to
this day draws from the vein Asimov struck (the parallels with the Star Wars universe
a few decades later is notable, for example).&lt;/p&gt;
&lt;p&gt;Instead, it might be a good idea to look at where Asimov himself drew inspiration
from: Edward Gibbon's &lt;a href="https://en.wikipedia.org/wiki/The_History_of_the_Decline_and_Fall_of_the_Roman_Empire"&gt;&lt;em&gt;The History of the Decline and Fall of the Roman Empire&lt;/em&gt;&lt;/a&gt;.
Basically, we can class the work as a &lt;em&gt;space history&lt;/em&gt;, concerning how vast empires
decay, how the people living in the midst of such empires experience this fall much
more differently than the people living in the peripheries, and how opportunists
come for the scraps. One wonders how Asimov predicted so well the work of the oligarchs
and pocket dictators after the fall of his native Soviet Union, and fifty years before
the fact.&lt;/p&gt;
&lt;p&gt;What I found strikingly modern though are its takes on religion as a means of social
control, ivory tower academics who were unconcerned with all but dogma while the Rome
that sustained their work burned around them, and how societies tend to reject
science and technology it doesn't understand-a theme that reverberates well in
today's post-Covid world.&lt;/p&gt;</content><category term="conflict"></category><category term="people"></category><category term="politics"></category></entry><entry><title>Tagged Template Literals are Awesome!</title><link href="https://janithl.github.io/2020/07/js-template-literals/" rel="alternate"></link><published>2020-07-05T07:20:00+05:30</published><updated>2020-07-05T07:20:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-07-05:/2020/07/js-template-literals/</id><summary type="html">&lt;p&gt;You will often need to implement text that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Highlighted Text" src="https://janithl.github.io/images/highlighted-text.png"&gt;&lt;/p&gt;
&lt;p&gt;Now, it's fairly simple enough to do in HTML, but when you do it in React Native
it looks a bit gnarly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;Text style={styles.text}&amp;gt;
  You’re going to &amp;lt;Text style={styles.highlighted}&amp;gt;send a message&amp;lt;/Text&amp;gt; to …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;You will often need to implement text that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Highlighted Text" src="https://janithl.github.io/images/highlighted-text.png"&gt;&lt;/p&gt;
&lt;p&gt;Now, it's fairly simple enough to do in HTML, but when you do it in React Native
it looks a bit gnarly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;Text style={styles.text}&amp;gt;
  You’re going to &amp;lt;Text style={styles.highlighted}&amp;gt;send a message&amp;lt;/Text&amp;gt; to{&amp;quot; &amp;quot;}
  &amp;lt;Text style={styles.highlighted}&amp;gt;Pingpong&amp;lt;/Text&amp;gt;. Please confirm?
&amp;lt;/Text&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, I prefer to keep strings like this in a separate file in React Native, to make
the frequent requests for text changes contained to a single file. But a complex
template string like this was impossible to store that way, until...&lt;/p&gt;
&lt;h3&gt;Enter Tagged Template Literals&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.taniarascia.com/understanding-template-literals/"&gt;This post by Tania Rascia&lt;/a&gt; opened my eyes to the power of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;Tagged Template Literals&lt;/a&gt;
in JS. Seeing this example blew my mind:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;expressions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;finalString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Loop through all expressions&lt;/span&gt;
  &lt;span class="nx"&gt;expressions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;finalString&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;&amp;lt;/strong&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// Add the last string literal&lt;/span&gt;
  &lt;span class="nx"&gt;finalString&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;finalString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="sb"&gt;`This is a string with &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; and &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; and &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; interpolated inside.`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Okay, with a quick few tweaks we can definitely apply this to React Native, right?&lt;/p&gt;
&lt;h3&gt;Highlighting Text in React Native&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;const highlightText = (baseStyle, highlightStyle) =&amp;gt; (strings, ...values) =&amp;gt; (
  &amp;lt;Text style={baseStyle}&amp;gt;
    {strings.map((string, index) =&amp;gt; (
      &amp;lt;&amp;gt;
        {string}
        &amp;lt;Text style={highlightStyle}&amp;gt;
          {values[index]}
        &amp;lt;/Text&amp;gt;
      &amp;lt;/&amp;gt;
    ))}
  &amp;lt;/Text&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note I am using a higher order function so that I can pass in custom styles. We can also
pass in other stuff like entire components, if that is the requirement.&lt;/p&gt;
&lt;p&gt;Now, we could store the Tagged Template Literal and use it wherever in our JSX.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;const action = &amp;quot;send a message&amp;quot;;
const user = &amp;quot;Pingpong&amp;quot;;
const description = highlightText(
  styles.text,
  styles.highlight
)`You’re going to ${action} to ${user}. Please confirm?`;

// in the render method
&amp;lt;Text&amp;gt;{description}&amp;lt;/Text&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aaand, we're done! 🎉&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; Many of you will rightly wonder if &lt;code&gt;action&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt;, and &lt;code&gt;styles&lt;/code&gt; will need
to be defined in the same file as the Template Literal. No, we can simply make it a
function and pass these values direct from the component, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;const description = (user, action, styles) =&amp;gt; highlightText(
  styles.text,
  styles.highlight
)`You’re going to ${action} to ${user}. Please confirm?`;

// in the render method
&amp;lt;Text&amp;gt;{description(&amp;#39;Pingpong&amp;#39;, &amp;#39;Send a message&amp;#39;, styles)}&amp;lt;/Text&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty cool, right?&lt;/p&gt;</content><category term="code"></category><category term="design"></category><category term="js and ts"></category><category term="react"></category></entry><entry><title>Building Flagitect</title><link href="https://janithl.github.io/2020/06/building-flagitect/" rel="alternate"></link><published>2020-06-28T09:55:00+05:30</published><updated>2020-06-28T09:55:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-06-28:/2020/06/building-flagitect/</id><summary type="html">&lt;p&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.flagitect"&gt;Flagitect just hit version 1.2.0&lt;/a&gt;, and so this is a brief introduction
into the technical aspects of how the app is structured.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Flagitect v1.2.0" src="https://janithl.github.io/images/flagitect-1.2.0.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Stack&lt;/h3&gt;
&lt;p&gt;The app is written in React Native (currently version 0.62). There is no navigation
library in use, as the app only needs some modals …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.flagitect"&gt;Flagitect just hit version 1.2.0&lt;/a&gt;, and so this is a brief introduction
into the technical aspects of how the app is structured.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Flagitect v1.2.0" src="https://janithl.github.io/images/flagitect-1.2.0.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Stack&lt;/h3&gt;
&lt;p&gt;The app is written in React Native (currently version 0.62). There is no navigation
library in use, as the app only needs some modals in the UI at the moment. The editor
uses &lt;a href="https://github.com/react-native-community/react-native-svg"&gt;react-native-svg&lt;/a&gt; to render the flags. &lt;a href="https://github.com/joltup/rn-fetch-blob"&gt;rn-fetch-blob&lt;/a&gt; is used to save
the various output files (as a PNG raster or SVG vector inside an HTML) to device storage.&lt;/p&gt;
&lt;h3&gt;State Management&lt;/h3&gt;
&lt;p&gt;State is managed using a &lt;a href="https://reactjs.org/docs/hooks-reference.html#usereducer"&gt;single &lt;code&gt;useReducer&lt;/code&gt; hook&lt;/a&gt; near the root of the component
tree. The store is currently divided into 3 parts with their own reducer functions:
flag, ui, and charges. I found this approach had most of the advantages of Redux (since
the component tree was shallow and I didn't need to use the Context API) when it came to
composing the state and reducers. I use two &lt;code&gt;useEffect&lt;/code&gt; hooks to store the state in
device storage&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; whenever it changes, and load it from storage at app start.&lt;/p&gt;
&lt;h3&gt;Components&lt;/h3&gt;
&lt;p&gt;There is your standard &lt;code&gt;Header&lt;/code&gt;, &lt;code&gt;Footer&lt;/code&gt;, &lt;code&gt;Menu&lt;/code&gt; etc. components, and a bunch
of &lt;code&gt;renderSomething&lt;/code&gt; components that render either charges or divisions. Most of the
action happens inside the &lt;code&gt;Editor&lt;/code&gt; component, and we're using SVG—a fantastic language
that really should get more love—for the design and layout of shapes and designs. I
used a bunch of SVG features such as &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Patterns"&gt;patterns&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform"&gt;transform&lt;/a&gt; to enable various
rendering needs.&lt;/p&gt;
&lt;h3&gt;Finally&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/Flagitect"&gt;Flagitect is completely free and open source (MIT licensed)&lt;/a&gt;, and I'd love for
people using it to submit issues and PRs, or even fork it and make things better. I
found that Google Play was lacking when it came to flag design apps, and so I created
Flagitect in the hope that amateur vexillologists like myself would find it useful. ☺️&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;For this, I'm using &lt;a href="https://github.com/react-native-community/async-storage"&gt;React Native Async Storage&lt;/a&gt; as this functionality has been spun off from the React Native core.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="design"></category><category term="js and ts"></category><category term="react"></category></entry><entry><title>Late Night: A Timeline</title><link href="https://janithl.github.io/2020/05/late-night-a-timeline/" rel="alternate"></link><published>2020-05-29T21:50:00+05:30</published><updated>2020-05-29T21:50:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-05-29:/2020/05/late-night-a-timeline/</id><summary type="html">&lt;p&gt;I created this little timeline graphic as a crutch for my non-American self trying
to navigate the complex history, culture, and inter-network rivalries of American
Late Night TV shows.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Late Night Timeline" src="https://janithl.github.io/images/late-night-timeline.png"&gt;&lt;/p&gt;
&lt;p&gt;There are some shows that should be mentioned but aren’t, because they weren’t on
the big three:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Late_Show_(1986_talk_show)"&gt;The Late …&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;I created this little timeline graphic as a crutch for my non-American self trying
to navigate the complex history, culture, and inter-network rivalries of American
Late Night TV shows.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Late Night Timeline" src="https://janithl.github.io/images/late-night-timeline.png"&gt;&lt;/p&gt;
&lt;p&gt;There are some shows that should be mentioned but aren’t, because they weren’t on
the big three:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Late_Show_(1986_talk_show)"&gt;The Late Show&lt;/a&gt;/&lt;a href="https://en.wikipedia.org/wiki/The_Joan_Rivers_Show"&gt;The Joan Rivers Show&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Arsenio_Hall_Show"&gt;The Arsenio Hall Show&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Jon_Stewart_Show"&gt;The Jon Stewart Show&lt;/a&gt; on MTV&lt;/li&gt;
&lt;li&gt;The various syndicated versions of &lt;a href="https://en.wikipedia.org/wiki/The_Dick_Cavett_Show"&gt;The Dick Cavett Show&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Daily_Show"&gt;The Daily Show&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/The_Colbert_Report"&gt;The Colbert Report&lt;/a&gt; on Comedy Central (Stewart says
   Letterman called them the “cable twins”)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Conan_(talk_show)"&gt;Conan&lt;/a&gt; on TBS (my current favourite)&lt;/li&gt;
&lt;/ol&gt;</content><category term="data"></category><category term="design"></category></entry><entry><title>Cheng Xin</title><link href="https://janithl.github.io/2020/05/cheng-xin/" rel="alternate"></link><published>2020-05-15T20:40:00+05:30</published><updated>2020-05-15T20:40:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-05-15:/2020/05/cheng-xin/</id><summary type="html">&lt;p&gt;&lt;img alt="Cheng Xin" src="https://janithl.github.io/images/cheng-xin.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Cheng Xin in space&lt;/p&gt;

&lt;p&gt;I recently finished &lt;a href="https://en.wikipedia.org/wiki/Death%27s_End"&gt;the last book&lt;/a&gt; in Liu Cixin's masterpiece trilogy, and
created this little piece in Krita.&lt;/p&gt;
&lt;p&gt;Cheng Xin's name translates to &lt;em&gt;sincerity&lt;/em&gt;. This single character gets so much
flak from fans of the trilogy, and gets hated far more than even genuine
villains. But …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Cheng Xin" src="https://janithl.github.io/images/cheng-xin.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Cheng Xin in space&lt;/p&gt;

&lt;p&gt;I recently finished &lt;a href="https://en.wikipedia.org/wiki/Death%27s_End"&gt;the last book&lt;/a&gt; in Liu Cixin's masterpiece trilogy, and
created this little piece in Krita.&lt;/p&gt;
&lt;p&gt;Cheng Xin's name translates to &lt;em&gt;sincerity&lt;/em&gt;. This single character gets so much
flak from fans of the trilogy, and gets hated far more than even genuine
villains. But everything she did, she did out of a sense of duty, out of genuine
love. She never used her vast riches or power for personal gain, but to save others.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; There &lt;em&gt;wouldn't be a staircase project&lt;/em&gt; without her genius. Or intelligence
encoded inside fairy tales if she didn't risk her life to fetch it without a moment's
hesitation. Or even food for Yun Tianming. 🤷🏽‍♀️&lt;/p&gt;</content><category term="conflict"></category><category term="design"></category><category term="people"></category></entry><entry><title>Chats with the Dead</title><link href="https://janithl.github.io/2020/02/chats-with-the-dead/" rel="alternate"></link><published>2020-02-23T01:00:00+05:30</published><updated>2020-02-23T01:00:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-02-23:/2020/02/chats-with-the-dead/</id><summary type="html">&lt;p&gt;&lt;img alt="Jaki, Maali, and DD" src="https://janithl.github.io/images/chats-with-the-dead.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Jaki, Maali, and DD on one of their vacations Down South circa late 1980s.&lt;/p&gt;

&lt;p&gt;I finished Shehan Karunatilaka's &lt;a href="https://www.goodreads.com/book/show/51122892-chats-with-the-dead"&gt;Chats with the Dead&lt;/a&gt; last week, and it was
incredible. As &lt;a href="https://twitter.com/ThimalG"&gt;Thimal&lt;/a&gt; puts it about Jaki, "how can a character say so little
but still be so amazing?".&lt;/p&gt;
&lt;p&gt;This Krita piece took …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Jaki, Maali, and DD" src="https://janithl.github.io/images/chats-with-the-dead.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Jaki, Maali, and DD on one of their vacations Down South circa late 1980s.&lt;/p&gt;

&lt;p&gt;I finished Shehan Karunatilaka's &lt;a href="https://www.goodreads.com/book/show/51122892-chats-with-the-dead"&gt;Chats with the Dead&lt;/a&gt; last week, and it was
incredible. As &lt;a href="https://twitter.com/ThimalG"&gt;Thimal&lt;/a&gt; puts it about Jaki, "how can a character say so little
but still be so amazing?".&lt;/p&gt;
&lt;p&gt;This Krita piece took all day to finish, and could still do with more polish... but
I'm sleepy.&lt;/p&gt;
&lt;p&gt;I'm also appending my review on Goodreads here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have been fascinated with Sri Lanka in the 80s. It was, in my reading, a bookend
in history, ending the bell-bottomed idealism 60s and 70s, and dawning Sri Lanka into
the horrors of war and insurrection... a history that would grow even more violent
well into the 90s and 00s. What little scraps I could find of its written history
I would mop up, because these things were never taught at school and never discussed
by the elders (who'd much rather forget).&lt;/p&gt;
&lt;p&gt;While Maali (and his privileged set of friends) is the canvas through which we explore
this reality, it is really a story of all that we lost; the young family that mourns
their murdered university lecturer/human rights advocate mother, the families that
left everything behind and ran-and still didn't make it, the thousands of kids who
disappeared overnight because their political leanings were suspect.&lt;/p&gt;
&lt;p&gt;Chats with the Dead is a start of a conversation that Sri Lanka has to have regarding
its past. It has been 30+ years since the brutal end of the Second JVP Insurrection,
and books like these and films like &lt;a href="https://en.wikipedia.org/wiki/Paangshu"&gt;Visakesa Chandrasekaram's Paangshu&lt;/a&gt; serve as
an important bridge that passes on these lessons (and the fact that justice was never
done) to a younger generation.&lt;/p&gt;
&lt;p&gt;P.S. I have been a fan of Shehan's since Chinaman, and I think this is a worthy
successor. Other than touching on conflict and race relations though, I think the
books have little in common, and that's a good thing. Chats with the Dead should be
judged on its own merits as a standalone book.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="conflict"></category><category term="design"></category><category term="people"></category><category term="politics"></category><category term="sexuality"></category></entry><entry><title>My 2020 guide to rewriting a piece-of-shit codebase</title><link href="https://janithl.github.io/2020/01/refactor-blues/" rel="alternate"></link><published>2020-01-31T15:32:00+05:30</published><updated>2020-01-31T15:32:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2020-01-31:/2020/01/refactor-blues/</id><summary type="html">&lt;p&gt;&lt;img alt="Soptair Enjiniya" src="https://janithl.github.io/images/engineering-meme.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Meme by
&lt;a href="https://www.facebook.com/JusticeForTharindu/photos/a.594439464358595/806533719815834/?type=3&amp;theater"&gt;Justice For Tharindu&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First, you need to make up your mind.&lt;/strong&gt; If you take this project on you &lt;em&gt;must&lt;/em&gt;
proactively try to make things better. How to do this will depend on a number of
factors and the support of the stakeholders, but you must &lt;em&gt;actively try&lt;/em&gt; to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Soptair Enjiniya" src="https://janithl.github.io/images/engineering-meme.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Meme by
&lt;a href="https://www.facebook.com/JusticeForTharindu/photos/a.594439464358595/806533719815834/?type=3&amp;theater"&gt;Justice For Tharindu&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First, you need to make up your mind.&lt;/strong&gt; If you take this project on you &lt;em&gt;must&lt;/em&gt;
proactively try to make things better. How to do this will depend on a number of
factors and the support of the stakeholders, but you must &lt;em&gt;actively try&lt;/em&gt; to make
the codebase a &lt;em&gt;better place&lt;/em&gt;, or you'd come to the end of your 2 or whatever
years looking after this garbage dump and not have anything good to show for it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Understand the system.&lt;/strong&gt; Learning the codebase might take time, but try to
figure out what the overarching concepts, the business logic, and what users
actually want to achieve. What users &lt;em&gt;want&lt;/em&gt; to do with the system and what the
system &lt;em&gt;currently does&lt;/em&gt; might be misaligned, so porting the thing with warts
and all into a shiny new shell might not make sense. Use that misalignment, make
it a chance to drive a wedge between the client and his software, and...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Try to get the stakeholders onboard.&lt;/strong&gt; Try to make a point about how the
shittiness of the current system is costing them customers and money. Businesses
usually care about reputation and the bottom line, so you have to make your case
in lingo they understand. Show them the numbers, show them how it could all be
better.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Break down the system into parts.&lt;/strong&gt; Moving everything wholesale into the new
system is not going to be practical in most cases. See where you can start
porting right now, and get to work. Things that could be services&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; on their
own, like reporting, exports, and external integrations, are good places to
start.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write tests.&lt;/strong&gt; If I could go back in time and teach my older self anything,
it's the value of writing tests first before getting down to implementations.
This one thing will make your code more reliable and add value. In the case of
a rewrite, this is even more straightforward: the user journeys are already
concrete and you can easily write test cases for them to guide the new
implementation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Get your team excited.&lt;/strong&gt; This has gone on long enough and I know you guys are
fatigued, but we can work together and make life less shit for ourselves and
our users. Try to understand their concerns and misgivings, but also don't
compromise in your quest to &lt;em&gt;make the world a better place&lt;/em&gt;. They'll thank you
later.&lt;/p&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;p&gt;I always learn these lessons too late, when the chance for me to &lt;em&gt;act&lt;/em&gt; on
them has already passed. But hey, maybe it'll come in handy someday.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I don't really mean &lt;em&gt;microservices&lt;/em&gt; here, though you could go for it if that makes sense for you.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="work"></category></entry><entry><title>A Simple Version Checker In Go</title><link href="https://janithl.github.io/2019/12/a-simple-version-checker-in-go/" rel="alternate"></link><published>2019-12-14T09:15:00+05:30</published><updated>2019-12-14T09:15:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-12-14:/2019/12/a-simple-version-checker-in-go/</id><summary type="html">&lt;p&gt;&lt;img alt="Version Check Output" src="https://janithl.github.io/images/version-output.png"&gt;&lt;/p&gt;
&lt;p&gt;My current work requires keeping track of more than a dozen live websites and
making sure that their versions are kept up to date. We have employed a small Go
program to make this possible, which enable us to scrape the generator meta tags
on the websites and thereby get …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Version Check Output" src="https://janithl.github.io/images/version-output.png"&gt;&lt;/p&gt;
&lt;p&gt;My current work requires keeping track of more than a dozen live websites and
making sure that their versions are kept up to date. We have employed a small Go
program to make this possible, which enable us to scrape the generator meta tags
on the websites and thereby get the version number&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The code is simple and uses Goroutines to let us concurrently connect to the sites.
The code we use in prod is a bit more specialised, but I've reproduced a version
that captures the essentials below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;encoding/json&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;io/ioutil&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;regexp&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Site type holds information about sites&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Site&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TimeTaken&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sites&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;Site&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Site A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://a.web.site&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;N/A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Site B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://b.web.site&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;N/A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Site C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://c.web.site&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;N/A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Parser type holds information about the parsing&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Parser&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;setURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;
    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Site&lt;/code&gt; is simply a struct that holds info about the particular site, and fields
to capture the version and the time taken to do the scrape&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;We've initialised a slice of sites with the URLs we need to scrape.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Parser&lt;/code&gt; simply encapsulates parsing behaviour, and has two more methods,
reproduced below. For each scrape, we initialise a new parser.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;getMatches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regexString&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regexString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FindStringSubmatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;N/A&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;getVersion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Fetch Error&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;ioutil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Parse Error&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMatches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(&amp;lt;meta name=\&amp;quot;generator\&amp;quot; content=\&amp;quot;)([^\&amp;quot;]+)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;getVersion()&lt;/code&gt; simply gets and reads the page body, and &lt;code&gt;getMatches()&lt;/code&gt; is a method
to try and match the generator tag regex and return the value of the tag.&lt;/p&gt;
&lt;p&gt;Now, we get to the main function and the &lt;code&gt;getSiteVersion()&lt;/code&gt; goroutine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;getSiteVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="kd"&gt;chan&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// to check the time taken&lt;/span&gt;

    &lt;span class="nx"&gt;site&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVersion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;TimeTaken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Since&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;String&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;sites&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="nx"&gt;getSiteVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;enc&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;getSiteVersion()&lt;/code&gt; gets called in a loop, initialises the Parser, does the scrape,
and does simple time keeping of how long a scrape takes. We don't use a &lt;a href="https://gobyexample.com/mutexes"&gt;mutex&lt;/a&gt;
when accessing the &lt;code&gt;sites&lt;/code&gt; slice here because each element is only accessed by one
Goroutine, but if this was not the case a mutex would be essential here.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;main()&lt;/code&gt;, we're simply using a channel called &lt;code&gt;done&lt;/code&gt; to make sure all the
Goroutines are done executing before we quit the application, and as a final step
we output the &lt;code&gt;sites&lt;/code&gt; slice as JSON. As an alternative, a &lt;a href="https://gobyexample.com/waitgroups"&gt;WaitGroup&lt;/a&gt; can be used.&lt;/p&gt;
&lt;p&gt;This is sadly the only piece of Go code I have written &lt;s&gt;at&lt;/s&gt; for work, but it does
its job admirably, and I would highly recommend Go for tasks like these.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/janithl/a7c7369785c0b7b26c17f7a2673f8bea"&gt;&lt;strong&gt;The full code can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Might not be a good idea for software with a known CVE list where letting an
attacker know your specific version will open you up to attacks.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;This piece of info is interesting in a site speed/debugging context.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="golang"></category></entry><entry><title>My take on doing 'Clean Architecture' in React (Part 2)</title><link href="https://janithl.github.io/2019/10/react-clean-architecture-part-2/" rel="alternate"></link><published>2019-10-14T08:28:00+05:30</published><updated>2019-10-14T08:28:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-10-14:/2019/10/react-clean-architecture-part-2/</id><summary type="html">&lt;p&gt;&lt;img alt="Core Folder Structure" src="https://janithl.github.io/images/clean-arch-folders.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://janithl.github.io/2019/10/react-clean-architecture-part-1/"&gt;In the last part&lt;/a&gt;, we broke the application core out, with layers for
entities, usecases, and infrastructure. The &lt;a href="https://github.com/janithl/react-clean-arch/tree/6224ee5f77b1398c41163ffedc78faf786962cc1"&gt;example code we used in the last
part (without breaking the core out) can be found on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now let's look at how we can implement the core. I will be using …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Core Folder Structure" src="https://janithl.github.io/images/clean-arch-folders.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://janithl.github.io/2019/10/react-clean-architecture-part-1/"&gt;In the last part&lt;/a&gt;, we broke the application core out, with layers for
entities, usecases, and infrastructure. The &lt;a href="https://github.com/janithl/react-clean-arch/tree/6224ee5f77b1398c41163ffedc78faf786962cc1"&gt;example code we used in the last
part (without breaking the core out) can be found on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now let's look at how we can implement the core. I will be using TypeScript
here because it has two things that we will make implementing Clean Architecture
much easier: types, and interfaces. &lt;a href="https://github.com/microsoft/TypeScript-React-Conversion-Guide"&gt;To add TypeScript to an existing React
project&lt;/a&gt;, we can simply run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yarn add -D typescript awesome-typescript-loader source-map-loader
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Entities&lt;/h3&gt;
&lt;p&gt;To separate out the core code from the rest of the app, so we'll first create a
subfolder called &lt;code&gt;core&lt;/code&gt;, with three subfolders for the Entity, Use Case, and
Infra layers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;src/core
├── entities
├── infrastructure
└── usecases
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Inside the &lt;code&gt;entities&lt;/code&gt; subfolder, we'll first create the &lt;code&gt;Item&lt;/code&gt; class which holds
Item entities. This is a domain entity that will be used throughout the app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will also create an &lt;code&gt;ItemRepository&lt;/code&gt; interface that will enable us to abstract
out the API calls (and maybe local storage caching later on) which actually get
us the items.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./Item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ItemRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note how it is returning a Promise (with a list of Items), as it will be an async
operation.&lt;/p&gt;
&lt;h3&gt;Use Cases&lt;/h3&gt;
&lt;p&gt;Then, we implement the &lt;code&gt;UserService&lt;/code&gt;. We are implementing the service after defining
an interface because this will make writing tests etc. easier. There are arguments
against single implementation interfaces, but that is a debate for another time. The
service simply gets the items from the repository and returns them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../entities/Item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ItemRepository&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../entities/ItemRepository&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ItemService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ItemServiceImpl&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ItemService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;itemRepo&lt;/span&gt;: &lt;span class="kt"&gt;ItemRepository&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kr"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ir&lt;/span&gt;: &lt;span class="kt"&gt;ItemRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;itemRepo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ir&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;itemRepo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice how the constructor of the service takes an item repository. This is the runtime
injection of dependencies that makes this &lt;strong&gt;super exciting&lt;/strong&gt;. We can swap implementations
at runtime and the service has no hard dependencies on &lt;code&gt;infrastructure&lt;/code&gt; code, instead
relying on an interface defined at the &lt;code&gt;entity&lt;/code&gt; layer.&lt;/p&gt;
&lt;h3&gt;Infrastructure&lt;/h3&gt;
&lt;p&gt;Finally, we implement the &lt;code&gt;UserRepository&lt;/code&gt; we defined in the &lt;code&gt;entity&lt;/code&gt; layer. It will
just be a simple API call using &lt;code&gt;fetch()&lt;/code&gt;. We should add error handling here, but I've
left it out for now for the sake of simplicity.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../entities/Item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ItemRepository&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../entities/ItemRepository&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ItemDTO&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;: &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ItemRepositoryImpl&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ItemRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;jsonUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jsonUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;: &lt;span class="kt"&gt;ItemDTO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note how we are defining an &lt;code&gt;ItemDTO&lt;/code&gt; here. This is your contract with the API, and will
change with time. The following line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;: &lt;span class="kt"&gt;ItemDTO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;is also very important. This is where the DTO is being mapped to a domain entity. We
can move this transformation to another file as our implementation grows in complexity,
as this code is on an architectural boundary and will change quite frequently.&lt;/p&gt;
&lt;h3&gt;All Together Now&lt;/h3&gt;
&lt;p&gt;We can now edit our Thunk to use the service instead of directly calling the API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;LIST_LOAD_REQUEST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;LIST_LOAD_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;LIST_LOAD_FAILURE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./Item.types&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ItemServiceImpl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../core/usecases/ItemService&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ItemRepositoryImpl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../core/infrastructure/ItemRepositoryImpl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refreshList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LIST_LOAD_REQUEST&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemRepo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ItemRepositoryImpl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ItemServiceImpl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itemRepo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;itemService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LIST_LOAD_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LIST_LOAD_FAILURE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first three lines within the try hold the essence of any dependency injection setup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemRepo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ItemRepositoryImpl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, we initalise the repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ItemServiceImpl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itemRepo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, we inject it into the service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;itemService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetItems&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And finally, we access the methods offered by the service.&lt;/p&gt;
&lt;p&gt;It's good to keep these steps explicitly defined, so that the flow is clear and can
be changed in the future.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;And that's it! We've taken our core out and implemented it in a completely isolated
fashion that doesn't depend on infrastructure concerns. This makes things nice and
testable (I'll try to add some tests to the repo soon!), and makes you think about
the parts of your code that can (and definitely will) change—and how to make sure
that change is contained.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the reason we do not put SQL in JSPs. This is the reason we do not generate
HTML in the modules that compute results. This is the reason that business rules
should not know the database schema. This is the reason we separate concerns.&lt;/p&gt;
&lt;p&gt;Another wording for the Single Responsibility Principle is: "Gather together the
things that change for the same reasons. Separate those things that change for
different reasons."&lt;/p&gt;
&lt;p&gt;If you think about this you’ll realize that this is just another way to define
cohesion and coupling. We want to increase the cohesion between things that change
for the same reasons, and we want to decrease the coupling between those things
that change for different reasons.&lt;/p&gt;
&lt;p&gt;— Uncle Bob&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;This series of posts is dedicated to &lt;a href="https://www.linkedin.com/in/mahasenbandara/"&gt;Mr. Mahasen Bandara&lt;/a&gt;, architect extraordinaire,
from whom I had the priviledge of learning about Robert C. Martin and architectural
boundaries and a ton of other architectural and programming practicies.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/react-clean-arch"&gt;&lt;strong&gt;The full code for this part can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="code"></category><category term="design"></category><category term="js and ts"></category><category term="react"></category><category term="work"></category></entry><entry><title>My take on doing 'Clean Architecture' in React (Part 1)</title><link href="https://janithl.github.io/2019/10/react-clean-architecture-part-1/" rel="alternate"></link><published>2019-10-06T19:10:00+05:30</published><updated>2019-10-06T19:10:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-10-06:/2019/10/react-clean-architecture-part-1/</id><summary type="html">&lt;p&gt;&lt;img alt="Clean Architecture" src="https://janithl.github.io/images/clean-arch-diagram.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Clean Architecture, simplified.&lt;/p&gt;

&lt;p&gt;I'm a huge fan of Robert C. Martin's work in general, and &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;Clean Architecture&lt;/a&gt; in
particular. I'm frequently on the lookout for how to apply it to the different system
architectures and frameworks we work with.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Which modules should be decoupled? I think the rule is similar …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Clean Architecture" src="https://janithl.github.io/images/clean-arch-diagram.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Clean Architecture, simplified.&lt;/p&gt;

&lt;p&gt;I'm a huge fan of Robert C. Martin's work in general, and &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;Clean Architecture&lt;/a&gt; in
particular. I'm frequently on the lookout for how to apply it to the different system
architectures and frameworks we work with.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Which modules should be decoupled? I think the rule is similar to the previous
rule: &lt;em&gt;Any module that changes frequently should be decoupled from the rest of the
system.&lt;/em&gt; — Uncle Bob&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's a damn shame that most of the code we are told to write in guides and documentation
(often written by people who are heavily invested in the framework that the docs are
about) are very tightly coupled to the framework, libraries, and persistence implementation
(as well as the REST APIs that are called—how many of us have had to do system-wide
changes because the response object from the API changed?)&lt;/p&gt;
&lt;p&gt;Today, in part 1 of a 2 part series, I'll write a bit about what I think is a good way
to implement Clean Architecture in React JS and React Native apps&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;Why?&lt;/h3&gt;
&lt;p&gt;The advantages of switching to Clean Architecture are &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;listed out in detail on Uncle Bob's
blog&lt;/a&gt;, but I am going for three main objectives with regards to having this architecture
on our React app:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make the Core 100% testable:&lt;/strong&gt; All external dependencies (the UI, local storage,
   REST APIs etc) can be mocked out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Portability:&lt;/strong&gt; If we need to port the app to Vue JS tomorrow, the core can still
   be put there wholesale. We can also explore sharing the core between the frontend and
   backend (if your backend is written in Node or something).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prevent 'Change Propagation':&lt;/strong&gt; If the REST API's response object changes, or we
   change the caching mechanism, or any such change happens upstream of the final consumer
   (the UI), those changes should not cause changes downstream.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Keep in mind that one of the most important fundamentals of Clean Architecture is to
recognise where your architectural boundaries are, and to ensure that calls across those
boundaries are done using well defined interfaces and contracts. The response object
changing does not change the contract, since the core sets the contract and the code that
calls the API and parses its responses merely implements it. Your DTO is changing? It's
up to the API component to massage that into the existing domain entity, sorry.&lt;/p&gt;
&lt;h3&gt;Standard React async call architecture&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Standard React architecture" src="https://janithl.github.io/images/basic-react-arch.png"&gt;&lt;/p&gt;
&lt;p&gt;Okay, so this a very standard and common pattern when writing the most common kind of
interface, i.e. call an API, display some data in a component. You could be using Redux
for state, or React hooks, or component state, but this diagram barely changes because
in essence the user performs an action, which results in an API call, which updates the
state and hence the UI.&lt;/p&gt;
&lt;p&gt;Your component code would look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;const ItemList = ({ items, refreshList }) =&amp;gt; (
  &amp;lt;div&amp;gt;
    &amp;lt;button onClick={refreshList}&amp;gt;Refresh&amp;lt;/button&amp;gt;
    &amp;lt;ul&amp;gt;
      {items.map(item =&amp;gt; (
        &amp;lt;li key={item.id}&amp;gt;{item.name}&amp;lt;/li&amp;gt;
      ))}
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It'll be hooked up to Redux using something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapStateToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;refreshList&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refreshList&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapStateToProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;ItemList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And I'd guess your Thunk (or Saga) would look a bit like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refreshList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;LIST_LOAD_REQUEST&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://your.api/listdata&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;LIST_LOAD_SUCCESS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;LIST_LOAD_FAILURE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty simple and familiar, right?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Let's break it&lt;/em&gt; 😈&lt;/p&gt;
&lt;h3&gt;Identifying boundaries&lt;/h3&gt;
&lt;p&gt;Now, I would like to start off by saying it would be unwise to try to break React
and whatever state management solution you use using Clean Architecture. Yes, it's
good to keep them isolated but I'd suggest using React patterns such as presentational
components and containers to do that—this is because Redux and the ilk are tightly
tied to React's Context API, and it would be a massive hassle to handle all that
complexity and coupling in our core. So let's keep it out.&lt;/p&gt;
&lt;p&gt;I'm thinking of having 3 major components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;UI:&lt;/strong&gt; This is in Infrastructure, and is basically React + Redux&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network and Persistence:&lt;/strong&gt; Also in Infrastructure. I am thinking of hiding the
   API complexity behind a repository interface, and to implement local storage for
   caching if necessary inside this repo implementation itself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application Core:&lt;/strong&gt; This is in the Use Case and Entity layers, and is where the
   magical business logic et al. happens.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The component diagram, in my head, looks a bit like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="React with Clean Architecture" src="https://janithl.github.io/images/clean-react-arch-1.png"&gt;&lt;/p&gt;
&lt;p&gt;But wait, where's are we calling the API and getting the data for items? We need to
include an &lt;code&gt;ItemRepository&lt;/code&gt; interface, and an implementation for it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="React with Clean Architecture, updated" src="https://janithl.github.io/images/clean-react-arch-2.png"&gt;&lt;/p&gt;
&lt;p&gt;This is one of the coolest things about &lt;a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle"&gt;Dependency Inversion&lt;/a&gt;, in that all the
arrows are flowing inwards. In this case, &lt;code&gt;ItemService&lt;/code&gt; depends on the interface
&lt;code&gt;ItemRepository&lt;/code&gt;—which is in the Entity layer—and not on its concrete implementation
which is on a lower layer and will only be injected during runtime. This has several
benefits, &lt;a href="https://janithl.github.io/2019/10/react-clean-architecture-part-2/"&gt;which we'll explore in the next part&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The overriding rule that makes this architecture work is The Dependency Rule. This
rule says that source code dependencies can only point inwards. Nothing in an inner
circle can know anything at all about something in an outer circle. In particular,
the name of something declared in an outer circle must not be mentioned by the code
in the an inner circle. That includes, functions, classes. variables, or any other
named software entity.&lt;/p&gt;
&lt;p&gt;By the same token, data formats used in an outer circle should not be used by an inner
circle, especially if those formats are generate by a framework in an outer circle. We
don’t want anything in an outer circle to impact the inner circles.&lt;/p&gt;
&lt;p&gt;— Uncle Bob&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/react-clean-arch/tree/6224ee5f77b1398c41163ffedc78faf786962cc1"&gt;&lt;strong&gt;The full code for this part can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;With or without Redux (or Redux-like) state management&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="design"></category><category term="js and ts"></category><category term="react"></category><category term="work"></category></entry><entry><title>On-Premise CloudWatch Metrics with AWS CLI</title><link href="https://janithl.github.io/2019/10/cloudwatch-metrics-aws-cli/" rel="alternate"></link><published>2019-10-02T21:16:00+05:30</published><updated>2019-10-02T21:16:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-10-02:/2019/10/cloudwatch-metrics-aws-cli/</id><summary type="html">&lt;p&gt;&lt;img alt="Have you tried AWS CLI?" src="https://janithl.github.io/images/aws-cli.jpg"&gt;&lt;/p&gt;
&lt;p&gt;CloudWatch is pretty cool, and looking at a metrics dashboard and setting up
alarms is pretty badass—especially when you're not a full-time DevOps and
don't have the time to worry about your &lt;em&gt;monitoring solution&lt;/em&gt; in addition to
the thing it's &lt;em&gt;supposed&lt;/em&gt; to look after.&lt;/p&gt;
&lt;p&gt;If you're running some of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Have you tried AWS CLI?" src="https://janithl.github.io/images/aws-cli.jpg"&gt;&lt;/p&gt;
&lt;p&gt;CloudWatch is pretty cool, and looking at a metrics dashboard and setting up
alarms is pretty badass—especially when you're not a full-time DevOps and
don't have the time to worry about your &lt;em&gt;monitoring solution&lt;/em&gt; in addition to
the thing it's &lt;em&gt;supposed&lt;/em&gt; to look after.&lt;/p&gt;
&lt;p&gt;If you're running some of your stuff outside AWS (cue gasps), &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-on-premise.html"&gt;CloudWatch agent&lt;/a&gt;
is supposed to have you covered, but after following the instructions to a
tee, I found that it wasn't doing what it said on the tin, and the agent was
refusing to start&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Anyhoo, I was running out of time and I absolutely had to get this very simple
metric into CloudWatch, and after 2 days of losing sleep and trying to make
the agent work, I gave up. Thankfully, the ever reliable &lt;a href="https://aws.amazon.com/cli/"&gt;AWS CLI&lt;/a&gt; was
there to pick me up.&lt;/p&gt;
&lt;p&gt;It turns out a simple &lt;code&gt;aws cloudwatch put-metric-data&lt;/code&gt; is all you need to push
metrics to CloudWatch. There's actually &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html"&gt;an entire doc on it&lt;/a&gt;, which I only
found while writing this post.&lt;/p&gt;
&lt;h3&gt;The Setup&lt;/h3&gt;
&lt;p&gt;You need to make sure you have a IAM role set up with the ability to push
metrics to CloudWatch, which is &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/create-iam-roles-for-cloudwatch-agent.html"&gt;covered in the CloudWatch agent docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For my setup, I just wanted to send the disk utilisation to CloudWatch, so I
created a shell script that looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;freeSpace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;df -m &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;NR==2{print $4}&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
/usr/local/bin/aws cloudwatch put-metric-data --metric-name my-server-FreeDisk &lt;span class="se"&gt;\&lt;/span&gt;
--value &lt;span class="nv"&gt;$freeSpace&lt;/span&gt; --unit Megabytes --namespace my-server --profile AmazonCloudWatchAgent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, I am using the &lt;code&gt;--profile&lt;/code&gt; flag to select the correct IAM user, which has
been added to my AWS &lt;code&gt;credentials&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;The shell script was simply called every 5 minutes from a cron job, and I had the
whole setup up and running in no time. You can also do fancy stuff like sending in
entire JSON files, which will surely come in handy if you want to work with Docker
stats etc.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Some issue about the instance not having an EC2 identifier, which—&lt;em&gt;duh&lt;/em&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="work"></category></entry><entry><title>A basic terrain generator in Go (Part 4)</title><link href="https://janithl.github.io/2019/09/go-terrain-gen-part-4/" rel="alternate"></link><published>2019-09-21T17:21:00+05:30</published><updated>2019-09-21T17:21:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-09-21:/2019/09/go-terrain-gen-part-4/</id><summary type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-3/"&gt;In the last part&lt;/a&gt;, we added fancy output code, and our output looks like
this now:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output with colours" src="https://janithl.github.io/images/go-terrain-gen/p4-output-initial.png"&gt;&lt;/p&gt;
&lt;p&gt;...which, if you've ever seen a map, isn't what terrain actually looks like.
The terrain around peaks tend to be at a similar height, and there is rarely
the random patchwork of heights we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-3/"&gt;In the last part&lt;/a&gt;, we added fancy output code, and our output looks like
this now:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output with colours" src="https://janithl.github.io/images/go-terrain-gen/p4-output-initial.png"&gt;&lt;/p&gt;
&lt;p&gt;...which, if you've ever seen a map, isn't what terrain actually looks like.
The terrain around peaks tend to be at a similar height, and there is rarely
the random patchwork of heights we see here. So let's fix that!&lt;/p&gt;
&lt;p&gt;But first...&lt;/p&gt;
&lt;h3&gt;Visualise Steps&lt;/h3&gt;
&lt;p&gt;Wouldn't it be cool to see how the terrain gets generated layer by layer
from the highest elevation to the lowest? Let's change our &lt;code&gt;Generate()&lt;/code&gt;
method to allow us to view this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewSteps&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// rand needs to be seeded, so we set the current&lt;/span&gt;
    &lt;span class="c1"&gt;// nanosecond timestamp as the seed&lt;/span&gt;
    &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;// iterate down from max elevation, assigning vals&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if the element has already been assigned, skip it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// if the random value meets our criteria, it&amp;#39;s a peak&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// if viewSteps is true, we print every step of the generation process,&lt;/span&gt;
        &lt;span class="c1"&gt;// sleep for a second, and clear the screen for the next step&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;viewSteps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;clear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's also add it as a CLI flag in our &lt;code&gt;main.go&lt;/code&gt; so that the user can
turn it on when they want.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;height of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;width of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;levels of elevation on the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;peaks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;percentage probability a peak will randomly appear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;steps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;show the generation steps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;terrainMap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, we can compile and run with the &lt;code&gt;--steps&lt;/code&gt; flag to view our little
generator in action:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output with steps" src="https://janithl.github.io/images/go-terrain-gen/p4-output-steps.gif"&gt;&lt;/p&gt;
&lt;p&gt;Groovy! 💃🏽&lt;/p&gt;
&lt;h3&gt;Neighbours&lt;/h3&gt;
&lt;p&gt;Like we discussed before, the map elements next to peaks need to be at a similar
height. My logic for this part is going to be: &lt;em&gt;if the element next to you is at
elevation e, then your elevation is e - 1&lt;/em&gt;. To take a really simple example,
elevation values would look like this around a peak:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Elevation values" src="https://janithl.github.io/images/go-terrain-gen/p4-elevation-values.png"&gt;&lt;/p&gt;
&lt;p&gt;We'll refine this later (adding cliffs!), but for now, it looks like we need to
find if you have an element adjacent to you at an elevation &lt;code&gt;e&lt;/code&gt;, so we'll define
a new unexported method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// adjacentElevation checks if an adjacent element&lt;/span&gt;
&lt;span class="c1"&gt;// to the given element (h, w) is at a given elevation&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;adjacentElevation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Go's &lt;code&gt;Min()&lt;/code&gt; and &lt;code&gt;Max()&lt;/code&gt; methods, as provided by &lt;a href="https://golang.org/pkg/math/"&gt;the &lt;code&gt;math&lt;/code&gt; package&lt;/a&gt;, work with
&lt;code&gt;float64&lt;/code&gt; numbers, so we'll also define two simple private functions to work with
&lt;code&gt;int&lt;/code&gt;s and get min and max values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, let's modify the &lt;code&gt;Generate()&lt;/code&gt; method to use &lt;code&gt;adjacentElevation()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Generate generates the terrain map&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewSteps&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// rand needs to be seeded, so we set the current&lt;/span&gt;
    &lt;span class="c1"&gt;// nanosecond timestamp as the seed&lt;/span&gt;
    &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;// iterate down from max elevation, assigning vals&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if the element has already been assigned, skip it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// if the element is next to a element with elevation x, it&lt;/span&gt;
                &lt;span class="c1"&gt;// should get elevation x - 1&lt;/span&gt;
                &lt;span class="c1"&gt;// alternately, if the random value meets our criteria, it&amp;#39;s a peak&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;adjacentElevation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// if viewSteps is true, we print every step of the generation process,&lt;/span&gt;
        &lt;span class="c1"&gt;// sleep for a second, and clear the screen for the next step&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;viewSteps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;clear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's compile and run it!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output with adjacents" src="https://janithl.github.io/images/go-terrain-gen/p4-output-with-adjacent.gif"&gt;&lt;/p&gt;
&lt;p&gt;I think it's starting to look a lot like a real map now. 🗺&lt;/p&gt;
&lt;h3&gt;Cliffs&lt;/h3&gt;
&lt;p&gt;We know that in the real world, mountains aren't all shaped like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gradual" src="https://janithl.github.io/images/go-terrain-gen/p4-gradual.png"&gt;&lt;/p&gt;
&lt;p&gt;Sometimes, they look like this too:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gradual" src="https://janithl.github.io/images/go-terrain-gen/p4-cliff.png"&gt;&lt;/p&gt;
&lt;p&gt;Also, things are looking a wee bit too boxy, so let's add some randomness in the
form of a &lt;strong&gt;cliff probability&lt;/strong&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; to the &lt;code&gt;fullMap&lt;/code&gt; struct and the &lt;code&gt;NewFullMap()&lt;/code&gt;
function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cliffProbability&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="nx"&gt;elements&lt;/span&gt;                                                    &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// NewFullMap returns a new terrain map&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cliffProbability&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;cliffProbability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cliffProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We'll also edit &lt;code&gt;main.go&lt;/code&gt; to take &lt;code&gt;--cliffs&lt;/code&gt; as a CLI flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;height of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;width of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;levels of elevation on the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;peaks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;percentage probability a peak will randomly appear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;cliffProbability&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cliffs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;percentage probability a cliff will randomly appear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;steps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;show the generation steps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;terrainMap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;cliffProbability&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's now edit &lt;code&gt;adjacentElevation()&lt;/code&gt; to use cliffProbability:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;adjacentElevation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if this element is *not* randomly a cliff, return true&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cliffProbability&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Okay, now to compile and run:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output with cliffs" src="https://janithl.github.io/images/go-terrain-gen/p4-output-cliffs.png"&gt;&lt;/p&gt;
&lt;p&gt;Woo! 🥂 That looks much more realistic, and by tweaking around the
peak and cliff probabilities, and the number of elevation levels, we
can get maps that looks really nice.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So that concludes this long (and I hope &lt;em&gt;educational&lt;/em&gt;) series on using
Go to write a simple terrain generator on the CLI. I hope you enjoyed
following along as much as I enjoyed coding and writing about it!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/go-terrain-gen/tree/master/part4"&gt;&lt;strong&gt;The full code, as always, can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Just like our old friend &lt;strong&gt;peak probability&lt;/strong&gt;, this is the random
percentage of the probability of an element being a cliff.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="golang"></category></entry><entry><title>A basic terrain generator in Go (Part 3)</title><link href="https://janithl.github.io/2019/09/go-terrain-gen-part-3/" rel="alternate"></link><published>2019-09-19T20:49:00+05:30</published><updated>2019-09-19T20:49:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-09-19:/2019/09/go-terrain-gen-part-3/</id><summary type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-2/"&gt;In the last part&lt;/a&gt;, we refactored the code and added CLI flags. The output
right now looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Compile and Output After Flags" src="https://janithl.github.io/images/go-terrain-gen/p2-output-3.png"&gt;&lt;/p&gt;
&lt;p&gt;It doesn't really give us a sense of what the terrain looks like, though. Let's
change that.&lt;/p&gt;
&lt;h3&gt;Unicode&lt;/h3&gt;
&lt;p&gt;Unicode has some &lt;a href="https://en.wikipedia.org/wiki/Block_Elements"&gt;nice characters&lt;/a&gt; that can help us here. The ones we're …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-2/"&gt;In the last part&lt;/a&gt;, we refactored the code and added CLI flags. The output
right now looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Compile and Output After Flags" src="https://janithl.github.io/images/go-terrain-gen/p2-output-3.png"&gt;&lt;/p&gt;
&lt;p&gt;It doesn't really give us a sense of what the terrain looks like, though. Let's
change that.&lt;/p&gt;
&lt;h3&gt;Unicode&lt;/h3&gt;
&lt;p&gt;Unicode has some &lt;a href="https://en.wikipedia.org/wiki/Block_Elements"&gt;nice characters&lt;/a&gt; that can help us here. The ones we're
going to use today are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;U+2591      ░       Light shade
U+2592      ▒       Medium shade
U+2593      ▓       Dark shade
U+2588      █       Full block
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can update the &lt;code&gt;Print()&lt;/code&gt; function to use these new shade blocks. We've also
added a space to get the "no shade" effect.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mapShades&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;░&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;▒&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;▓&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;█&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// print out map&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// print a space (black) if elevation is zero&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// get the approximate shade nearest to the elevation number&lt;/span&gt;
            &lt;span class="nx"&gt;elementShade&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapShades&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;// get its index&lt;/span&gt;
            &lt;span class="nx"&gt;shadeIndex&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementShade&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="c1"&gt;// print out the corresponding unicode char&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapShades&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;shadeIndex&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// print a newline&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Go takes its types very seriously, so someone coming from a dynamically typed
language like PHP or Javascript might be a bit confused. But trust me, it is well
worth the trouble to specify all the type conversions manually, as the compiler
helps you find bugs with data types that would otherwise plague you at runtime.&lt;/p&gt;
&lt;p&gt;Let's compile and run it!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output after shades" src="https://janithl.github.io/images/go-terrain-gen/p3-output-shades.png"&gt;&lt;/p&gt;
&lt;p&gt;Very cool. I think it gives a good idea of how bad the generation algorithm
currently looks. 😅&lt;/p&gt;
&lt;h3&gt;Colour&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code#Colors"&gt;Terminals support colour&lt;/a&gt;, and all you got to do is send an ANSI escape
sequence&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; with your output. The colours I want to use are blue and cyan
for the sea and shallows, and green and yellow for the fields and mountains.
We'll modify &lt;code&gt;Print()&lt;/code&gt; to add these and output the codes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mapColours&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// blue, cyan, green, yellow&lt;/span&gt;
    &lt;span class="nx"&gt;mapShades&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;░&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;▒&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;▓&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;█&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// print out map&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// print a space (black) if elevation is zero&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// get the approximate colour nearest to the elevation number&lt;/span&gt;
            &lt;span class="nx"&gt;elementColour&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapColours&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;// get the colour index&lt;/span&gt;
            &lt;span class="nx"&gt;colourIndex&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementColour&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="c1"&gt;// get the approximate shade within that colour&lt;/span&gt;
            &lt;span class="nx"&gt;elementShade&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementColour&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementColour&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapShades&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;// get its index&lt;/span&gt;
            &lt;span class="nx"&gt;shadeIndex&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elementShade&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="c1"&gt;// print out the corresponding ANSI code and unicode char&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\033[%dm%s\033[0m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapColours&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;colourIndex&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;mapShades&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;shadeIndex&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// print a newline&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We first get the colour index, and then get the shade index within that
colour. Let's compile and run it with the same flags as before:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output after colours" src="https://janithl.github.io/images/go-terrain-gen/p3-output-colours.png"&gt;&lt;/p&gt;
&lt;p&gt;Fabulous! ❤️💚💙&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Being able to visualise your output is an important part of building any
program (which is a reason wireframes exist, I guess). With the graphics sorted,
&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-4/"&gt;our next improvements&lt;/a&gt; to the system&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; will be more apparent when we
implement them.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/go-terrain-gen/tree/master/part3"&gt;&lt;strong&gt;The full code for this part can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I learned this only &lt;em&gt;yesterday&lt;/em&gt;! &lt;a href="https://rosettacode.org/wiki/Terminal_control/Coloured_text#Go"&gt;Rosetta Code&lt;/a&gt; has code on how it's
done in all the languages.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;I'm planning to cover assigning values to elements near the peaks, and
how introducing a bit of randomness will help make things more realistic.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="golang"></category></entry><entry><title>A basic terrain generator in Go (Part 2)</title><link href="https://janithl.github.io/2019/09/go-terrain-gen-part-2/" rel="alternate"></link><published>2019-09-18T07:28:00+05:30</published><updated>2019-09-18T07:28:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-09-18:/2019/09/go-terrain-gen-part-2/</id><summary type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-1/"&gt;In the last part&lt;/a&gt;, we explored how to set up what was basically a matrix and
randomly assign elevation values to it. In this part, I wanted to explore how to deal
with assigning values to the elements adjacent to the peaks, and how to display
the map to users …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-1/"&gt;In the last part&lt;/a&gt;, we explored how to set up what was basically a matrix and
randomly assign elevation values to it. In this part, I wanted to explore how to deal
with assigning values to the elements adjacent to the peaks, and how to display
the map to users in a more intuitive way than a bunch of numbers.&lt;/p&gt;
&lt;p&gt;But...&lt;/p&gt;
&lt;p&gt;The code that we wrote on a single file in the previous part has global variables and
is all written in a single method, and this would get unmaintainable fast. Let's
first explore some of the nice features Go offers to help refactor this code.&lt;/p&gt;
&lt;h3&gt;Go modules&lt;/h3&gt;
&lt;p&gt;We have all our code in a &lt;code&gt;main.go&lt;/code&gt; file in our home directory. There used to be
a special folder to keep all the Go files called &lt;code&gt;$GOPATH&lt;/code&gt;, but as of &lt;a href="https://golang.org/doc/go1.13"&gt;Go 1.13&lt;/a&gt; this
is deprecated, and we can now initialise Go modules anywhere to maintain our
code. I've found &lt;a href="https://www.kablamo.com.au/blog/2018/12/10/just-tell-me-how-to-use-go-modules"&gt;this super simple guide to Go modules&lt;/a&gt; handy whenever I want
to use them.&lt;/p&gt;
&lt;p&gt;So, first, we move our &lt;code&gt;main.go&lt;/code&gt; file to a folder of our choosing. I want to put all
of the code in this part and the others as separate modules on Github, so I'm going
to name this module &lt;code&gt;github.com/janithl/go-terrain-gen/part2&lt;/code&gt;, to keep
things short and unambiguous. 😜&lt;/p&gt;
&lt;p&gt;&lt;img alt="Go Mod Init" src="https://janithl.github.io/images/go-terrain-gen/p2-go-mod-init.png"&gt;&lt;/p&gt;
&lt;p&gt;If we open up our &lt;code&gt;go.mod&lt;/code&gt; file, we can find that it's very sparse right now since
we don't have any dependencies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;module github.com/janithl/go-terrain-gen/part2

go 1.12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Multiple files&lt;/h3&gt;
&lt;p&gt;I don't want to keep all the terrain generator logic inside &lt;code&gt;main.go&lt;/code&gt;, so let's first
try to separate them out into two files.&lt;/p&gt;
&lt;p&gt;&lt;img alt="File Layout" src="https://janithl.github.io/images/go-terrain-gen/p2-file-layout-1.png"&gt;&lt;/p&gt;
&lt;p&gt;We move most of our app code into a different file, and a different package
called &lt;code&gt;terrain&lt;/code&gt;. Since in Go, you have to keep packages in their different folders,
we move the code into the &lt;code&gt;terrain&lt;/code&gt; folder, and name the file &lt;code&gt;terrain.go&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;terrain&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;math/rand&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

&lt;span class="c1"&gt;// we set the random chance of a peak occuring to 5%&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;

&lt;span class="c1"&gt;// Generate generates the terrain map&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// rand needs to be seeded, so we set the current&lt;/span&gt;
    &lt;span class="c1"&gt;// nanosecond timestamp as the seed&lt;/span&gt;
    &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;// iterate down from max elevation, assigning vals&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if the element has already been assigned, skip it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// if the random value meets our criteria, it&amp;#39;s a peak&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Print prints the terrain map out&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// print out map&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This leaves our &lt;code&gt;main.go&lt;/code&gt; file wonderfully sparse, and it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;github.com/janithl/go-terrain-gen/part2/terrain&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty neat, right? Let's execute it!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output" src="https://janithl.github.io/images/go-terrain-gen/p2-output-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Boom! 🎆&lt;/p&gt;
&lt;h3&gt;Encapsulate&lt;/h3&gt;
&lt;p&gt;I don't like the structure of &lt;code&gt;terrain.go&lt;/code&gt; right now, it's got stuff hanging around
and it's not very flexible (you can't even set the height and width of the map) and
extensible. Let's explore Go's &lt;a href="https://gobyexample.com/structs"&gt;structs&lt;/a&gt; and &lt;a href="https://gobyexample.com/methods"&gt;methods&lt;/a&gt; to make things cleaner.
We'll also use Go's &lt;a href="https://gobyexample.com/slices"&gt;slices&lt;/a&gt; to make the map resizeable at runtime.&lt;/p&gt;
&lt;p&gt;The fullMap struct will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="nx"&gt;elements&lt;/span&gt;                                  &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can also add a function to construct a new fullMap&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// NewFullMap returns a new terrain map&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note how the height and the width of the map can be set dynamically now, in
addition to the levels of elevation and the peak probability.&lt;/p&gt;
&lt;p&gt;We can now rewrite the &lt;code&gt;Generate()&lt;/code&gt; and &lt;code&gt;Print()&lt;/code&gt; functions to work with the
new fullMap struct, which is pretty straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Generate generates the terrain map&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// rand needs to be seeded, so we set the current&lt;/span&gt;
    &lt;span class="c1"&gt;// nanosecond timestamp as the seed&lt;/span&gt;
    &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;// iterate down from max elevation, assigning vals&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if the element has already been assigned, skip it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// if the random value meets our criteria, it&amp;#39;s a peak&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Print prints the terrain map out&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// print out map&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/janithl/go-terrain-gen/blob/master/part2/terrain/terrain.go"&gt;full code can be seen here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, the &lt;code&gt;main.go&lt;/code&gt; file will look a bit different, but this allows us
greater control over how the map is generated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;github.com/janithl/go-terrain-gen/part2/terrain&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's run it:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Output After Refactor" src="https://janithl.github.io/images/go-terrain-gen/p2-output-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Yass! 🙌🏾&lt;/p&gt;
&lt;h3&gt;Add Some Flags&lt;/h3&gt;
&lt;p&gt;We can add some &lt;a href="https://gobyexample.com/command-line-flags"&gt;CLI flags&lt;/a&gt; to expose these newly added features to users.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;flag&amp;quot;&lt;/span&gt;

    &lt;span class="s"&gt;&amp;quot;github.com/janithl/go-terrain-gen/part2/terrain&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;height of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;width of the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;levels of elevation on the map&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;peaks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;percentage probability a peak will randomly appear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;terrainMap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;terrain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewFullMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;peakProbability&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;terrainMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To run it, let's first build it with &lt;code&gt;go build&lt;/code&gt;, and point the output to the
&lt;code&gt;bin&lt;/code&gt; directory, and then execute with the CLI flags:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Compile and Output After Flags" src="https://janithl.github.io/images/go-terrain-gen/p2-output-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;bin/terrain --help&lt;/code&gt; returns the usage details:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Usage of bin/terrain:
  -elev int
        levels of elevation on the map (default 9)
  -height int
        height of the map (default 16)
  -peaks int
        percentage probability a peak will randomly appear (default 5)
  -width int
        width of the map (default 16)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty neat, Golang! 👏🏽👏🏽👏🏽&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I know this was supposed to be an exciting installment where we were going to
implement new features, but sometimes&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;, cleaning up the code you already have
is just as rewarding. It also makes adding new features easier and less prone to
bugs. &lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-3/"&gt;In the next part&lt;/a&gt;, we'll explore adding better visualisation for our map.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/go-terrain-gen/tree/master/part2"&gt;&lt;strong&gt;The full code for this part can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Note how I am returning the struct itself instead of my usual practice of
returning a pointer to the struct. This was due to &lt;a href="https://philpearl.github.io/post/bad_go_pointer_returns/"&gt;this post by Phil Pearl&lt;/a&gt;,
which taught me that it's more efficient to just return the struct itself.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Especially with a &lt;em&gt;beautiful&lt;/em&gt; language like Go. 😍&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="golang"></category></entry><entry><title>A basic terrain generator in Go (Part 1)</title><link href="https://janithl.github.io/2019/09/go-terrain-gen-part-1/" rel="alternate"></link><published>2019-09-17T21:12:00+05:30</published><updated>2019-09-17T21:12:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-09-17:/2019/09/go-terrain-gen-part-1/</id><summary type="html">&lt;p&gt;I haven't gushed about Go much on this blog&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, but I thought of writing a
small series of posts on a little piece of code I cooked up while I was
supposed to be doing other, more important things&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;Concept&lt;/h3&gt;
&lt;p&gt;So I was sitting there, zoning out and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I haven't gushed about Go much on this blog&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, but I thought of writing a
small series of posts on a little piece of code I cooked up while I was
supposed to be doing other, more important things&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;Concept&lt;/h3&gt;
&lt;p&gt;So I was sitting there, zoning out and browsing &lt;a href="https://www.reddit.com/r/CitiesSkylines/"&gt;one of my favourite subreddits&lt;/a&gt;,
when I thought about how terrain can be generated. And I thought if we were to
take a flat plane that sliced through the mountains at progressively decreasing
heights, you'd first get a few isolated spots (the peaks of the mountains), and on
the next iteration you'd always have the areas adjacent to these peaks showing up
(because mountain tops don't float in thin air).&lt;/p&gt;
&lt;p&gt;Computationally, if the map was a 2D array, we could randomly set a few elements
as peaks, and then generate the rest of the mountain around those "peak" elements.
Of course, with each iteration you would also have the possibility of running into
peaks that weren't high enough to be captured at the earlier iteration, so we
should keep randomly sprinkling peaks among the (not already assigned) elements
in the map.&lt;/p&gt;
&lt;h3&gt;Pseudocode&lt;/h3&gt;
&lt;p&gt;The pseudocode for the most basic version would look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# map initialised to 0s
map[height][width]

for elevation &amp;lt;- 5 to 0
    for h &amp;lt;- 0 to height
        for w &amp;lt;- 0 to width
            # if element is already assigned value, skip
            if map[h][w] &amp;gt; 0
                continue

            # if array element next to higher elevation
            # or picked as a peak randomly
            if map[h][w] next to elevation + 1 or random()
                map[h][w] &amp;lt;- elevation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Seems simple enough, right?&lt;/p&gt;
&lt;h3&gt;Go Implementation&lt;/h3&gt;
&lt;p&gt;The initialisations, loops and randomly picking an element to be a peak (and
printing the result out) seem straightforward enough, so let's get those out
of the way first and create our &lt;code&gt;main.go&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;math/rand&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

&lt;span class="c1"&gt;// we set the random chance of a peak occuring to 5%&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// rand needs to be seeded, so we set the current&lt;/span&gt;
    &lt;span class="c1"&gt;// nanosecond timestamp as the seed&lt;/span&gt;
    &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;// iterate down from max elevation, assigning vals&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if the element has already been&lt;/span&gt;
                &lt;span class="c1"&gt;// assigned, skip it&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// if the random value meets our criteria,&lt;/span&gt;
                &lt;span class="c1"&gt;// it&amp;#39;s a peak&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;peakProbability&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// print out map&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fullMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We run the code with &lt;code&gt;go run main.go&lt;/code&gt;, and get the following output:&lt;/p&gt;
&lt;p&gt;&lt;img alt="First Iteration" src="https://janithl.github.io/images/iteration-1.png"&gt;&lt;/p&gt;
&lt;p&gt;To quote Chernobyl&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;, it's "Not great, not &lt;em&gt;terrible&lt;/em&gt;".&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://janithl.github.io/2019/09/go-terrain-gen-part-2/"&gt;In the next part&lt;/a&gt; we'll look at a quick and dirty way to implement a
way to look at elements adjacent to our current element (the part of our
pseudocode that we didn't implement), and assign values to it—and better
visualisation of the terrain map.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/janithl/go-terrain-gen/tree/master/part1"&gt;&lt;strong&gt;The full code for this part can be found on Github.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Mostly because this blog has been &lt;em&gt;inactive&lt;/em&gt; for the last 2 years, but
more on that in a later post.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;My biggest gripe about my otherwise perfect workplace is that I don't
get to write Go for a living.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Which I haven't watched yet! 🙈&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="golang"></category></entry><entry><title>A meditation on ‘Kimi no Na wa’</title><link href="https://janithl.github.io/2019/07/kimi-no-na-wa/" rel="alternate"></link><published>2019-07-23T16:31:00+05:30</published><updated>2019-07-23T16:31:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-07-23:/2019/07/kimi-no-na-wa/</id><summary type="html">&lt;p&gt;&lt;img alt="Twilight" src="https://janithl.github.io/images/twilight.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Twilight&lt;/p&gt;

&lt;p&gt;I have been on a Makoto Shinkai binge this week. Even though I am usually
very selective and sparse with my media consumption, I had the fortune of
seeing &lt;em&gt;Kotonoha no Niwa&lt;/em&gt; (Garden of Words) at &lt;a href="https://medium.com/u/62e14a4a824e"&gt;Malinthe&lt;/a&gt;’s the weekend
before last, and I was hooked. 5 Centimetres per …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Twilight" src="https://janithl.github.io/images/twilight.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Twilight&lt;/p&gt;

&lt;p&gt;I have been on a Makoto Shinkai binge this week. Even though I am usually
very selective and sparse with my media consumption, I had the fortune of
seeing &lt;em&gt;Kotonoha no Niwa&lt;/em&gt; (Garden of Words) at &lt;a href="https://medium.com/u/62e14a4a824e"&gt;Malinthe&lt;/a&gt;’s the weekend
before last, and I was hooked. 5 Centimetres per Second had been on my
watchlist ever since &lt;a href="https://medium.com/u/5a8381932638"&gt;Dili&lt;/a&gt; showed me the gorgeous artwork, and I finally
got around to watching all three films over last weekend and finally watched
&lt;em&gt;Kimi no Na wa&lt;/em&gt; today.&lt;/p&gt;
&lt;p&gt;I know Shinkai gets a lot of flak for his characters not being 17-dimensional
and what not, but I think people miss the point a bit. Shinkai’s movies — the
way I felt them (as a complete novice) — are not about getting into the
individuals and their backstories, but rather about feelings and emotions that
transcend and are common to us all. To lift a metaphor from the movie, the
threads that bind us all.&lt;/p&gt;
&lt;p&gt;And the feels, oh do they come in waves. At the end of watching 5 Centimetres
I felt a sort of hollowness/longing that is difficult to explain. I had never
had a &lt;em&gt;“middle school girlfriend”&lt;/em&gt;. And yet, I don’t think that is what it’s
about. At least it wasn’t for me. It was about longing for a past that we will
never get back, a nostalgia that makes your lungs ache — for a time and place that
probably never existed. I can still remember the ocean breeze at my old school,
the golden rays of the afternoon sun, and the warm sand of the playground. We all
have our nostalgia, a fantasy world we try and escape to from our cold reality, and
I think Shinkai captures that emotion perfectly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Festival Night" src="https://janithl.github.io/images/festival-night.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;This scene. Her hair.&lt;/p&gt;

&lt;p&gt;The two previous Shinkai films I watched, however, did not quite prepare me for
the plot of &lt;em&gt;‘Kimi no Na wa’&lt;/em&gt;. There were moments in the film with so much raw emotion,
sadness, and shock that my hair was standing on end. The mid-movie plot twist (which I
won’t ruin for those of you who have yet to watch this masterpiece) made me stop, get up,
walk around to calm myself, and message Dili. I thought it was masterfully executed, and
I get why Dili raves about the originality of the story.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Musubi is the old way of calling the local guardian god. This word has profound meaning.
Tying thread is Musubi. Connecting people is Musubi. The flow of time is Musubi.&lt;/p&gt;
&lt;p&gt;These are all the god’s power. So the braided cords that we make are the god’s art and
represent the flow of time itself. They converge and take shape. They twist, tangle,
sometimes unravel, break, then connect again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Life itself can be summed up as threads flowing through time, couldn’t it? And to me that
was the imagery that struck with me the most. Our lives intersect, connect, diverge, and
flow along with each other’s. It is a recurring theme in Shinkai’s films, and to lift a
metaphor from &lt;em&gt;Kotonoha no Niwa&lt;/em&gt;, we are each ‘learning to walk’ in our own ways and our
own time.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://medium.com/@janithl/a-meditation-on-kimi-no-na-wa-3847eda33003"&gt;&lt;em&gt;Originally Posted on Medium&lt;/em&gt;&lt;/a&gt;. I have since watched &lt;em&gt;The Place Promised in Our Early Days&lt;/em&gt;,
&lt;em&gt;Children Who Chase Lost Voices&lt;/em&gt;, and some of Shinkai's short films as well. I eagerly await
&lt;em&gt;Weathering with You&lt;/em&gt;!&lt;/p&gt;</content><category term="biology"></category><category term="films"></category><category term="people"></category></entry><entry><title>Kottu Kontainers</title><link href="https://janithl.github.io/2019/02/kottu-kontainers/" rel="alternate"></link><published>2019-02-02T15:57:00+05:30</published><updated>2019-02-02T15:57:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2019-02-02:/2019/02/kottu-kontainers/</id><summary type="html">&lt;p&gt;Remember &lt;a href="https://kottu.org"&gt;Kottu&lt;/a&gt;? Those were the days. Anyway,
&lt;a href="https://github.com/janithl/Kottu2012"&gt;Kottu has always been a totally open-source project&lt;/a&gt;, and theoretically
it is as easy as cloning the git repo and... jumping a few hoops to set it
up on your own local machine or VPS.&lt;/p&gt;
&lt;p&gt;Except... the loops are tedious and there’s …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Remember &lt;a href="https://kottu.org"&gt;Kottu&lt;/a&gt;? Those were the days. Anyway,
&lt;a href="https://github.com/janithl/Kottu2012"&gt;Kottu has always been a totally open-source project&lt;/a&gt;, and theoretically
it is as easy as cloning the git repo and... jumping a few hoops to set it
up on your own local machine or VPS.&lt;/p&gt;
&lt;p&gt;Except... the loops are tedious and there’s a bunch of things that could go
wrong. There must be a better way, right?&lt;/p&gt;
&lt;p&gt;Enter &lt;a href="https://www.docker.com"&gt;Docker&lt;/a&gt;. It promises to solve one of the oldest complaints in
Computer Science, namely "it works on &lt;em&gt;my&lt;/em&gt; machine". I’ve been using Docker
at work for the past 6 months (hat tip to the wonderful &lt;a href="https://github.com/malitta"&gt;Malitta Nanayakkara&lt;/a&gt;
for getting me the job AND teaching me the basics of Docker) and my mind has
been simply blown away by how simple and effective it is, and how I barely
have to think about dependencies and reproducible environments anymore.&lt;/p&gt;
&lt;p&gt;I won't get into the background of Docker and how it works, but there’s this
&lt;a href="https://towardsdatascience.com/learn-enough-docker-to-be-useful-b7ba70caeb4b"&gt;wonderful series by Jeff Hale if you’re so inclined&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Step 1: Clone the Repo&lt;/h3&gt;
&lt;p&gt;It’s been almost over 2 years since I last messed with the Kottu source code,
so it’s naturally no longer on my machine. I run a git clone and download the
repo.&lt;/p&gt;
&lt;p&gt;I look through the instructions and they basically go like “run kottu.sql on
the mysql server which you *obviously* have running on your machine
(&lt;code&gt;#LAMPBoise&lt;/code&gt;) and then copy this into your webroot, update the config, and bam!
Kottu for the whole kadey!”.&lt;/p&gt;
&lt;p&gt;But we’re in 2019 and no one is stupid enough to run mysql and Apache on their
machines like that. I’m not even on Linux anymore! (&lt;strong&gt;the HORROR&lt;/strong&gt;! 21 year old
me writing Kottu would’ve spit in disgust if he knew I use a Mac now.)&lt;/p&gt;
&lt;h3&gt;Step 2: Look around the web for a docker-compose.yml file to hijack&lt;/h3&gt;
&lt;p&gt;No one &lt;em&gt;writes&lt;/em&gt; software anymore, we just copy paste snippets from a thousand
blog posts and StackOverflow answers, cobble it together, and pray it works.&lt;/p&gt;
&lt;p&gt;I found two articles on this setup, one from &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-laravel-nginx-and-mysql-with-docker-compose"&gt;DigitalOcean&lt;/a&gt; (excellent
resource) which is a bit Laravel-focused, and one from the
&lt;a href="http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm"&gt;Geeky Platypus blog&lt;/a&gt; which was more generic. Kottu is custom PHP, and the
Geeky Platypus &lt;code&gt;docker-compose.yml&lt;/code&gt; file was cleaner, so I used it as the base
with some bits pulled from the DigitalOcean guide. Note that both use nginx and
not Apache because we’re civilised human beings nowadays.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;

&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;webserver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx:alpine&lt;/span&gt;
    &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8000:80&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.:/var/www&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./docker/nginx/site.conf:/etc/nginx/conf.d/default.conf&lt;/span&gt;
    &lt;span class="nt"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;internal&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default&lt;/span&gt;
  &lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql:5.7&lt;/span&gt;
    &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3306:3306&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;kottu&lt;/span&gt;
      &lt;span class="nt"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;your_mysql_root_password&lt;/span&gt;
    &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./docker/dbdata:/var/lib/mysql/&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./docker/mysql/my.cnf:/etc/mysql/my.cnf&lt;/span&gt;
    &lt;span class="nt"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;internal&lt;/span&gt;
  &lt;span class="nt"&gt;php&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;php:5.6-fpm&lt;/span&gt;
    &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.&lt;/span&gt;
      &lt;span class="nt"&gt;dockerfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./docker/php/Dockerfile&lt;/span&gt;
    &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;.:/var/www&lt;/span&gt;
    &lt;span class="nt"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;internal&lt;/span&gt;

&lt;span class="nt"&gt;networks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bridge&lt;/span&gt;
  &lt;span class="nt"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;host&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Okay, there’s a bit to digest here:&lt;/p&gt;
&lt;p&gt;We’re creating three services that work together, namely webserver, php and db.
The webserver is straight up garden variety nginx running on Alpine Linux, which
is very popular for Docker images because of the tiny size. It is exposing port
&lt;code&gt;8000&lt;/code&gt; (traditional Kottu port) on Localhost, and directing traffic from there
to the standard &lt;code&gt;80&lt;/code&gt; port.&lt;/p&gt;
&lt;p&gt;The root directory of the repo is being mounted on &lt;code&gt;/var/www&lt;/code&gt;, and a nginx conf
file we have inside our Docker folder is being set as the &lt;code&gt;default.conf&lt;/code&gt; for
nginx. More on this conf file (and networking) later.&lt;/p&gt;
&lt;p&gt;The db service is based on a standard &lt;code&gt;mysql 5.7&lt;/code&gt; image&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, exposing the
standard mysql port of &lt;code&gt;3306&lt;/code&gt;, and with some env variables for setting the
database name and root password. We also mount a conf file and a data folder
so that database data is persisted across container restarts (internal container
data is by definition ephemeral, so if we don’t do this we will lose our data
if the container is ever down’d).&lt;/p&gt;
&lt;p&gt;The php service also has the repo root mounted to &lt;code&gt;/var/www&lt;/code&gt; (so that that most
important mama of all files, &lt;code&gt;index.php&lt;/code&gt; can be accessed), but there are some
additional dependencies we want to install not included in the standard
&lt;code&gt;php:5.6-fpm&lt;/code&gt; image it is based on, so we include a custom &lt;code&gt;Dockerfile&lt;/code&gt; (more
on that later). The DigitalOcean guide has port &lt;code&gt;9000&lt;/code&gt; being exposed by the php
container and everything, but I found that was unnecessary (and the Geeky
Platypus doesn’t use it either) so we don’t use that here.&lt;/p&gt;
&lt;h3&gt;Step 3: Networking&lt;/h3&gt;
&lt;p&gt;I’ve skipped talking about networking because networking in Docker deserves its
own blog post, really. The example in the setup we have above, though, is a good
starting point to talk about the amazeballs planet that is Docker networking.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Now, it is standard knowledge that not all services should be exposed to the
public internet. Ideally, we’d only expose things like SSH and the webserver
to incoming traffic. Everything else traditionally sits behind a firewall. With
this Docker Compose setup though, we have created two different networks which
serve our purpose much better than any finicky firewall rules would.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Networking" src="https://janithl.github.io/images/kottu/networking.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Internet traffic can enter the default network and hence
nginx, but it cannot enter the internal network.&lt;/p&gt;

&lt;p&gt;In our dual-network setup, internet traffic can access nginx through the external
(default) network (which uses the host driver, which allows it to 
&lt;a href="https://docs.docker.com/network/network-tutorial-host"&gt;bind directly to the Docker host’s network&lt;/a&gt;), but cannot access the internal
bridge network. nginx, which sits on both the default and internal networks, can
use the internal network to communicate with php and mysql.&lt;/p&gt;
&lt;p&gt;Note that this works for HTTP traffic (as our nginx container only exposes port
&lt;code&gt;80&lt;/code&gt;), but on the server you might use something like
&lt;a href="https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion"&gt;docker-letsencrypt-nginx-proxy-companion&lt;/a&gt; to make life easier (and support
HTTPS). It takes care of SSL certs and all that. You will have to replace the
default network in the compose file with the nginx-proxy network, attach the
webserver service to it, and add the &lt;code&gt;VIRTUAL_HOST&lt;/code&gt;, &lt;code&gt;LETSENCRYPT_HOST&lt;/code&gt;, 
&lt;code&gt;LETSENCRYPT_EMAIL&lt;/code&gt; env variables to make proxy companion pick up the hostname
and the certificates you need.&lt;/p&gt;
&lt;h3&gt;Step 4: PHP Dockerfile&lt;/h3&gt;
&lt;p&gt;We need to install the mysql client and the &lt;code&gt;PDO_Mysql&lt;/code&gt; PHP extension on the php
service, so we’ll create a Dockerfile for that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;FROM php:5.6-fpm

# install dependencies
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y mysql-client

# install php extensions
RUN docker-php-ext-install pdo_mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I later found out that none of the images on Kottu were showing up and it’s because
Timthumb (yes, Kottu &lt;em&gt;still&lt;/em&gt; uses Timthumb, please don’t hack us!) needs &lt;code&gt;GD&lt;/code&gt;, which
wasn’t installed. So let’s add those lines to the file too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Install GD and it&amp;#39;s dependencies

RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
libfreetype6-dev \
libjpeg62-turbo-dev \
libpng-dev \
&amp;amp;&amp;amp; docker-php-ext-install -j$(nproc) iconv \
&amp;amp;&amp;amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \
&amp;amp;&amp;amp; docker-php-ext-install -j$(nproc) gd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Step 5: The mysql and nginx conf files&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;my.cnf&lt;/code&gt; is so basic that it doesn’t even deserve mentioning, but obviously you can
add more configurations here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[mysqld]
general_log = 1
general_log_file = /var/lib/mysql/general.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;site.conf&lt;/code&gt; file for nginx is your standard nginx + php site config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.php&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;error_log&lt;/span&gt;  &lt;span class="s"&gt;/var/log/nginx/error.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri/&lt;/span&gt; &lt;span class="s"&gt;/index.php&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;\.php$&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;fastcgi_split_path_info&lt;/span&gt; &lt;span class="s"&gt;^(.+\.php)(/.+)&lt;/span&gt;$&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;fastcgi_pass&lt;/span&gt; &lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;fastcgi_index&lt;/span&gt; &lt;span class="s"&gt;index.php&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;fastcgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;fastcgi_param&lt;/span&gt; &lt;span class="s"&gt;SCRIPT_FILENAME&lt;/span&gt; &lt;span class="nv"&gt;$document_root$fastcgi_script_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;fastcgi_param&lt;/span&gt; &lt;span class="s"&gt;PATH_INFO&lt;/span&gt; &lt;span class="nv"&gt;$fastcgi_path_info&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It tells nginx to listen for traffic on port 80, make &lt;code&gt;/var/www&lt;/code&gt; the web root, try to
find static files for the paths that visitors are trying to access, and then redirect
those requests to &lt;code&gt;index.php&lt;/code&gt; if that fails, and pass php requests to &lt;code&gt;php:9000&lt;/code&gt; (which
means port &lt;code&gt;9000&lt;/code&gt; in the php service).&lt;/p&gt;
&lt;h3&gt;Step 6: Rock ’n’ Roll&lt;/h3&gt;
&lt;p&gt;We now get to say the magic words:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Containers Starting" src="https://janithl.github.io/images/kottu/containers-starting.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Ah, satisfaction...&lt;/p&gt;

&lt;p&gt;After the images and dependencies are downloaded and the containers are set up, a
&lt;code&gt;docker ps&lt;/code&gt;&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt; will reveal that three new containers have spun up and we’re ready
to roll. We direct our web browser to &lt;code&gt;localhost:8000&lt;/code&gt;, and...&lt;/p&gt;
&lt;p&gt;&lt;img alt="Database Issue" src="https://janithl.github.io/images/kottu/database-issue.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Victo- &lt;em&gt;oh god!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Whoops, we still need to import the database. But fear not, that’s pretty easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker-compose exec php bash
root@3836dc148c6a:/var/www/html# cd ..
root@3836dc148c6a:/var/www# ls
LICENSE  README.md  cache  config.php  docker  docker-compose.yml  html  img  index.php  kottu.sql  lib  static  templates  webcache
root@3836dc148c6a:/var/www# mysql -h db -u root -pyour_mysql_root_password kottu &amp;lt; kottu.sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I just bash’d into the container, ran the mysql client&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4"&gt;4&lt;/a&gt;&lt;/sup&gt; (remember installing that
via the Dockerfile earlier?) and redirected &lt;code&gt;kottu.sql&lt;/code&gt; (which holds the database
schema) into it. Now, things still look empty but not broken:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Empty Kottu" src="https://janithl.github.io/images/kottu/empty-kottu.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Did you guys know that Flickr still exists?&lt;/p&gt;

&lt;h3&gt;Step 7: Add a blog and fetch its posts&lt;/h3&gt;
&lt;p&gt;Let’s go to the Kottu Baas admin interface, which most people haven’t seen. Get
ready for some Web 2.0 super secure shit, yo.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Admin Login" src="https://janithl.github.io/images/kottu/admin-login.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Like all great login forms from 2012, the password is
SHA-1 hashed on the clientside itself! SEKURITEEH.&lt;/p&gt;

&lt;p&gt;After entering the default username/password combo of indi/indi, we are inside
the &lt;em&gt;uh-may-zin&lt;/em&gt; admin interface:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Admin Interface" src="https://janithl.github.io/images/kottu/admin-interface.png"&gt;&lt;/p&gt;
&lt;p&gt;We click “add a blog” and a &lt;strong&gt;POPUP&lt;/strong&gt; shows up! How wizard is that?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Adding Blogs" src="https://janithl.github.io/images/kottu/add-blog.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;The copyright being stuck in 2012 is just apt!&lt;/p&gt;

&lt;p&gt;In my bout of narcissism, I add my own blog and navigate to
&lt;code&gt;localhost:8000/admin/feedget/&amp;lt;secretkey&amp;gt;&lt;/code&gt;, and voila:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fetching Feeds" src="https://janithl.github.io/images/kottu/fetching-feeds.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;backendsecretkeywithunicorns! SEKURITEEH.&lt;/p&gt;

&lt;p&gt;Aaaand, finally:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Kottu working" src="https://janithl.github.io/images/kottu/kottu-working.png"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Even Timthumb works, uguise. :')&lt;/p&gt;

&lt;p&gt;And there we have it. Now you’ve got your own piece of 2012 tech running a
personalised version of Kottu on Docker! Next week, we cover how Kubern—&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p class="text-center text-muted"&gt;* * *&lt;/p&gt;

&lt;p&gt;Okay, this post isn’t the most comprehensible piece of writing I’ve done. It
feels rushed and under-explained, and yet resulted in a very long post. The
topics covered honestly require blog posts of their own, and time permitting,
I would do one or two over the course of the year. But here’s a start. And it
feels like a Friday night (and half of Saturday) well-spent setting up an ancient
piece of code on Docker&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6"&gt;6&lt;/a&gt;&lt;/sup&gt;, so that it becomes at least a tad more accessible.&lt;/p&gt;
&lt;p&gt;I think I need to attach a fair warning: &lt;strong&gt;DON’T RUN THIS IN PROD, FOLKS&lt;/strong&gt;. It’s
from 2012 and has security holes the size of the Mariana Trench in it, and it’s
a miracle that kottu.org still continues to run&lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7"&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://medium.com/@janithl/kottu-kontainers-c3c9833ecf65"&gt;&lt;em&gt;Originally Posted on Medium&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Another really cool thing about Docker that I missed mentioning in the post
is the ability to run different versions of, say, mysql or php (as your apps
need them) on different containers. This is really helpful if you have a bunch
of old code that can only run on an older version of php/python/whatever...&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Docker networking is seriously amazing, and they do things like adding
iptables records to make it possible. I would recommend reading the
&lt;a href="https://docs.docker.com/network/"&gt;Network section&lt;/a&gt; of the Docker docs.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Docker has some really cool commands that help you administer everything.
Some of my favourites are:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker ps&lt;/code&gt; — lists all the running containers&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker stats&lt;/code&gt; — container stats&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker-compose logs -f&lt;/code&gt; — logs from all the containers in the compose file&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker network ls&lt;/code&gt; — lists networks&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;A sharp-eyed reader might ask: "why not just run the mysql client from the
&lt;code&gt;exec&lt;/code&gt; command?". Well, I tried that and it gives some weird tty error that
I remember once solving, but I forgot how. This bash/mysql method described
here works without issue.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;This is a joke. I don't know Kubernetes. Who does, really? &lt;code&gt;¯\_(ツ)_/¯&lt;/code&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;I updated the repo and its README with how to do a Docker setup!&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;Hat tip to the mysterious maintainer who set up nginx and LetsEncrypt SSL
certs on the Kottu server!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Turns out it was trusty ol' &lt;a href="https://github.com/malinthe"&gt;Malinthe&lt;/a&gt;!&amp;#160;&lt;a class="footnote-backref" href="#fnref:7" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="code"></category><category term="docker"></category></entry><entry><title>Some things I wish I knew as a young startup dev</title><link href="https://janithl.github.io/2018/06/some-things-i-wish-i-knew-as-a-young-startup-dev/" rel="alternate"></link><published>2018-06-08T19:17:00+05:30</published><updated>2018-06-08T19:17:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2018-06-08:/2018/06/some-things-i-wish-i-knew-as-a-young-startup-dev/</id><summary type="html">&lt;p&gt;As some of you might know, I started my career as the first
developer at a startup, way back in 2012. It was a challenging
but rewarding experience, and I got to learn a lot and explore
the full breadth of the software stack. The following are some
learnings that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As some of you might know, I started my career as the first
developer at a startup, way back in 2012. It was a challenging
but rewarding experience, and I got to learn a lot and explore
the full breadth of the software stack. The following are some
learnings that I wish I could tell my younger self.&lt;/p&gt;
&lt;h3&gt;Prototype like your life depends on it&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“I know you guys are restless to get started, but before you
write a single line of code — Make a prototype and run it by your client”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I heard this line from one of the co-founders of a very successful
software services company. In a startup, the client might be your
founder who’s sitting in the desk in front of you, but code is costly
to work and rework. Always prototype, at least on paper. It’ll help
everyone visualise what they’re building, and see issues and limitations
before you even start on the implementation.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Paper Prototype" src="https://janithl.github.io/images/paper-prototype.jpg"&gt;&lt;/p&gt;
&lt;p class="text-center"&gt;Image by &lt;a href="https://www.flickr.com/photos/21218849@N03"&gt;Samuel Mann&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Write a spec, and check it twice&lt;/h3&gt;
&lt;p&gt;Software is all about the spec. It defines the scope and the tests that
need to pass to mark the work as done. A spec might be as simple as a user
story followed by some acceptance criteria in the &lt;a href="http://docs.behat.org/en/v2.5/guides/1.gherkin.html"&gt;Gherkin format&lt;/a&gt;, but it’s
very important for estimations, avoiding the dreaded scope creep, and writing
high quality code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A sample spec:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a &lt;strong&gt;logged in user&lt;/strong&gt;,&lt;/p&gt;
&lt;p&gt;I want to &lt;strong&gt;access the Account page&lt;/strong&gt;,&lt;/p&gt;
&lt;p&gt;so that I can &lt;strong&gt;see my Account Settings&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Acceptance criteria:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;Feature:&lt;/span&gt;&lt;span class="nf"&gt; Access account settings page&lt;/span&gt;

&lt;span class="k"&gt;Scenario:&lt;/span&gt;&lt;span class="nf"&gt; Janith accesses the account settings page&lt;/span&gt;

&lt;span class="k"&gt;Given &lt;/span&gt;&lt;span class="nf"&gt;I am logged in as &amp;quot;&lt;/span&gt;&lt;span class="s"&gt;janith@startup.lk&lt;/span&gt;&lt;span class="nf"&gt;&amp;quot;,&lt;/span&gt;
&lt;span class="k"&gt;And &lt;/span&gt;&lt;span class="nf"&gt;I am in the home page&lt;/span&gt;

&lt;span class="k"&gt;When &lt;/span&gt;&lt;span class="nf"&gt;I click on &amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Account&lt;/span&gt;&lt;span class="nf"&gt;&amp;quot; on the top menu,&lt;/span&gt;

&lt;span class="k"&gt;Then &lt;/span&gt;&lt;span class="nf"&gt;I am navigated to the &amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Account&lt;/span&gt;&lt;span class="nf"&gt;&amp;quot; page,&lt;/span&gt;
&lt;span class="k"&gt;And &lt;/span&gt;&lt;span class="nf"&gt;I can see my Account Settings.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember, you will most probably be your own QA, so write a solid automated
test suite that covers these conditions.&lt;/p&gt;
&lt;h3&gt;Timebox, timebox, timebox&lt;/h3&gt;
&lt;p&gt;You probably won’t have a Project Manager, nor will anyone really care about
Agile or sprints. The constant mantra will be &lt;em&gt;“just get it shipped”&lt;/em&gt;. This is
damaging in two aspects: a team without a welldefined end goal and a timeframe
to achieve it in will drift and probably get demotivated, and you will not be
able to set up a good measure of how much work your team is able to tackle in a
given period of time--which will make it really difficult to draw up a project
timeline.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sprint Plan" src="https://janithl.github.io/images/sprint-plan.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Avoid this trap. Set up 1 or 2 week sprints, take up only stories that the team is
confident they can achieve in that timebox, and &lt;a href="https://medium.com/softwaredevtools/agile-retrospectives-why-your-team-should-be-having-them-even-if-youre-not-in-the-tech-industry-b98c3df6501d"&gt;&lt;strong&gt;have a retro&lt;/strong&gt; at the end of each sprint
to discuss what went well, what failed, and how the team can improve&lt;/a&gt;. Try your best to
ship production code at the end of every sprint. It will give the team a sense of
achievement, and &lt;a href="https://ma.tt/2010/11/one-point-oh/"&gt;that which is most valuable: customer feedback&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Know when to use Frameworks and Libraries&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are some terrible frameworks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Often, code you write from the ground-up for a specific purpose will be faster and more performant.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of the points above a valid, and I avoided using PHP and frontend Javascript
frameworks for the longest time. This cost us a lot in terms of delivery speed and
maintainability, and especially made onboarding new developers hell. I still wonder
how things would’ve turned out had I used — say, Laravel or Python with Flask, or
KnockoutJS from the earliest days. We probably would’ve shipped a lot more features,
and at much higher quality.&lt;/p&gt;
&lt;h3&gt;Read up, seek support&lt;/h3&gt;
&lt;p&gt;Look, when it’s a tiny startup and it’s just two junior devs fighting fires every
day, you will miss out on a lot. You won’t have leads who will guide you on best
practices and design patterns, or architects who explain why TDD is awesome, and
why you should read &lt;a href="https://www.goodreads.com/book/show/3735293-clean-code"&gt;Clean Code by Robert C. Martin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It will be up to you to reach out: follow your &lt;a href="https://twitter.com/dan_abramov"&gt;favourite&lt;/a&gt; &lt;a href="https://twitter.com/dhh"&gt;library&lt;/a&gt; &lt;a href="https://twitter.com/John_Papa"&gt;authors&lt;/a&gt; on Twitter,
subscribe to a few good tech blogs on Medium and turn on the “Daily Digest” email.
Participate in the community and tech meet ups, and try to reach out to batch mates
or seniors working in bigger companies for advice and tips. There are so many people
willing to help if only you’d ask.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Workshop" src="https://janithl.github.io/images/workshop.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So yeah. Those are a few things I learned the hard way, and I wouldn’t trade it for the world. I hope you find it useful.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/@janithl/some-things-i-wish-i-knew-as-a-young-startup-dev-d6475d3f8151"&gt;&lt;em&gt;Originally Posted on Medium&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="code"></category><category term="people"></category><category term="work"></category></entry><entry><title>සමාජ ජාල ඇත්තටම අවුල්ද?</title><link href="https://janithl.github.io/2017/05/is-social-media-bad-si/" rel="alternate"></link><published>2017-05-25T20:58:00+05:30</published><updated>2017-05-25T20:58:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2017-05-25:/2017/05/is-social-media-bad-si/</id><summary type="html">&lt;p&gt;අද ෆේස්බුක් ගිනුමක් නැතිකෙනෙක් බෙහෙතකටවත් හොයාගන්න අමාරුයි. මේ බ්ලොග් එක කියවන ඔය ඇත්තොනම් ඊටත් එහා
ගිය නානාප්‍රකාර සමාජ ජාල ගොඩක ඉන …&lt;/p&gt;</summary><content type="html">&lt;p&gt;අද ෆේස්බුක් ගිනුමක් නැතිකෙනෙක් බෙහෙතකටවත් හොයාගන්න අමාරුයි. මේ බ්ලොග් එක කියවන ඔය ඇත්තොනම් ඊටත් එහා
ගිය නානාප්‍රකාර සමාජ ජාල ගොඩක ඉන්නව ඇති.&lt;/p&gt;
&lt;p&gt;දෙයක් ප්‍රචලිත වෙන්න පටන්ගත්තහම ඒක ඇද හොයන සෙට් එකකුත් අනිවා ඉන්නවනෙ. &lt;a href="http://www.npr.org/sections/health-shots/2016/09/07/492871024/facebook-and-mortality-why-your-incessant-joy-gives-me-the-blues"&gt;ඔය කට්ටිය ආටිකල් දෙක තුනක්
හොයාගෙන&lt;/a&gt;, ඒව උඩ දාගෙන "ෆේස්බුක් මාරයා" ගැන කතා කරන්න පටන් ගන්නව. "දේකට ගෙවන්නෙ නැත්තම්  ඔයා
තමයි වෙළඳ භාණ්ඩෙ", "ඕකට දාන දත්ත වල අයිතිය ඒගොල්ලන්ගෙ" වගේ බය හිතෙන කතා ගොඩක් ඔය සෙට් එකෙන් අහගන්න
පුළුවන්.&lt;/p&gt;
&lt;p&gt;මේ හැමදේම වැරදියි කියල මම කියන්නෙ නෑ. විශේෂයෙන්ම බුකී සමාගමත්, ඒගොල්ලන්ගෙ බිස්නස් කෙරීගෙන යන විදිහත්, 
ඒගොල්ලො වෙළඳ දැන්වීම වලට ඔබව නතුකරගන්න යොදන උපාය මාර්ගත් දැක්කහම අපිට ඔකෙ නරක පැත්ත ගැන යම් වැටහීමක්
ලැබෙනව. ඒත් එක්කම එකේකාගෙ ඕපාදූප හොයන්නයි, රට ගිනි තියන පට්ට පල් බොරු ගහන්නයි, අල්ලපු ගෙදර මිනිහට
පේන්න නයි අරින්නයි බුකී යන ඕනෙතරම් මිනිස්සු ඉන්නව.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;හැබැයි ඔය ඔක්කොටම වඩා සමාජ ජාලත්, විවෘත අන්තර්ජාලයත් හරහා  අපිට ඉතාමත්ම වැදගත් දෙයක් ලැබෙනව.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://si.wikipedia.org/wiki/1971_%E0%B6%A2%E0%B7%80%E0%B7%92%E0%B6%B4%E0%B7%99_%E0%B6%9A%E0%B7%90%E0%B6%BB%E0%B7%90%E0%B6%BD%E0%B7%8A%E0%B6%BD"&gt;1971 ජවිපෙ කැරැල්ලෙදි&lt;/a&gt; කැරලිකරුවො අත්පත් කරගන්න හදපු ඉතාමත්ම වැදගත් මරමස්ථානයක් විදිහට අපිට ශ්‍රී ලංකා ගුවන්
විදුලි සංස්ථාව හඳුනගන්න පුළුවන්. ඒ දවස් වල ටී. වී. ඇවිත් තිබුනෙ නෑ. රටෙ ලෝකෙ වෙන දේ දැනගන්න සාමාන්‍ය මිනිහෙකුට
තිබිච්ච එකම විදිහ රේඩියෝවයි. ඒ වගේම ආණ්ඩුවත් තම පාලනය ගෙනියන්න, විරුද්ධ මත යටපත් කරන්න ගුවන් විදුලිය
උපයෝගී කරගත්ත. එහෙම වැදගත් දෙයක් අල්ලගන්න කැරලිකරුවො ප්‍රමුඛතාව දෙන එක ඉතිං පුදුමයක් නෙමෙයි.&lt;/p&gt;
&lt;p&gt;අද කැරැල්ලක් ඇතිවුනොත් වෙබ් සයිට්, බුකි පිටු, ට්විටර් අකවුන්ට් කී දාහක් කියල අල්ලගන්න ද?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Traditional vs Social Media" src="https://janithl.github.io/images/social-media.png"&gt;&lt;/p&gt;
&lt;p&gt;අද එහෙම කරන්න බෑ. තොරතුරු පිළිබඳව ආණ්ඩුවටත්, මාධ්‍ය ආයතන වලටත් තිබිච්ච ඒකාධිකාරිය අද බිඳ වැටිල. ඉහත කියපු
කැරලි කාලෙදි වගේම, 80/90 දශකවල යුද්ධ පුවත් වාරණයත් ඒ දවස් වල රෑට ප්‍රවෘත්ති බලපු ඕනම කෙනෙක්ට මතක ඇති. අද
මේ දේ කරන්න බොහොම අමාරුයි. මොකද මේ සියල්ල සමාජ ජාල තුළින්, ඡායාරූප/වීඩියෝද ඇතුළුව  විදුලි වේගෙන් පැතිරෙන
නිසා. ආණ්ඩු පෙරලීමේ බලය බුකියට තියෙනව කියන්න අමාරුයි, ඒත් ආණ්ඩුව වගේම විවිධ ව්‍යාපාරද සමාජ ජාල නිසා සීරුවෙන්
ඉන්නව කියල කියන්න පුළුවන්. පාරිභෝගිකයන්ට සලකන ආකාරයේ ඉඳල විවිධ අක්‍රමිකතා වගේ දේවල් සමාජ ජාල වලින් පැතිරිලා,
එම සමාගම් අසරණ වෙච්ච වාර අනන්තයි.&lt;/p&gt;
&lt;p&gt;පාලක පැලැන්තිය සමාජ ජාල වලට බයයි කියල අපිට උපකල්පණය කරන්න පුළුවන්. තමන්ගෙ බලය හීණ වෙන ඕනැම දෙයක් ගැන
සැකෙන් ඉන්න මේ උදවිය පාලනය කරන්න කොහෙත්ම බැරි සමාජ ජාල නිසා තමන්ගෙ පට්ටම නැතිවෙයි කියල බයවෙලයි ඉන්නෙ.&lt;/p&gt;
&lt;p&gt;සමාජ ජාලත්, ඉන් පිටත විවෘත අන්තර්ජාලයත්  100% හොඳ දෙයක් නෙමෙයි. ඒත් ඒකෙ තියන නරක දේට වඩා අපිට ලැබෙන
බලය වැදගත් කියන එකයි මම හිතන්නෙ. ගතානුගතිකව අපිට කියවෙන, ඇහෙන, බැලෙන, ආකල්පමය වශයෙන අපිට සමාන
අදහස් තියෙන අපේම මිත්‍ර කණ්ඩායමට (&lt;a href="https://www.wired.com/2016/11/facebook-echo-chamber/"&gt;"echo chamber"&lt;/a&gt;) එහා ගිහින්, එහා පැත්තෙ මිනිහ කියන්නෙ මොනාද කියල
බලන්න අපිට අවස්ථාවක් ලැබෙනව. සමාජයේ එක් සීමිත පිරිසක් අරක්ගත්ත &lt;em&gt;"ජන සන්නිවේදනය"&lt;/em&gt; කියන එක හැබෑවෙන්ම 
&lt;em&gt;"ජනතාවට"&lt;/em&gt; උරුම කරන්න සමාජ ජාල වලට හැකි වෙලා තියෙනව. එච්චර වදගත් දෙයක් මුළුමුනින්ම "අවුල්" කියල ඉවත දාන
එක අන්ත මෝඩකමක්.&lt;/p&gt;
&lt;p&gt;අර &lt;a href="http://www.npr.org/sections/health-shots/2016/09/07/492871024/facebook-and-mortality-why-your-incessant-joy-gives-me-the-blues"&gt;උඩ ලින්ක් කරපු NPR ආටිකල් එකේ&lt;/a&gt; තියෙනව වගේ:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kraut's advice: "Don't treat it as simple entertainment and consume everything that is 
put in front of you," he said. "Use it more proactively to communicate with people that 
you care about."&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="sinhala"></category><category term="people"></category><category term="politics"></category></entry><entry><title>Retaining</title><link href="https://janithl.github.io/2017/03/retaining/" rel="alternate"></link><published>2017-03-28T22:48:00+05:30</published><updated>2017-03-28T22:48:00+05:30</updated><author><name>Janith</name></author><id>tag:janithl.github.io,2017-03-28:/2017/03/retaining/</id><summary type="html">&lt;p&gt;There was a really interesting &lt;a href="https://blog.ycombinator.com/ask-a-female-engineer-how-can-managers-help-retain-technical-women-on-their-team/"&gt;YC blog post&lt;/a&gt; titled &lt;strong&gt;"Ask a Female Engineer: How Can 
Managers Help Retain Technical Women on Their Team?"&lt;/strong&gt;, which asks a panel of female 
technical employees on reasons they left jobs or in some cases even change their career 
paths.&lt;/p&gt;
&lt;p&gt;I believe it has some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There was a really interesting &lt;a href="https://blog.ycombinator.com/ask-a-female-engineer-how-can-managers-help-retain-technical-women-on-their-team/"&gt;YC blog post&lt;/a&gt; titled &lt;strong&gt;"Ask a Female Engineer: How Can 
Managers Help Retain Technical Women on Their Team?"&lt;/strong&gt;, which asks a panel of female 
technical employees on reasons they left jobs or in some cases even change their career 
paths.&lt;/p&gt;
&lt;p&gt;I believe it has some really important takeaways not just for managers of technical teams,
but all managers and all employees of whetever gender.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ve left companies after years of chaotically fighting fires while simultaneously
needing to build new features, or after repeatedly getting disorganized braindumps or
single line descriptions from stakeholders rather than the thoughtful, detailed specs
they’ve promised.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is something I've had to deal with personally as well: underspecification, or the
people in charge not really knowing what they want. Rewriting code to fit their latest
whim or fancy is wasteful and makes you feel like your project is going nowhere. Also,
&lt;a href="https://en.wikipedia.org/wiki/Scope_creep"&gt;scope creep&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Making sure your team members have a comfortable relationship with someone in leadership
outside their reporting chain is important; having someone who they feel they can go to
with manager-related problems is key.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As the recent &lt;a href="https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber"&gt;Susan Fowler/Uber debacle&lt;/a&gt; showed, though, upper leadership tends to
favour the manager's side over the employee's.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Especially as a woman, I worry about being labeled hyper-sensitive, or that my gender
will influence a person’s reaction to my feedback (e.g. the perception that women are
hysterical). If a company’s leadership feels too tightly knit – where all the managers
and founders are friends that aren’t open to critical feedback from employees – I won’t
even try to work out the issue before leaving.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See: the Uber thing above.&lt;/p&gt;
&lt;p&gt;And finally, this gem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;That employee shouldn’t have to train their boss in order to make the relationship
productive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On finding a new job:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I might see an email from a recruiter about a job that sounds exciting and that pays
well. I’ll start to consider leaving, and then someone I work with – usually my boss or
manager – does something that makes me angry. Angry enough to rewrite my resume, email a
recruiter back, brush up on interview questions and whiteboarding, and get off my butt
and go interview.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or deciding to stay:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s important that my boss checks in with me even if I seem happy or like I’m doing
really well. I don’t want to be asked for feedback only when things aren’t going well.
When my boss respectfully listens to feedback and strives to incorporate at least some of
it, I’m much more likely to stay at a company.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On working at a startup:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At a startup it can be hard to decipher whether your company is doing well, especially
since progress isn’t always in a continuous, upward direction. As an employee, you’re not
always privy to important information that would help you figure it out, especially if the
company is struggling. I’ve often felt that trying to determine how well my company is
doing is a guessing game. So then I turn to assessing my personal growth because that’s in
theory more straight-forward. I ask myself questions like: How much have I learned? Do I
get feedback? Am I challenged? What else can I accomplish here? If I can get excited about
what’s next for me at a company, I will stay. If I can mix things up enough and learn new
things where I am without actually finding a new job, I will do that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Anyway, the &lt;a href="https://blog.ycombinator.com/ask-a-female-engineer-how-can-managers-help-retain-technical-women-on-their-team/"&gt;&lt;strong&gt;full blog post&lt;/strong&gt;&lt;/a&gt; is really interesting and a must-read for both 
managers and employees. So do yourself a favour and go read!&lt;/p&gt;</content><category term="people"></category><category term="politics"></category><category term="work"></category></entry></feed>